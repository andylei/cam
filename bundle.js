(function(e){function t(a){if(n[a])return n[a].exports;var o=n[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e['default']}:function(){return e};return t.d(n,'a',n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p='',t(t.s=174)})([function(e,t,n){'use strict';n.d(t,'i',function(){return a}),n.d(t,'j',function(){return o}),n.d(t,'o',function(){return i}),n.d(t,'l',function(){return r}),n.d(t,'q',function(){return l}),n.d(t,'w',function(){return d}),n.d(t,'h',function(){return s}),n.d(t,'r',function(){return c}),n.d(t,'a',function(){return p}),n.d(t,'d',function(){return u}),n.d(t,'e',function(){return g}),n.d(t,'g',function(){return h}),n.d(t,'f',function(){return m}),n.d(t,'k',function(){return f}),n.d(t,'n',function(){return _}),n.d(t,'p',function(){return y}),n.d(t,'t',function(){return w}),n.d(t,'s',function(){return x}),n.d(t,'u',function(){return v}),n.d(t,'v',function(){return C}),t.b=function(e){return 1<e?0:-1>e?i:Math.acos(e)},t.c=function(e){return 1<e?r:-1>e?-r:Math.asin(e)},t.m=function(e){return(e=w(e/2))*e};var a=1e-6,o=1e-12,i=Math.PI,r=i/2,l=i/4,d=2*i,s=180/i,c=i/180,p=Math.abs,u=Math.atan,g=Math.atan2,h=Math.cos,m=Math.ceil,f=Math.exp,b=Math.floor,_=Math.log,y=Math.pow,w=Math.sin,x=Math.sign||function(e){return 0<e?1:0>e?-1:0},v=Math.sqrt,C=Math.tan},function(e,t,n){'use strict';Object.defineProperty(t,'__esModule',{value:!0});var a=n(58);n.d(t,'creator',function(){return a.a});var o=n(249);n.d(t,'local',function(){return o.a});var i=n(121);n.d(t,'matcher',function(){return i.a});var r=n(250);n.d(t,'mouse',function(){return r.a});var l=n(59);n.d(t,'namespace',function(){return l.a});var d=n(60);n.d(t,'namespaces',function(){return d.a});var s=n(251);n.d(t,'select',function(){return s.a});var c=n(279);n.d(t,'selectAll',function(){return c.a});var p=n(5);n.d(t,'selection',function(){return p.b});var u=n(64);n.d(t,'selector',function(){return u.a});var g=n(122);n.d(t,'selectorAll',function(){return g.a});var h=n(125);n.d(t,'style',function(){return h.b});var m=n(280);n.d(t,'touch',function(){return m.a});var f=n(281);n.d(t,'touches',function(){return f.a});var b=n(65);n.d(t,'window',function(){return b.a});var _=n(62);n.d(t,'event',function(){return _.c}),n.d(t,'customEvent',function(){return _.a})},function(e,t,n){'use strict';Object.defineProperty(t,'__esModule',{value:!0});var a=n(91);n.d(t,'bisect',function(){return a.c}),n.d(t,'bisectRight',function(){return a.b}),n.d(t,'bisectLeft',function(){return a.a});var o=n(17);n.d(t,'ascending',function(){return o.a});var i=n(92);n.d(t,'bisector',function(){return i.a});var r=n(176);n.d(t,'cross',function(){return r.a});var l=n(177);n.d(t,'descending',function(){return l.a});var d=n(94);n.d(t,'deviation',function(){return d.a});var s=n(96);n.d(t,'extent',function(){return s.a});var c=n(178);n.d(t,'histogram',function(){return c.a});var p=n(181);n.d(t,'thresholdFreedmanDiaconis',function(){return p.a});var u=n(182);n.d(t,'thresholdScott',function(){return u.a});var g=n(100);n.d(t,'thresholdSturges',function(){return g.a});var h=n(183);n.d(t,'max',function(){return h.a});var m=n(184);n.d(t,'mean',function(){return m.a});var f=n(185);n.d(t,'median',function(){return f.a});var b=n(186);n.d(t,'merge',function(){return b.a});var _=n(101);n.d(t,'min',function(){return _.a});var y=n(93);n.d(t,'pairs',function(){return y.a});var x=n(187);n.d(t,'permute',function(){return x.a});var w=n(47);n.d(t,'quantile',function(){return w.a});var v=n(98);n.d(t,'range',function(){return v.a});var C=n(188);n.d(t,'scan',function(){return C.a});var T=n(189);n.d(t,'shuffle',function(){return T.a});var k=n(190);n.d(t,'sum',function(){return k.a});var S=n(99);n.d(t,'ticks',function(){return S.a}),n.d(t,'tickIncrement',function(){return S.b}),n.d(t,'tickStep',function(){return S.c});var E=n(102);n.d(t,'transpose',function(){return E.a});var z=n(95);n.d(t,'variance',function(){return z.a});var A=n(191);n.d(t,'zip',function(){return A.a})},function(e,t){'use strict';function n(e,t,r,l){function s(t){return e(t=new Date(+t)),t}return s.floor=s,s.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},s.round=function(e){var t=s(e),n=s.ceil(e);return e-t<n-e?t:n},s.offset=function(e,n){return t(e=new Date(+e),null==n?1:a(n)),e},s.range=function(n,o,i){var r=[];if(n=s.ceil(n),i=null==i?1:a(i),!(n<o)||!(0<i))return r;do r.push(new Date(+n));while((t(n,i),e(n),n<o));return r},s.filter=function(a){return n(function(t){if(t>=t)for(;e(t),!a(t);)t.setTime(t-1)},function(e,n){if(e>=e)if(0>n)for(;0>=++n;)for(;t(e,-1),!a(e););else for(;0<=--n;)for(;t(e,1),!a(e););})},r&&(s.count=function(t,n){return o.setTime(+t),i.setTime(+n),e(o),e(i),a(r(o,i))},s.every=function(e){return e=a(e),isFinite(e)&&0<e?1<e?s.filter(l?function(t){return 0==l(t)%e}:function(t){return 0==s.count(0,t)%e}):s:null}),s}var a=Math.floor;t.a=n;var o=new Date,i=new Date},function(e,t,n){'use strict';var a=n(49);n.d(t,'a',function(){return a.a});var o=n(108);n.d(t,'b',function(){return o.a});var i=n(52);n.d(t,'c',function(){return i.b});var r=n(106);n.d(t,'d',function(){return r.a});var l=n(109);n.d(t,'g',function(){return l.a});var d=n(33);n.d(t,'m',function(){return d.a});var s=n(110);n.d(t,'n',function(){return s.a});var c=n(200);n.d(t,'r',function(){return c.a});var p=n(111);n.d(t,'s',function(){return p.a});var u=n(201);n.d(t,'t',function(){return u.a}),n.d(t,'u',function(){return u.b});var g=n(204);n.d(t,'v',function(){return g.a});var h=n(105);n.d(t,'o',function(){return h.a}),n.d(t,'p',function(){return h.b}),n.d(t,'q',function(){return h.c});var m=n(205);n.d(t,'j',function(){return m.a}),n.d(t,'k',function(){return m.b});var f=n(206);n.d(t,'l',function(){return f.a});var b=n(207);n.d(t,'h',function(){return b.a}),n.d(t,'i',function(){return b.b});var _=n(208);n.d(t,'e',function(){return _.b}),n.d(t,'f',function(){return _.a});var y=n(209);n.d(t,'w',function(){return y.a})},function(e,t,n){'use strict';function a(e,t){this._groups=e,this._parents=t}function o(){return new a([[document.documentElement]],L)}n.d(t,'c',function(){return L}),t.a=a;var i=n(252),r=n(253),l=n(254),d=n(255),s=n(123),c=n(257),p=n(258),u=n(259),g=n(260),h=n(261),m=n(262),f=n(263),b=n(264),_=n(265),y=n(266),x=n(267),w=n(125),v=n(268),C=n(269),T=n(270),k=n(271),S=n(272),E=n(273),z=n(274),A=n(275),M=n(276),D=n(277),j=n(62),N=n(278),L=[null];a.prototype=o.prototype={constructor:a,select:i.a,selectAll:r.a,filter:l.a,data:d.a,enter:s.b,exit:c.a,merge:p.a,order:u.a,sort:g.a,call:h.a,nodes:m.a,node:f.a,size:b.a,empty:_.a,each:y.a,attr:x.a,style:w.a,property:v.a,classed:C.a,text:T.a,html:k.a,raise:S.a,lower:E.a,append:z.a,insert:A.a,remove:M.a,datum:D.a,on:j.b,dispatch:N.a},t.b=o},function(e,t,n){'use strict';function a(e,t,a){function n(g){var f,i,b,_;if(a.state!==s)return l();for(f in d)if(_=d[f],_.name===a.name){if(_.state===p)return Object(r.c)(n);_.state===u?(_.state=h,_.timer.stop(),_.on.call('interrupt',e,e.__data__,_.index,_.group),delete d[f]):+f<t&&(_.state=h,_.timer.stop(),delete d[f])}if(Object(r.c)(function(){a.state===p&&(a.state=u,a.timer.restart(o,a.delay,a.time),o(g))}),a.state=c,a.on.call('start',e,e.__data__,a.index,a.group),a.state===c){for(a.state=p,m=Array(b=a.tween.length),(f=0,i=-1);f<b;++f)(_=a.tween[f].value.call(e,e.__data__,a.index,a.group))&&(m[++i]=_);m.length=i+1}}function o(o){for(var r=o<a.duration?a.ease.call(null,o/a.duration):(a.timer.restart(l),a.state=g,1),t=-1,i=m.length;++t<i;)m[t].call(null,r);a.state===g&&(a.on.call('end',e,e.__data__,a.index,a.group),l())}function l(){for(var n in a.state=h,a.timer.stop(),delete d[t],d)return;delete e.__transition}var d=e.__transition,m;d[t]=a,a.timer=Object(r.d)(function(e){a.state=s,a.timer.restart(n,a.delay,a.time),a.delay<=e&&n(e-a.delay)},0,a.time)}n.d(t,'c',function(){return s}),n.d(t,'d',function(){return c}),n.d(t,'b',function(){return g}),n.d(t,'a',function(){return h}),t.g=function(e,t){var n=e.__transition;if(!n||!(n=n[t])||n.state>d)throw new Error('too late');return n},t.h=function(e,t){var n=e.__transition;if(!n||!(n=n[t])||n.state>c)throw new Error('too late');return n},t.f=function(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error('too late');return n};var o=n(13),r=n(37),i=Object(o.a)('start','end','interrupt'),l=[],d=0,s=1,c=2,p=3,u=4,g=5,h=6;t.e=function(e,t,n,o,r,s){var c=e.__transition;if(!c)e.__transition={};else if(n in c)return;a(e,n,{name:t,index:o,group:r,on:i,tween:l,time:s.time,delay:s.delay,duration:s.duration,ease:s.ease,timer:null,state:d})}},function(e,t,n){'use strict';var a=n(50);n.d(t,'a',function(){return a.e}),n.d(t,'f',function(){return a.g}),n.d(t,'d',function(){return a.f});var o=n(198);n.d(t,'e',function(){return o.a}),n.d(t,'c',function(){return o.b});var i=n(199);n.d(t,'b',function(){return i.a})},function(e,t,n){'use strict';n.d(t,'d',function(){return a}),n.d(t,'c',function(){return o}),n.d(t,'b',function(){return i}),n.d(t,'a',function(){return r}),n.d(t,'e',function(){return l});var a=1e3,o=6e4,i=36e5,r=864e5,l=6048e5},function(e,t,n){'use strict';function a(e){function t(e){return e=L(e[0]*s.r,e[1]*s.r),[e[0]*f+D,j-e[1]*f]}function n(e){return e=L.invert((e[0]-D)/f,(j-e[1])/f),e&&[e[0]*s.h,e[1]*s.h]}function a(e,t){return e=_(e,t),[e[0]*f+D,j-e[1]*f]}function p(){L=Object(l.a)(N=Object(c.b)(v,C,T),_);var e=_(y,w);return D=b-e[0]*f,j=x+e[1]*f,m()}function m(){return I=H=null,t}var f=150,b=480,x=250,y=0,w=0,v=0,C=0,T=0,k=null,S=o.a,E=null,z=d.a,A=0.5,M=Object(g.a)(a,A),_,D,j,N,L,P,R,q,I,H;return t.stream=function(e){return I&&H===e?I:I=h(S(N,M(z(H=e))))},t.clipAngle=function(e){return arguments.length?(S=+e?Object(i.a)(k=e*s.r,6*s.r):(k=null,o.a),m()):k*s.h},t.clipExtent=function(e){return arguments.length?(z=null==e?(E=P=R=q=null,d.a):Object(r.a)(E=+e[0][0],P=+e[0][1],R=+e[1][0],q=+e[1][1]),m()):null==E?null:[[E,P],[R,q]]},t.scale=function(e){return arguments.length?(f=+e,p()):f},t.translate=function(e){return arguments.length?(b=+e[0],x=+e[1],p()):[b,x]},t.center=function(e){return arguments.length?(y=e[0]%360*s.r,w=e[1]%360*s.r,p()):[y*s.h,w*s.h]},t.rotate=function(e){return arguments.length?(v=e[0]%360*s.r,C=e[1]%360*s.r,T=2<e.length?e[2]%360*s.r:0,p()):[v*s.h,C*s.h,T*s.h]},t.precision=function(e){return arguments.length?(M=Object(g.a)(a,A=e*e),m()):Object(s.u)(A)},t.fitExtent=function(e,n){return Object(u.a)(t,e,n)},t.fitSize=function(e,n){return Object(u.b)(t,e,n)},function(){return _=e.apply(this,arguments),t.invert=_.invert&&n,p()}}t.a=function(e){return a(function(){return e})()},t.b=a;var o=n(371),i=n(372),r=n(74),l=n(136),d=n(75),s=n(0),c=n(39),p=n(40),u=n(78),g=n(373),h=Object(p.b)({point:function(e,t){this.stream.point(e*s.r,t*s.r)}})},function(e,t,n){'use strict';function a(e,t,n,a){this._groups=e,this._parents=t,this._name=n,this._id=a}function o(e){return Object(i.selection)().transition(e)}t.a=a,t.b=o,t.c=function(){return++C};var i=n(1),r=n(299),l=n(300),d=n(301),s=n(302),c=n(303),p=n(304),u=n(305),g=n(306),h=n(307),m=n(308),f=n(309),b=n(310),_=n(311),y=n(312),x=n(313),w=n(314),v=n(38),C=0,T=i.selection.prototype;a.prototype=o.prototype={constructor:a,select:m.a,selectAll:f.a,filter:p.a,merge:u.a,selection:b.a,transition:w.a,call:T.call,nodes:T.nodes,node:T.node,size:T.size,empty:T.empty,each:T.each,on:g.a,attr:r.a,attrTween:l.a,style:_.a,styleTween:y.a,text:x.a,remove:h.a,tween:v.a,delay:d.a,duration:s.a,ease:c.a}},function(e,t){'use strict';t.a=function(){}},function(e,t,n){'use strict';n.d(t,'a',function(){return o}),n.d(t,'b',function(){return i});var a=Array.prototype,o=a.map,i=a.slice},function(e,t,n){'use strict';var a=n(290);n.d(t,'a',function(){return a.a})},function(e,t,n){'use strict';var a=n(334);n.d(t,'a',function(){return a.a})},function(e,t){'use strict';function a(e,t){e&&i.hasOwnProperty(e.type)&&i[e.type](e,t)}function o(e,t,a){var o=-1,i=e.length-a,n;for(t.lineStart();++o<i;)n=e[o],t.point(n[0],n[1],n[2]);t.lineEnd()}function r(e,t){var a=-1,i=e.length;for(t.polygonStart();++a<i;)o(e[a],t,1);t.polygonEnd()}var n={Feature:function(e,t){a(e.geometry,t)},FeatureCollection:function(e,t){for(var o=e.features,r=-1,i=o.length;++r<i;)a(o[r].geometry,t)}},i={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var a=e.coordinates,o=-1,i=a.length;++o<i;)e=a[o],t.point(e[0],e[1],e[2])},LineString:function(e,t){o(e.coordinates,t,0)},MultiLineString:function(e,t){for(var a=e.coordinates,r=-1,i=a.length;++r<i;)o(a[r],t,0)},Polygon:function(e,t){r(e.coordinates,t)},MultiPolygon:function(e,t){for(var a=e.coordinates,o=-1,i=a.length;++o<i;)r(a[o],t)},GeometryCollection:function(e,t){for(var o=e.geometries,r=-1,i=o.length;++r<i;)a(o[r],t)}};t.a=function(e,t){e&&n.hasOwnProperty(e.type)?n[e.type](e,t):a(e,t)}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';t.a=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}},function(e,t){'use strict';function n(){this.reset()}function a(e,t,n){var a=e.s=t+n,o=a-t;e.t=t-(a-o)+(n-o)}t.a=function(){return new n},n.prototype={constructor:n,reset:function(){this.s=this.t=0},add:function(e){a(o,e,this.t),a(this,o.s,this.s),this.s?this.t+=o.t:this.s=o.t},valueOf:function(){return this.s}};var o=new n},function(e,t){'use strict';t.a=function(){return Math.random()}},function(e,t){'use strict';t.a=function(e){return null===e?NaN:+e}},function(e,t,n){'use strict';var a=n(192);n.d(t,'d',function(){return a.a});var o=n(193);n.d(t,'e',function(){return o.a});var i=n(48);n.d(t,'c',function(){return i.a});var r=n(194);n.d(t,'b',function(){return r.a});var l=n(195);n.d(t,'f',function(){return l.a});var d=n(196);n.d(t,'a',function(){return d.a})},function(e,t,n){'use strict';function a(e){var t=e.domain;return e.ticks=function(e){var n=t();return Object(l.ticks)(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){return Object(c.a)(t(),e,n)},e.nice=function(n){null==n&&(n=10);var a=t(),o=0,d=a.length-1,s=a[o],c=a[d],p;return c<s&&(p=s,s=c,c=p,p=o,o=d,d=p),p=Object(l.tickIncrement)(s,c,n),0<p?(s=i(s/p)*p,c=r(c/p)*p,p=Object(l.tickIncrement)(s,c,n)):0>p&&(s=r(s*p)/p,c=i(c*p)/p,p=Object(l.tickIncrement)(s,c,n)),0<p?(a[o]=i(s/p)*p,a[d]=r(c/p)*p,t(a)):0>p&&(a[o]=r(s*p)/p,a[d]=i(c*p)/p,t(a)),e},e}function o(){var e=Object(s.b)(s.c,d.m);return e.copy=function(){return Object(s.a)(e,o())},a(e)}var i=Math.floor,r=Math.ceil;t.b=a,t.a=o;var l=n(2),d=n(4),s=n(34),c=n(210)},function(e,t,n){'use strict';function o(e,n){return function(a){return e+a*n}}function i(e,n,a){return e=r(e,a),n=r(n,a)-e,a=1/a,function(o){return r(e+o*n,a)}}function a(e,t){var n=t-e;return n?o(e,n):Object(l.a)(isNaN(e)?t:e)}var r=Math.pow;t.c=function(e,t){var n=t-e;return n?o(e,180<n||-180>n?n-360*Math.round(n/360):n):Object(l.a)(isNaN(e)?t:e)},t.b=function(e){return 1==(e=+e)?a:function(t,n){return n-t?i(t,n,e):Object(l.a)(isNaN(t)?n:t)}},t.a=a;var l=n(107)},function(e,t){'use strict';t.a=function(e){return e.match(/.{6}/g).map(function(e){return'#'+e})}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t,n){'use strict';t.g=function(e){return[Object(a.e)(e[1],e[0]),Object(a.c)(e[2])]},t.a=function(e){var t=e[0],n=e[1],o=Object(a.g)(n);return[o*Object(a.g)(t),o*Object(a.t)(t),Object(a.t)(n)]},t.d=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},t.c=function(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]},t.b=function(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]},t.f=function(e,t){return[e[0]*t,e[1]*t,e[2]*t]},t.e=function(e){var t=Object(a.u)(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t};var a=n(0)},function(e,t,n){'use strict';t.b=function(e){return function(t,n){var o=Object(a.g)(t),i=Object(a.g)(n),r=e(o*i);return[r*i*Object(a.t)(t),r*Object(a.t)(n)]}},t.a=function(e){return function(t,n){var o=Object(a.u)(t*t+n*n),i=e(o),r=Object(a.t)(i),l=Object(a.g)(i);return[Object(a.e)(t*r,o*l),Object(a.c)(o&&n*r/o)]}};var a=n(0)},function(e,t){'use strict';t.a=function(e,t,a,o,r){for(var l=e.children,d=-1,i=l.length,n=e.value&&(o-t)/e.value,s;++d<i;)s=l[d],s.y0=a,s.y1=r,s.x0=t,s.x1=t+=s.value*n}},function(e,t,n){'use strict';n.d(t,'a',function(){return a}),n.d(t,'d',function(){return o}),n.d(t,'e',function(){return i}),n.d(t,'h',function(){return r}),n.d(t,'i',function(){return l}),n.d(t,'k',function(){return d}),n.d(t,'l',function(){return s}),n.d(t,'f',function(){return c}),n.d(t,'j',function(){return p}),n.d(t,'g',function(){return u}),n.d(t,'m',function(){return g}),t.b=function(e){return 1<e?0:-1>e?p:Math.acos(e)},t.c=function(e){return 1<=e?u:-1>=e?-u:Math.asin(e)};var a=Math.abs,o=Math.atan2,i=Math.cos,r=Math.max,l=Math.min,d=Math.sin,s=Math.sqrt,c=1e-12,p=Math.PI,u=p/2,g=2*p},function(e,t){'use strict';t.a=function(e,t){if(1<(d=e.length))for(var a=1,o=e[t[0]],i=o.length,r,l,d;a<d;++a)for(l=o,o=e[t[a]],r=0;r<i;++r)o[r][1]+=o[r][0]=isNaN(l[r][1])?l[r][0]:l[r][1]}},function(e,t){'use strict';t.a=function(e){for(var t=e.length,n=Array(t);0<=--t;)n[t]=t;return n}},function(e,t,n){'use strict';function a(e,t,n){return(e[0]-n[0])*(t[1]-e[1])-(e[0]-t[0])*(n[1]-e[1])}function o(e,t){return t[1]-e[1]||t[0]-e[0]}function i(e,t){var n=e.sort(o).pop(),a,i,p;for(f=[],h=Array(e.length),g=new c.b,m=new c.b;;)if(p=d.c,n&&(!p||n[1]<p.y||n[1]===p.y&&n[0]<p.x))(n[0]!==a||n[1]!==i)&&(Object(r.a)(n),a=n[0],i=n[1]),n=e.pop();else if(p)Object(r.b)(p.arc);else break;if(Object(l.d)(),t){var u=+t[0][0],b=+t[0][1],_=+t[1][0],y=+t[1][1];Object(s.a)(u,b,_,y),Object(l.b)(u,b,_,y)}this.edges=f,this.cells=h,g=m=f=h=null}n.d(t,'f',function(){return p}),n.d(t,'g',function(){return u}),n.d(t,'a',function(){return g}),n.d(t,'b',function(){return h}),n.d(t,'c',function(){return m}),n.d(t,'e',function(){return f}),t.d=i;var r=n(458),l=n(168),d=n(169),s=n(89),c=n(88),p=1e-6,u=1e-12,g,h,m,f;i.prototype={constructor:i,polygons:function(){var e=this.edges;return this.cells.map(function(t){var n=t.halfedges.map(function(n){return Object(l.a)(t,e[n])});return n.data=t.site.data,n})},triangles:function(){var e=[],t=this.edges;return this.cells.forEach(function(n,o){if(c=(s=n.halfedges).length)for(var i=n.site,r=-1,l=t[s[c-1]],d=l.left===i?l.right:l.left,s,c,p;++r<c;)p=d,l=t[s[r]],d=l.left===i?l.right:l.left,p&&d&&o<p.index&&o<d.index&&0>a(i,p,d)&&e.push([i.data,p.data,d.data])}),e},links:function(){return this.edges.filter(function(e){return e.right}).map(function(e){return{source:e.left.data,target:e.right.data}})},find:function(e,t,a){for(var o=this,i=o._found||0,r=o.cells.length,n,l;!(l=o.cells[i]);)if(++i>=r)return null;var d=e-l.site[0],s=t-l.site[1],c=d*d+s*s;do l=o.cells[n=i],i=null,l.halfedges.forEach(function(n){var a=o.edges[n],r=a.left;if(r!==l.site&&r||(r=a.right)){var d=e-r[0],s=t-r[1],p=d*d+s*s;p<c&&(c=p,i=r.index)}});while(null!==i);return o._found=n,null==a||c<=a*a?l.site:null}}},function(e,t){'use strict';t.a=function(e,n){return e=+e,n-=e,function(a){return e+n*a}}},function(e,t,n){'use strict';function a(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:Object(u.a)(t)}function o(e){return function(t,n){var o=e(t=+t,n=+n);return function(e){return e<=t?0:e>=n?1:o(e)}}}function i(e){return function(n,o){var i=e(n=+n,o=+o);return function(e){return 0>=e?n:1<=e?o:i(e)}}}function r(e,t,n,a){var o=e[0],i=e[1],r=t[0],l=t[1];return i<o?(o=n(i,o),r=a(l,r)):(o=n(o,i),r=a(r,l)),function(e){return r(o(e))}}function l(e,t,n,a){var o=s(e.length,t.length)-1,l=Array(o),d=Array(o),r=-1;for(e[o]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++r<o;)l[r]=n(e[r],e[r+1]),d[r]=a(t[r],t[r+1]);return function(t){var n=Object(c.bisect)(e,t,1,o)-1;return d[n](l[n](t))}}var s=Math.min;t.c=a,t.a=function(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp())},t.b=function(e,t){function n(){return _=2<s(u.length,m.length)?l:r,y=x=null,c}function c(t){return(y||(y=_(u,m,b?o(e):e,f)))(+t)}var u=h,m=h,f=d.a,b=!1,_,y,x;return c.invert=function(e){return(x||(x=_(m,u,a,b?i(t):t)))(+e)},c.domain=function(e){return arguments.length?(u=p.a.call(e,g.a),n()):u.slice()},c.range=function(e){return arguments.length?(m=p.b.call(e),n()):m.slice()},c.rangeRound=function(e){return m=p.b.call(e),f=d.r,n()},c.clamp=function(e){return arguments.length?(b=!!e,n()):b},c.interpolate=function(e){return arguments.length?(f=e,n()):f},n()};var c=n(2),d=n(4),p=n(12),u=n(53),g=n(112),h=[0,1]},function(e,t,n){'use strict';var a=n(55);t.a=function(e){return e=Object(a.a)(Math.abs(e)),e?e[1]:NaN}},function(e,t,n){'use strict';var a=n(3);n.d(t,'g',function(){return a.a});var o=n(225);n.d(t,'h',function(){return o.a}),n.d(t,'i',function(){return o.b}),n.d(t,'L',function(){return o.a}),n.d(t,'M',function(){return o.b});var i=n(226);n.d(t,'r',function(){return i.a}),n.d(t,'s',function(){return i.b}),n.d(t,'V',function(){return i.a}),n.d(t,'W',function(){return i.b});var r=n(227);n.d(t,'j',function(){return r.a}),n.d(t,'k',function(){return r.b});var l=n(228);n.d(t,'e',function(){return l.a}),n.d(t,'f',function(){return l.b});var d=n(229);n.d(t,'a',function(){return d.b}),n.d(t,'b',function(){return d.a});var s=n(230);n.d(t,'B',function(){return s.g}),n.d(t,'C',function(){return s.h}),n.d(t,'t',function(){return s.g}),n.d(t,'u',function(){return s.h}),n.d(t,'l',function(){return s.c}),n.d(t,'m',function(){return s.d}),n.d(t,'x',function(){return s.k}),n.d(t,'y',function(){return s.l}),n.d(t,'z',function(){return s.m}),n.d(t,'A',function(){return s.n}),n.d(t,'v',function(){return s.i}),n.d(t,'w',function(){return s.j}),n.d(t,'c',function(){return s.a}),n.d(t,'d',function(){return s.b}),n.d(t,'p',function(){return s.e}),n.d(t,'q',function(){return s.f});var c=n(231);n.d(t,'n',function(){return c.a}),n.d(t,'o',function(){return c.b});var p=n(232);n.d(t,'D',function(){return p.a}),n.d(t,'E',function(){return p.b});var u=n(233);n.d(t,'N',function(){return u.a}),n.d(t,'O',function(){return u.b});var g=n(234);n.d(t,'J',function(){return g.a}),n.d(t,'K',function(){return g.b});var h=n(235);n.d(t,'F',function(){return h.a}),n.d(t,'G',function(){return h.b});var m=n(236);n.d(t,'_5',function(){return m.g}),n.d(t,'_6',function(){return m.h}),n.d(t,'X',function(){return m.g}),n.d(t,'Y',function(){return m.h}),n.d(t,'P',function(){return m.c}),n.d(t,'Q',function(){return m.d}),n.d(t,'_1',function(){return m.k}),n.d(t,'_2',function(){return m.l}),n.d(t,'_3',function(){return m.m}),n.d(t,'_4',function(){return m.n}),n.d(t,'Z',function(){return m.i}),n.d(t,'_0',function(){return m.j}),n.d(t,'H',function(){return m.a}),n.d(t,'I',function(){return m.b}),n.d(t,'T',function(){return m.e}),n.d(t,'U',function(){return m.f});var f=n(237);n.d(t,'R',function(){return f.a}),n.d(t,'S',function(){return f.b});var b=n(238);n.d(t,'_7',function(){return b.a}),n.d(t,'_8',function(){return b.b})},function(e,t,n){'use strict';var a=n(68);n.d(t,'b',function(){return a.b}),n.d(t,'d',function(){return a.c}),n.d(t,'e',function(){return a.d});var o=n(296);n.d(t,'c',function(){return o.a});var i=n(297);n.d(t,'a',function(){return i.a})},function(e,t,n){'use strict';function a(e,t){var a,o;return function(){var l=Object(r.h)(this,e),d=l.tween;if(d!==a){o=a=d;for(var s=0,i=o.length;s<i;++s)if(o[s].name===t){o=o.slice(),o.splice(s,1);break}}l.tween=o}}function o(e,a,o){var l,d;if('function'!=typeof o)throw new Error;return function(){var s=Object(r.h)(this,e),c=s.tween;if(c!==l){d=(l=c).slice();for(var p={name:a,value:o},t=0,i=d.length;t<i;++t)if(d[t].name===a){d[t]=p;break}t===i&&d.push(p)}s.tween=d}}t.b=function(e,t,n){var a=e._id;return e.each(function(){var e=Object(r.h)(this,a);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return Object(r.f)(e,a).value[t]}};var r=n(6);t.a=function(e,l){var d=this._id;if(e+='',2>arguments.length){for(var s=Object(r.f)(this.node(),d).tween,c=0,i=s.length,n;c<i;++c)if((n=s[c]).name===e)return n.value;return null}return this.each((null==l?a:o)(d,e,l))}},function(e,t,n){'use strict';function a(e,t){return[e>s.o?e-s.w:e<-s.o?e+s.w:e,t]}function o(e,t,n){return(e%=s.w)?t||n?Object(d.a)(r(e),l(t,n)):r(e):t||n?l(t,n):a}function i(e){return function(t,n){return t+=e,[t>s.o?t-s.w:t<-s.o?t+s.w:t,n]}}function r(e){var t=i(e);return t.invert=i(-e),t}function l(e,t){function n(e,t){var n=Object(s.g)(t),l=Object(s.g)(e)*n,d=Object(s.t)(e)*n,c=Object(s.t)(t),p=c*a+l*o;return[Object(s.e)(d*i-p*r,l*a-c*o),Object(s.c)(p*i+d*r)]}var a=Object(s.g)(e),o=Object(s.t)(e),i=Object(s.g)(t),r=Object(s.t)(t);return n.invert=function(e,t){var n=Object(s.g)(t),l=Object(s.g)(e)*n,d=Object(s.t)(e)*n,c=Object(s.t)(t),p=c*i-d*r;return[Object(s.e)(d*i+c*r,l*a+p*o),Object(s.c)(p*a-l*o)]},n}t.b=o;var d=n(136),s=n(0);a.invert=a,t.a=function(e){function t(t){return t=e(t[0]*s.r,t[1]*s.r),t[0]*=s.h,t[1]*=s.h,t}return e=o(e[0]*s.r,e[1]*s.r,2<e.length?e[2]*s.r:0),t.invert=function(t){return t=e.invert(t[0]*s.r,t[1]*s.r),t[0]*=s.h,t[1]*=s.h,t},t}},function(e,t){'use strict';function n(e){return function(t){var n=new a;for(var o in e)n[o]=e[o];return n.stream=t,n}}function a(){}t.b=n,t.a=function(e){return{stream:n(e)}},a.prototype={constructor:a,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}}},function(e,t){'use strict';t.a=function(e,t,a,o,r){for(var l=e.children,d=-1,i=l.length,n=e.value&&(r-a)/e.value,s;++d<i;)s=l[d],s.x0=t,s.x1=o,s.y0=a,s.y1=a+=s.value*n}},function(e,t,n){'use strict';var a=n(83);t.a=function(e,t){return function(n,o){var i=Object(a.a)(n).mimeType(e).response(t);if(null!=o){if('function'!=typeof o)throw new Error('invalid callback: '+o);return i.get(o)}return i}}},function(e,t){'use strict';function n(e){this._context=e}n.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t);}}},t.a=function(e){return new n(e)}},function(e,t){'use strict';t.a=function(){}},function(e,t){'use strict';function n(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function a(e){this._context=e}t.c=n,t.a=a,a.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:n(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1);}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:n(this,e,t);}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.b=function(e){return new a(e)}},function(e,t){'use strict';function n(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function a(e,t){this._context=e,this._k=(1-t)/6}t.c=n,t.a=a,a.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:n(this,this._x1,this._y1);}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:n(this,e,t);}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.b=function e(t){function n(e){return new a(e,t)}return n.tension=function(t){return e(+t)},n}(0)},function(e,t,n){'use strict';var a=n(20);t.a=function(e,t,o){if(null==o&&(o=a.a),!!(s=e.length)){if(0>=(t=+t)||2>s)return+o(e[0],0,e);if(1<=t)return+o(e[s-1],s-1,e);var r=(s-1)*t,i=Math.floor(r),l=+o(e[i],i,e),d=+o(e[i+1],i+1,e),s;return l+(d-l)*(r-i)}}},function(e,t,n){'use strict';function a(){}function o(e,t){var r=new a;if(e instanceof a)e.each(function(e,t){r.set(t,e)});else if(Array.isArray(e)){var l=-1,i=e.length,n;if(null==t)for(;++l<i;)r.set(l,e[l]);else for(;++l<i;)r.set(t(n=e[l],l,e),n)}else if(e)for(var o in e)r.set(o,e[o]);return r}n.d(t,'b',function(){return i});var i='$';a.prototype=o.prototype={constructor:a,has:function(e){return i+e in this},get:function(e){return this[i+e]},set:function(e,t){return this[i+e]=t,this},remove:function(e){var t=i+e;return t in this&&delete this[t]},clear:function(){for(var e in this)e[0]===i&&delete this[e]},keys:function(){var e=[];for(var t in this)t[0]===i&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)t[0]===i&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)t[0]===i&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)t[0]===i&&++e;return e},empty:function(){for(var e in this)if(e[0]===i)return!1;return!0},each:function(e){for(var t in this)t[0]===i&&e(this[t],t.slice(1),this)}},t.a=o},function(e,t,n){'use strict';var o=n(7),i=n(105),r=n(108),l=n(109),d=n(33),s=n(110),p=n(111),u=n(107);t.a=function(e,n){var a=typeof n,t;return null==n||'boolean'==a?Object(u.a)(n):('number'==a?d.a:'string'==a?(t=Object(o.a)(n))?(n=t,i.a):p.a:n instanceof o.a?i.a:n instanceof Date?l.a:Array.isArray(n)?r.a:'function'!=typeof n.valueOf&&'function'!=typeof n.toString||isNaN(n)?s.a:d.a)(e,n)}},function(e,t,n){'use strict';function a(){}function i(e){var t;return e=(e+'').trim().toLowerCase(),(t=v.exec(e))?(t=parseInt(t[1],16),new c(15&t>>8|240&t>>4,15&t>>4|240&t,(15&t)<<4|15&t,1)):(t=C.exec(e))?o(parseInt(t[1],16)):(t=T.exec(e))?new c(t[1],t[2],t[3],1):(t=k.exec(e))?new c(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=S.exec(e))?r(t[1],t[2],t[3],t[4]):(t=E.exec(e))?r(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=z.exec(e))?s(t[1],t[2]/100,t[3]/100,1):(t=A.exec(e))?s(t[1],t[2]/100,t[3]/100,t[4]):M.hasOwnProperty(e)?o(M[e]):'transparent'===e?new c(NaN,NaN,NaN,0):null}function o(e){return new c(255&e>>16,255&e>>8,255&e,1)}function r(e,t,n,o){return 0>=o&&(e=t=n=NaN),new c(e,t,n,o)}function l(e){return(e instanceof a||(e=i(e)),!e)?new c:(e=e.rgb(),new c(e.r,e.g,e.b,e.opacity))}function d(e,t,n,a){return 1===arguments.length?l(e):new c(e,t,n,null==a?1:a)}function c(e,t,n,a){this.r=+e,this.g=+t,this.b=+n,this.opacity=+a}function s(e,t,n,o){return 0>=o?e=t=n=NaN:0>=n||1<=n?e=t=NaN:0>=t&&(e=NaN),new m(e,t,n,o)}function p(e){if(e instanceof m)return new m(e.h,e.s,e.l,e.opacity);if(e instanceof a||(e=i(e)),!e)return new m;if(e instanceof m)return e;e=e.rgb();var t=e.r/255,n=e.g/255,r=e.b/255,d=f(t,n,r),c=_(t,n,r),p=NaN,u=c-d,s=(c+d)/2;return u?(p=t===c?(n-r)/u+6*(n<r):n===c?(r-t)/u+2:(t-n)/u+4,u/=0.5>s?c+d:2-c-d,p*=60):u=0<s&&1>s?0:p,new m(p,u,s,e.opacity)}function u(e,t,n,a){return 1===arguments.length?p(e):new m(e,t,n,null==a?1:a)}function m(e,t,n,a){this.h=+e,this.s=+t,this.l=+n,this.opacity=+a}function g(e,t,n){return 255*(60>e?t+(n-t)*e/60:180>e?n:240>e?t+(n-t)*(240-e)/60:t)}var f=Math.min,_=Math.max,h=Math.round,b=Math.pow;t.a=a,n.d(t,'d',function(){return x}),n.d(t,'c',function(){return w}),t.e=i,t.h=l,t.g=d,t.b=c,t.f=u;var y=n(51),x=0.7,w=1/x,v=/^#([0-9a-f]{3})$/,C=/^#([0-9a-f]{6})$/,T=/^rgb\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*\)$/,k=/^rgb\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*\)$/,S=/^rgba\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*\)$/,E=/^rgba\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*\)$/,z=/^hsl\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*\)$/,A=/^hsla\(\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)%\s*,\s*([+-]?\d*\.?\d+(?:[eE][+-]?\d+)?)\s*\)$/,M={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object(y.a)(a,i,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+''}}),Object(y.a)(c,d,Object(y.b)(a,{brighter:function(e){return e=null==e?w:b(w,e),new c(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?x:b(x,e),new c(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&255>=this.r&&0<=this.g&&255>=this.g&&0<=this.b&&255>=this.b&&0<=this.opacity&&1>=this.opacity},toString:function(){var e=this.opacity;return e=isNaN(e)?1:_(0,f(1,e)),(1===e?'rgb(':'rgba(')+_(0,f(255,h(this.r)||0))+', '+_(0,f(255,h(this.g)||0))+', '+_(0,f(255,h(this.b)||0))+(1===e?')':', '+e+')')}})),Object(y.a)(m,u,Object(y.b)(a,{brighter:function(e){return e=null==e?w:b(w,e),new m(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?x:b(x,e),new m(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(0>this.h),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,a=n+(0.5>n?n:1-n)*t,o=2*n-a;return new c(g(240<=e?e-240:e+120,o,a),g(e,o,a),g(120>e?e+240:e-120,o,a),this.opacity)},displayable:function(){return(0<=this.s&&1>=this.s||isNaN(this.s))&&0<=this.l&&1>=this.l&&0<=this.opacity&&1>=this.opacity}}))},function(e,t){'use strict';t.b=function(e,t){var n=Object.create(e.prototype);for(var a in t)n[a]=t[a];return n},t.a=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e}},function(e,t){'use strict';function a(e,t,n,a,o){var i=e*e,r=i*e;return((1-3*e+3*i-r)*t+(4-6*i+3*r)*n+(1+3*e+3*i-3*r)*a+r*o)/6}t.a=a,t.b=function(e){var o=e.length-1;return function(n){var t=0>=n?n=0:1<=n?(n=1,o-1):Math.floor(n*o),i=e[t],r=e[t+1],l=0<t?e[t-1]:2*i-r,d=t<o-1?e[t+2]:2*r-i;return a((n-t/o)*o,l,i,r,d)}}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t,n){'use strict';var a=n(211);n.d(t,'b',function(){return a.a}),n.d(t,'a',function(){return a.b}),n.d(t,'d',function(){return a.c});var o=n(113);n.d(t,'c',function(){return o.a});var i=n(114);n.d(t,'e',function(){return i.a});var r=n(217);n.d(t,'f',function(){return r.a});var l=n(218);n.d(t,'g',function(){return l.a});var d=n(219);n.d(t,'h',function(){return d.a})},function(e,t){'use strict';t.a=function(e,t){if(0>(a=(e=t?e.toExponential(t-1):e.toExponential()).indexOf('e')))return null;var n=e.slice(0,a),a;return[1<n.length?n[0]+n.slice(2):n,+e.slice(a+1)]}},function(e,t,n){'use strict';var a=n(57);n.d(t,'d',function(){return a.a}),n.d(t,'c',function(){return a.b}),n.d(t,'f',function(){return a.c}),n.d(t,'g',function(){return a.d}),n.d(t,'h',function(){return a.e});var o=n(119);n.d(t,'e',function(){return o.a});var i=n(120);n.d(t,'a',function(){return i.a});var r=n(239);n.d(t,'b',function(){return r.a})},function(e,t,n){'use strict';function a(e){return i=Object(o.a)(e),r=i.format,l=i.parse,d=i.utcFormat,s=i.utcParse,i}n.d(t,'b',function(){return r}),n.d(t,'c',function(){return l}),n.d(t,'d',function(){return d}),n.d(t,'e',function(){return s}),t.a=a;var o=n(119),i,r,l,d,s;a({dateTime:'%x, %X',date:'%-m/%-d/%Y',time:'%-I:%M:%S %p',periods:['AM','PM'],days:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],shortDays:['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],months:['January','February','March','April','May','June','July','August','September','October','November','December'],shortMonths:['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']})},function(e,t,n){'use strict';function a(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===r.b&&t.documentElement.namespaceURI===r.b?t.createElement(e):t.createElementNS(n,e)}}function o(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}var i=n(59),r=n(60);t.a=function(e){var t=Object(i.a)(e);return(t.local?o:a)(t)}},function(e,t,n){'use strict';var a=n(60);t.a=function(e){var t=e+='',n=t.indexOf(':');return 0<=n&&'xmlns'!==(t=e.slice(0,n))&&(e=e.slice(n+1)),a.a.hasOwnProperty(t)?{space:a.a[t],local:e}:e}},function(e,t,n){'use strict';n.d(t,'b',function(){return a});var a='http://www.w3.org/1999/xhtml';t.a={svg:'http://www.w3.org/2000/svg',xhtml:a,xlink:'http://www.w3.org/1999/xlink',xml:'http://www.w3.org/XML/1998/namespace',xmlns:'http://www.w3.org/2000/xmlns/'}},function(e,t,n){'use strict';var a=n(62);t.a=function(){for(var e=a.c,t;t=e.sourceEvent;)e=t;return e}},function(e,t,n){'use strict';function a(e,t,n){return e=o(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function o(e,t,n){return function(a){var o=s;s=a;try{e.call(this,this.__data__,t,n)}finally{s=o}}}function r(e){return e.trim().split(/^|\s+/).map(function(e){var n='',a=e.indexOf('.');return 0<=a&&(n=e.slice(a+1),e=e.slice(0,a)),{type:e,name:n}})}function l(e){return function(){var t=this.__on;if(t){for(var n=0,a=-1,i=t.length,r;n<i;++n)(r=t[n],(!e.type||r.type===e.type)&&r.name===e.name)?this.removeEventListener(r.type,r.listener,r.capture):t[++a]=r;++a?t.length=a:delete this.__on}}}function d(e,t,n){var r=i.hasOwnProperty(e.type)?a:o;return function(a,l,i){var d=this.__on,s=r(t,l,i),c;if(d)for(var o=0,p=d.length;o<p;++o)if((c=d[o]).type===e.type&&c.name===e.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=s,c.capture=n),void(c.value=t);this.addEventListener(e.type,s,n),c={type:e.type,name:e.name,value:t,listener:s,capture:n},d?d.push(c):this.__on=[c]}}n.d(t,'c',function(){return s}),t.a=function(e,t,n,a){var o=s;e.sourceEvent=s,s=e;try{return t.apply(n,a)}finally{s=o}};var i={},s=null;if('undefined'!=typeof document){var c=document.documentElement;'onmouseenter'in c||(i={mouseenter:'mouseover',mouseleave:'mouseout'})}t.b=function(e,a,s){var c=r(e+''),p=c.length,n,i;if(2>arguments.length){var t=this.node().__on;if(t)for(var u=0,g=t.length,h;u<g;++u)for(n=0,h=t[u];n<p;++n)if((i=c[n]).type===h.type&&i.name===h.name)return h.value;return}for(t=a?d:l,null==s&&(s=!1),n=0;n<p;++n)this.each(t(c[n],a,s));return this}},function(e,t){'use strict';t.a=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var a=n.createSVGPoint();return a.x=t.clientX,a.y=t.clientY,a=a.matrixTransform(e.getScreenCTM().inverse()),[a.x,a.y]}var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]}},function(e,t){'use strict';function n(){}t.a=function(e){return null==e?n:function(){return this.querySelector(e)}}},function(e,t){'use strict';t.a=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}},function(e,t,n){'use strict';var a=n(291);n.d(t,'a',function(){return a.a});var o=n(127);n.d(t,'b',function(){return o.a}),n.d(t,'c',function(){return o.b})},function(e,t,n){'use strict';var a=n(294),o=n(10);n.d(t,'c',function(){return o.b});var i=n(325);n.d(t,'a',function(){return i.a});var r=n(129);n.d(t,'b',function(){return r.a})},function(e,t){'use strict';function n(){return f||(y(a),f=_.now()+b)}function a(){f=0}function o(){this._call=this._time=this._next=null}function i(e,n,a){var i=new o;return i.restart(e,n,a),i}function r(){n(),++p;for(var a=x,t;a;)0<=(t=f-a._time)&&a._call.call(null,t),a=a._next;--p}function l(){f=(m=_.now())+b,p=u=0;try{r()}finally{p=0,s(),f=0}}function d(){var e=_.now(),t=e-m;t>h&&(b-=t,m=e)}function s(){for(var e=x,t=Infinity,n,a;e;)e._call?(t>e._time&&(t=e._time),n=e,e=e._next):(a=e._next,e._next=null,e=n?n._next=a:x=a);w=n,c(t)}function c(e){if(!p){u&&(u=clearTimeout(u));var t=e-f;24<t?(e<Infinity&&(u=setTimeout(l,e-_.now()-b)),g&&(g=clearInterval(g))):(!g&&(m=_.now(),g=setInterval(d,h)),p=1,y(l))}}t.b=n,t.a=o,t.c=i,t.d=r;var p=0,u=0,g=0,h=1e3,m=0,f=0,b=0,_='object'==typeof performance&&performance.now?performance:Date,y='object'==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)},x,w;o.prototype=i.prototype={constructor:o,restart:function(e,t,a){if('function'!=typeof e)throw new TypeError('callback is not a function');a=(null==a?n():+a)+(null==t?0:+t),this._next||w===this||(w?w._next=this:x=this,w=this),this._call=e,this._time=a,c()},stop:function(){this._call&&(this._call=null,this._time=Infinity,c())}}},function(e,t,n){'use strict';var a=n(70);n.d(t,'e',function(){return a.a});var o=n(335);n.d(t,'c',function(){return o.c}),n.d(t,'d',function(){return o.d}),n.d(t,'a',function(){return o.a}),n.d(t,'b',function(){return o.b});var i=n(336);n.d(t,'h',function(){return i.c}),n.d(t,'i',function(){return i.d}),n.d(t,'f',function(){return i.a}),n.d(t,'g',function(){return i.b})},function(e,t){'use strict';function n(e){return new Function('d','return {'+e.map(function(e,t){return JSON.stringify(e)+': d['+t+']'}).join(',')+'}')}function a(e,t){var a=n(e);return function(n,o){return t(a(n),o,e)}}function o(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var a in e)a in t||n.push(t[a]=a)}),n}var r={},l={},d=34,s=10,p=13;t.a=function(e){function t(e,a){function o(){if(n)return l;if(m)return m=!1,r;var t=h,a,o;if(e.charCodeAt(t)===d){for(;h++<u&&e.charCodeAt(h)!==d||e.charCodeAt(++h)===d;);return(a=h)>=u?n=!0:(o=e.charCodeAt(h++))===s?m=!0:o===p&&(m=!0,e.charCodeAt(h)===s&&++h),e.slice(t+1,a-1).replace(/""/g,'"')}for(;h<u;){if((o=e.charCodeAt(a=h++))===s)m=!0;else if(o===p)m=!0,e.charCodeAt(h)===s&&++h;else if(o!==g)continue;return e.slice(t,a)}return n=!0,e.slice(t,u)}var i=[],u=e.length,h=0,c=0,n=0>=u,m=!1,f;for(e.charCodeAt(u-1)===s&&--u,e.charCodeAt(u-1)===p&&--u;(f=o())!==l;){for(var t=[];f!==r&&f!==l;)t.push(f),f=o();a&&null==(t=a(t,c++))||i.push(t)}return i}function i(t){return t.map(c).join(e)}function c(e){return null==e?'':u.test(e+='')?'"'+e.replace(/"/g,'""')+'"':e}var u=new RegExp('["'+e+'\n\r]'),g=e.charCodeAt(0);return{parse:function(e,o){var i=t(e,function(e,t){return r?r(e,t-1):void(l=e,r=o?a(e,o):n(e))}),r,l;return i.columns=l,i},parseRows:t,format:function(t,n){return null==n&&(n=o(t)),[n.map(c).join(e)].concat(t.map(function(t){return n.map(function(e){return c(t[e])}).join(e)})).join('\n')},formatRows:function(e){return e.map(i).join('\n')}}}},function(e,t){'use strict';t.a=function(){return 1e-6*(Math.random()-0.5)}},function(e,t,n){'use strict';var a=n(340);n.d(t,'a',function(){return a.a})},function(e,t){'use strict';t.a=function(e,t,n,a,o){this.node=e,this.x0=t,this.y0=n,this.x1=a,this.y1=o}},function(e,t,n){'use strict';function a(e,t,n,g){function h(a,o){return e<=a&&a<=n&&t<=o&&o<=g}function a(o,i,r,l){var d=0,a=0;if(null==o||(d=m(o,r))!==(a=m(i,r))||0>_(o,i)^0<r)do l.point(0==d||3==d?e:n,1<d?g:t);while((d=(d+r+4)%4)!=a);else l.point(i[0],i[1])}function m(a,o){return Object(r.a)(a[0]-e)<r.i?0<o?0:3:Object(r.a)(a[0]-n)<r.i?0<o?2:1:Object(r.a)(a[1]-t)<r.i?0<o?1:0:0<o?3:2}function f(e,t){return _(e.x,t.x)}function _(e,t){var n=m(e,1),a=m(t,1);return n===a?0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]:n-a}return function(r){function m(e,t){h(e,t)&&w.point(e,t)}function b(){for(var t=0,a=0,o=C.length;a<o;++a)for(var n=C[a],i=1,r=n.length,l=n[0],d=l[0],s=l[1],c,p;i<r;++i)c=d,p=s,l=n[i],d=l[0],s=l[1],p<=g?s>g&&(d-c)*(g-p)>(s-p)*(e-c)&&++t:s<=g&&(d-c)*(g-p)<(s-p)*(e-c)&&--t;return t}function _(r,l){var s=h(r,l);if(C&&T.push([r,l]),D)k=r,S=l,E=s,D=!1,s&&(w.lineStart(),w.point(r,l));else if(s&&M)w.point(r,l);else{var c=[z=i(u,o(p,z)),A=i(u,o(p,A))],a=[r=i(u,o(p,r)),l=i(u,o(p,l))];Object(d.a)(c,a,e,t,n,g)?(!M&&(w.lineStart(),w.point(c[0],c[1])),w.point(a[0],a[1]),!s&&w.lineEnd(),j=!1):s&&(w.lineStart(),w.point(r,l),j=!1)}z=r,A=l,M=s}var w=r,y=Object(l.a)(),x={point:m,lineStart:function(){x.point=_,C&&C.push(T=[]),D=!0,M=!1,z=A=NaN},lineEnd:function(){v&&(_(k,S),E&&M&&y.rejoin(),v.push(y.result())),x.point=m,M&&w.lineEnd()},polygonStart:function(){w=y,v=[],C=[],j=!0},polygonEnd:function(){var e=b(),t=j&&e,n=(v=Object(c.merge)(v)).length;(t||n)&&(r.polygonStart(),t&&(r.lineStart(),a(null,null,1,r),r.lineEnd()),n&&Object(s.a)(v,f,e,a,r),r.polygonEnd()),w=r,v=C=T=null}},v,C,T,k,S,E,z,A,M,D,j;return x}}var o=Math.min,i=Math.max;t.a=a;var r=n(0),l=n(137),d=n(361),s=n(138),c=n(2),p=1e9,u=-p;t.b=function(){var e=0,t=0,n=960,o=500,i,r,l;return l={stream:function(l){return i&&r===l?i:i=a(e,t,n,o)(r=l)},extent:function(a){return arguments.length?(e=+a[0][0],t=+a[0][1],n=+a[1][0],o=+a[1][1],i=r=null,l):[[e,t],[n,o]]}}}},function(e,t){'use strict';t.a=function(e){return e}},function(e,t,n){'use strict';function a(e,t){function a(e,t){var a=Object(o.u)(n-2*l*Object(o.t)(t))/l;return[a*Object(o.t)(e*=l),d-a*Object(o.g)(e)]}var i=Object(o.t)(e),l=(i+Object(o.t)(t))/2;if(Object(o.a)(l)<o.i)return Object(r.a)(e);var n=1+i*(2*l-i),d=Object(o.u)(n)/l;return a.invert=function(e,t){var a=d-t;return[Object(o.e)(e,Object(o.a)(a))/l*Object(o.s)(a),Object(o.c)((n-(e*e+a*a)*l*l)/(2*l))]},a}t.a=a;var o=n(0),i=n(77),r=n(374);t.b=function(){return Object(i.a)(a).scale(155.424).center([0,33.6442])}},function(e,t,n){'use strict';t.a=function(e){var t=0,n=a.o/3,i=Object(o.b)(e),r=i(t,n);return r.parallels=function(e){return arguments.length?i(t=e[0]*a.r,n=e[1]*a.r):[t*a.h,n*a.h]},r};var a=n(0),o=n(9)},function(e,t,n){'use strict';function a(e,t,n){var a=t[1][0]-t[0][0],r=t[1][1]-t[0][1],l=e.clipExtent&&e.clipExtent();e.scale(150).translate([0,0]),null!=l&&e.clipExtent(null),Object(o.a)(n,e.stream(i.a));var d=i.a.result(),s=Math.min(a/(d[1][0]-d[0][0]),r/(d[1][1]-d[0][1])),c=+t[0][0]+(a-s*(d[1][0]+d[0][0]))/2,p=+t[0][1]+(r-s*(d[1][1]+d[0][1]))/2;return null!=l&&e.clipExtent(l),e.scale(150*s).translate([c,p])}t.a=a,t.b=function(e,t,n){return a(e,[[0,0],t],n)};var o=n(15),i=n(143)},function(e,t,n){'use strict';function a(e,t){return[e,Object(l.n)(Object(l.v)((l.l+t)/2))]}function o(e){function t(){var o=l.o*c(),s=n(Object(d.a)(n.rotate()).invert([0,0]));return u(null==g?[[s[0]-o,s[1]-o],[s[0]+o,s[1]+o]]:e===a?[[r(s[0]-o,g),h],[i(s[0]+o,m),f]]:[[g,r(s[1]-o,h)],[m,i(s[1]+o,f)]])}var n=Object(s.a)(e),o=n.center,c=n.scale,p=n.translate,u=n.clipExtent,g=null,h,m,f;return n.scale=function(e){return arguments.length?(c(e),t()):c()},n.translate=function(e){return arguments.length?(p(e),t()):p()},n.center=function(e){return arguments.length?(o(e),t()):o()},n.clipExtent=function(e){return arguments.length?(null==e?g=h=m=f=null:(g=+e[0][0],h=+e[0][1],m=+e[1][0],f=+e[1][1]),t()):null==g?null:[[g,h],[m,f]]},t()}var i=Math.min,r=Math.max;t.c=a,t.b=o;var l=n(0),d=n(39),s=n(9);a.invert=function(e,t){return[e,2*Object(l.d)(Object(l.k)(t))-l.l]},t.a=function(){return o(a).scale(961/l.w)}},function(e,t,n){'use strict';function a(e,t){var a=new l(e),d=+e.value&&(a.value=e.value),s=[a],c,p,u,g,i;for(null==t&&(t=o);c=s.pop();)if(d&&(c.value=+c.data.value),(u=t(c.data))&&(i=u.length))for(c.children=Array(i),g=i-1;0<=g;--g)s.push(p=c.children[g]=new l(u[g])),p.parent=c,p.depth=c.depth+1;return a.eachBefore(r)}function o(e){return e.children}function i(e){e.data=e.data.data}function r(e){var t=0;do e.height=t;while((e=e.parent)&&e.height<++t)}function l(e){this.data=e,this.depth=this.height=0,this.parent=null}t.c=a,t.b=r,t.a=l;var d=n(387),s=n(388),c=n(389),p=n(390),u=n(391),g=n(392),h=n(393),m=n(394),f=n(395),b=n(396),_=n(397);l.prototype=a.prototype={constructor:l,count:d.a,each:s.a,eachAfter:p.a,eachBefore:c.a,sum:u.a,sort:g.a,path:h.a,ancestors:m.a,descendants:f.a,leaves:b.a,links:_.a,copy:function(){return a(this).eachBefore(i)}}},function(e,t){'use strict';function n(e){if('function'!=typeof e)throw new Error;return e}t.a=function(e){return null==e?null:n(e)},t.b=n},function(e,t,n){'use strict';function a(e,t,a,l,d,s){for(var c=[],p=t.children,u=0,g=0,h=p.length,n=t.value,m,f,b,_,y,x,w,v,C,T,k;u<h;){b=d-a,_=s-l;do y=p[g++].value;while(!y&&g<h);for(x=w=y,T=o(_/b,b/_)/(n*e),k=y*y*T,C=o(w/k,k/x);g<h;++g){if(y+=f=p[g].value,f<x&&(x=f),f>w&&(w=f),k=y*y*T,v=o(w/k,k/x),v>C){y-=f;break}C=v}c.push(m={value:y,dice:b<_,children:p.slice(u,g)}),m.dice?Object(i.a)(m,a,l,d,n?l+=_*y/n:s):Object(r.a)(m,a,l,n?a+=b*y/n:d,s),n-=y,u=g}return c}var o=Math.max;n.d(t,'b',function(){return l}),t.c=a;var i=n(28),r=n(41),l=(1+2.23606797749979)/2;t.a=function e(t){function n(e,n,o,i,r){a(t,e,n,o,i,r)}return n.ratio=function(t){return e(1<(t=+t)?t:1)},n}(l)},function(e,t,n){'use strict';function a(e){return function(t,n){e(null==t?n:null)}}function i(e){var t=e.responseType;return t&&'text'!==t?e.response:e.responseText}var o=n(21),r=n(13);t.a=function(e,t){function n(e){var t=s.status,n;if(!t&&i(s)||200<=t&&300>t||304===t){if(m)try{n=m.call(g,s)}catch(t){return void l.call('error',g,t)}else n=s;l.call('load',g,n)}else l.call('error',g,e)}var l=Object(r.a)('beforesend','progress','load','error'),d=Object(o.c)(),s=new XMLHttpRequest,c=null,p=null,u=0,g,h,m,f;if('undefined'!=typeof XDomainRequest&&!('withCredentials'in s)&&/^(http(s)?:)?\/\//.test(e)&&(s=new XDomainRequest),'onload'in s?s.onload=s.onerror=s.ontimeout=n:s.onreadystatechange=function(e){3<s.readyState&&n(e)},s.onprogress=function(t){l.call('progress',g,t)},g={header:function(e,t){return(e=(e+'').toLowerCase(),2>arguments.length)?d.get(e):(null==t?d.remove(e):d.set(e,t+''),g)},mimeType:function(e){return arguments.length?(h=null==e?null:e+'',g):h},responseType:function(e){return arguments.length?(f=e,g):f},timeout:function(e){return arguments.length?(u=+e,g):u},user:function(e){return 1>arguments.length?c:(c=null==e?null:e+'',g)},password:function(e){return 1>arguments.length?p:(p=null==e?null:e+'',g)},response:function(e){return m=e,g},get:function(e,t){return g.send('GET',e,t)},post:function(e,t){return g.send('POST',e,t)},send:function(t,n,o){return s.open(t,e,!0,c,p),null==h||d.has('accept')||d.set('accept',h+',*/*'),s.setRequestHeader&&d.each(function(e,t){s.setRequestHeader(t,e)}),null!=h&&s.overrideMimeType&&s.overrideMimeType(h),null!=f&&(s.responseType=f),0<u&&(s.timeout=u),null==o&&'function'==typeof n&&(o=n,n=null),null!=o&&1===o.length&&(o=a(o)),null!=o&&g.on('error',o).on('load',function(e){o(null,e)}),l.call('beforesend',g,s),s.send(null==n?null:n),g},abort:function(){return s.abort(),g},on:function(){var e=l.on.apply(l,arguments);return e===l?g:e}},null!=t){if('function'!=typeof t)throw new Error('invalid callback: '+t);return g.get(t)}return g}},function(e,t,n){'use strict';var a=n(14),o=n(16),i=n(43),r=n(85);t.a=function(){function e(e){var o=e.length,n=!1,r,i,d;for(null==c&&(u=p(d=Object(a.a)())),r=0;r<=o;++r)!(r<o&&s(i=e[r],r,e))==n&&((n=!n)?u.lineStart():u.lineEnd()),n&&u.point(+t(i,r,e),+l(i,r,e));if(d)return u=null,d+''||null}var t=r.a,l=r.b,s=Object(o.a)(!0),c=null,p=i.a,u=null;return e.x=function(n){return arguments.length?(t='function'==typeof n?n:Object(o.a)(+n),e):t},e.y=function(t){return arguments.length?(l='function'==typeof t?t:Object(o.a)(+t),e):l},e.defined=function(t){return arguments.length?(s='function'==typeof t?t:Object(o.a)(!!t),e):s},e.curve=function(t){return arguments.length?(p=t,null!=c&&(u=p(c)),e):p},e.context=function(t){return arguments.length?(null==t?c=u=null:u=p(c=t),e):c},e}},function(e,t){'use strict';t.a=function(e){return e[0]},t.b=function(e){return e[1]}},function(e,t,n){'use strict';function a(e,t,o){var r=e._x1,l=e._y1,d=e._x2,s=e._y2;if(e._l01_a>i.f){var c=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,a=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*c-e._x0*e._l12_2a+e._x2*e._l01_2a)/a,l=(l*c-e._y0*e._l12_2a+e._y2*e._l01_2a)/a}if(e._l23_a>i.f){var n=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,p=3*e._l23_a*(e._l23_a+e._l12_a);d=(d*n+e._x1*e._l23_2a-t*e._l12_2a)/p,s=(s*n+e._y1*e._l23_2a-o*e._l12_2a)/p}e._context.bezierCurveTo(r,l,d,s,e._x2,e._y2)}function o(e,t){this._context=e,this._alpha=t}t.b=a;var i=n(29),r=n(46);o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2);}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,o=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+o*o,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:a(this,e,t);}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.a=function e(t){function n(e){return t?new o(e,t):new r.a(e,0)}return n.alpha=function(t){return e(+t)},n}(0.5)},function(e,t,n){'use strict';function a(e){for(var t=0,a=-1,o=e.length,n;++a<o;)(n=+e[a][1])&&(t+=n);return t}t.b=a;var o=n(31);t.a=function(e){var t=e.map(a);return Object(o.a)(e).sort(function(e,n){return t[e]-t[n]})}},function(e,t){'use strict';function n(){this._=null}function a(e,t){var n=t,a=t.R,o=n.U;o?o.L===n?o.L=a:o.R=a:e._=a,a.U=o,n.U=a,n.R=a.L,n.R&&(n.R.U=n),a.L=n}function o(e,t){var n=t,a=t.L,o=n.U;o?o.L===n?o.L=a:o.R=a:e._=a,a.U=o,n.U=a,n.L=a.R,n.L&&(n.L.U=n),a.R=n}function i(e){for(;e.L;)e=e.L;return e}t.a=function(e){e.U=e.C=e.L=e.R=e.P=e.N=null},n.prototype={constructor:n,insert:function(e,t){var n,r,l;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=i(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)r=n.U,n===r.L?(l=r.R,l&&l.C?(n.C=l.C=!1,r.C=!0,e=r):(e===n.R&&(a(this,n),e=n,n=e.U),n.C=!1,r.C=!0,o(this,r))):(l=r.L,l&&l.C?(n.C=l.C=!1,r.C=!0,e=r):(e===n.L&&(o(this,n),e=n,n=e.U),n.C=!1,r.C=!0,a(this,r))),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t=e.U,n=e.L,r=e.R,l,d,s;if(d=n?r?i(r):n:r,t?t.L===e?t.L=d:t.R=d:this._=d,n&&r?(s=d.C,d.C=e.C,d.L=n,n.U=d,d===r?(d.U=t,t=d,e=d.R):(t=d.U,d.U=e.U,e=d.R,t.L=e,d.R=r,r.U=d)):(s=e.C,e=d),e&&(e.U=t),!s){if(e&&e.C)return void(e.C=!1);do{if(e===this._)break;if(e===t.L){if(l=t.R,l.C&&(l.C=!1,t.C=!0,a(this,t),l=t.R),l.L&&l.L.C||l.R&&l.R.C){l.R&&l.R.C||(l.L.C=!1,l.C=!0,o(this,l),l=t.R),l.C=t.C,t.C=l.R.C=!1,a(this,t),e=this._;break}}else if(l=t.L,l.C&&(l.C=!1,t.C=!0,o(this,t),l=t.L),l.L&&l.L.C||l.R&&l.R.C){l.L&&l.L.C||(l.R.C=!1,l.C=!0,a(this,l),l=t.L),l.C=t.C,t.C=l.L.C=!1,o(this,t),e=this._;break}l.C=!0,e=t,t=t.U}while(!e.C);e&&(e.C=!1)}}},t.b=n},function(e,t,n){'use strict';function a(e,t,n,a){e[0]||e[1]?e.left===n?e[1]=a:e[0]=a:(e[0]=a,e.left=t,e.right=n)}function o(e,t,n,o,i){var l=e[0],a=e[1],d=l[0],s=l[1],c=a[0],p=a[1],u=0,g=1,h=c-d,m=p-s,f;if(f=t-d,h||!(0<f)){if(f/=h,0>h){if(f<u)return;f<g&&(g=f)}else if(0<h){if(f>g)return;f>u&&(u=f)}if(f=o-d,h||!(0>f)){if(f/=h,0>h){if(f>g)return;f>u&&(u=f)}else if(0<h){if(f<u)return;f<g&&(g=f)}if(f=n-s,m||!(0<f)){if(f/=m,0>m){if(f<u)return;f<g&&(g=f)}else if(0<m){if(f>g)return;f>u&&(u=f)}if(f=i-s,m||!(0>f)){if(f/=m,0>m){if(f>g)return;f>u&&(u=f)}else if(0<m){if(f<u)return;f<g&&(g=f)}return 0<u||1>g?(0<u&&(e[0]=[d+u*h,s+u*m]),1>g&&(e[1]=[d+g*h,s+g*m]),!0):!0}}}}}function r(e,t,n,a,o){var i=e[1];if(i)return!0;var r=e[0],l=e.left,d=e.right,s=l[0],c=l[1],p=d[0],u=d[1],g=(s+p)/2,h,m;if(u===c){if(g<t||g>=a)return;if(s>p){if(!r)r=[g,n];else if(r[1]>=o)return;i=[g,o]}else{if(!r)r=[g,o];else if(r[1]<n)return;i=[g,n]}}else if(h=(s-p)/(u-c),m=(c+u)/2-h*g,-1>h||1<h){if(s>p){if(!r)r=[(n-m)/h,n];else if(r[1]>=o)return;i=[(o-m)/h,o]}else{if(!r)r=[(o-m)/h,o];else if(r[1]<n)return;i=[(n-m)/h,n]}}else if(c<u){if(!r)r=[t,h*t+m];else if(r[0]>=a)return;i=[a,h*a+m]}else{if(!r)r=[a,h*a+m];else if(r[0]<t)return;i=[t,h*t+m]}return e[0]=r,e[1]=i,!0}var l=Math.abs;t.c=function(e,t,n,o){var i=[null,null],r=d.e.push(i)-1;return i.left=e,i.right=t,n&&a(i,e,t,n),o&&a(i,t,e,o),d.b[e.index].halfedges.push(r),d.b[t.index].halfedges.push(r),i},t.b=function(e,t,n){var a=[t,n];return a.left=e,a},t.d=a,t.a=function(e,t,n,a){for(var s=d.e.length,i;s--;)r(i=d.e[s],e,t,n,a)&&o(i,e,t,n,a)&&(l(i[0][0]-i[1][0])>d.f||l(i[0][1]-i[1][1])>d.f)||delete d.e[s]};var d=n(32)},function(e,t,n){'use strict';Object.defineProperty(t,'__esModule',{value:!0});var a=n(175);n.d(t,'scaleBand',function(){return a.a}),n.d(t,'scalePoint',function(){return a.b});var o=n(197);n.d(t,'scaleIdentity',function(){return o.a});var i=n(22);n.d(t,'scaleLinear',function(){return i.a});var r=n(220);n.d(t,'scaleLog',function(){return r.a});var l=n(103);n.d(t,'scaleOrdinal',function(){return l.a}),n.d(t,'scaleImplicit',function(){return l.b});var d=n(221);n.d(t,'scalePow',function(){return d.a}),n.d(t,'scaleSqrt',function(){return d.b});var s=n(222);n.d(t,'scaleQuantile',function(){return s.a});var c=n(223);n.d(t,'scaleQuantize',function(){return c.a});var p=n(224);n.d(t,'scaleThreshold',function(){return p.a});var u=n(118);n.d(t,'scaleTime',function(){return u.b});var g=n(240);n.d(t,'scaleUtc',function(){return g.a});var h=n(241);n.d(t,'schemeCategory10',function(){return h.a});var m=n(242);n.d(t,'schemeCategory20b',function(){return m.a});var f=n(243);n.d(t,'schemeCategory20c',function(){return f.a});var b=n(244);n.d(t,'schemeCategory20',function(){return b.a});var _=n(245);n.d(t,'interpolateCubehelixDefault',function(){return _.a});var y=n(246);n.d(t,'interpolateRainbow',function(){return y.b}),n.d(t,'interpolateWarm',function(){return y.c}),n.d(t,'interpolateCool',function(){return y.a});var x=n(247);n.d(t,'interpolateViridis',function(){return x.a}),n.d(t,'interpolateMagma',function(){return x.c}),n.d(t,'interpolateInferno',function(){return x.b}),n.d(t,'interpolatePlasma',function(){return x.d});var w=n(248);n.d(t,'scaleSequential',function(){return w.a})},function(e,t,n){'use strict';n.d(t,'b',function(){return r}),n.d(t,'a',function(){return l});var a=n(17),o=n(92),i=Object(o.a)(a.a),r=i.right,l=i.left;t.c=r},function(e,t,n){'use strict';function a(e){return function(t,n){return Object(o.a)(e(t),n)}}var o=n(17);t.a=function(e){return 1===e.length&&(e=a(e)),{left:function(t,n,a,o){for(null==a&&(a=0),null==o&&(o=t.length);a<o;){var i=a+o>>>1;0>e(t[i],n)?a=i+1:o=i}return a},right:function(t,n,a,o){for(null==a&&(a=0),null==o&&(o=t.length);a<o;){var i=a+o>>>1;0<e(t[i],n)?o=i:a=i+1}return a}}}},function(e,t){'use strict';function a(e,t){return[e,t]}t.b=a,t.a=function(e,t){null==t&&(t=a);for(var o=0,i=e.length-1,n=e[0],r=Array(0>i?0:i);o<i;)r[o]=t(n,n=e[++o]);return r}},function(e,t,n){'use strict';var a=n(95);t.a=function(e,t){var n=Object(a.a)(e,t);return n?Math.sqrt(n):n}},function(e,t,n){'use strict';var a=n(20);t.a=function(e,t){var o=e.length,n=0,r=-1,i=0,l=0,d,s;if(null==t)for(;++r<o;)isNaN(d=Object(a.a)(e[r]))||(s=d-i,i+=s/++n,l+=s*(d-i));else for(;++r<o;)isNaN(d=Object(a.a)(t(e[r],r,e)))||(s=d-i,i+=s/++n,l+=s*(d-i));return 1<n?l/(n-1):void 0}},function(e,t){'use strict';t.a=function(e,t){var a=e.length,n=-1,o,i,r;if(null==t){for(;++n<a;)if(null!=(o=e[n])&&o>=o)for(i=r=o;++n<a;)null!=(o=e[n])&&(i>o&&(i=o),r<o&&(r=o));}else for(;++n<a;)if(null!=(o=t(e[n],n,e))&&o>=o)for(i=r=o;++n<a;)null!=(o=t(e[n],n,e))&&(i>o&&(i=o),r<o&&(r=o));return[i,r]}},function(e,t,n){'use strict';n.d(t,'b',function(){return o}),n.d(t,'a',function(){return i});var a=Array.prototype,o=a.slice,i=a.map},function(e,t){'use strict';t.a=function(e,t,a){e=+e,t=+t,a=2>(i=arguments.length)?(t=e,e=0,1):3>i?1:+a;for(var o=-1,i=0|Math.max(0,Math.ceil((t-e)/a)),n=Array(i);++o<i;)n[o]=e+o*a;return n}},function(e,t){'use strict';function a(e,t,a){var d=(t-e)/o(0,a),u=l(r(d)/n),g=d/i(10,u);return 0<=u?(g>=s?10:g>=c?5:g>=p?2:1)*i(10,u):-i(10,-u)/(g>=s?10:g>=c?5:g>=p?2:1)}var n=Math.LN10,o=Math.max,i=Math.pow,r=Math.log,l=Math.floor,d=Math.ceil;t.b=a,t.c=function(e,t,a){var d=Math.abs(t-e)/o(0,a),u=i(10,l(r(d)/n)),g=d/u;return g>=s?u*=10:g>=c?u*=5:g>=p&&(u*=2),t<e?-u:u};var s=7.0710678118654755,c=3.1622776601683795,p=1.4142135623730951;t.a=function(e,t,o){var r=t<e,s=-1,i,n,c;if(r&&(i=e,e=t,t=i),0===(c=a(e,t,o))||!isFinite(c))return[];if(0<c)for(e=d(e/c),t=l(t/c),n=Array(i=d(t-e+1));++s<i;)n[s]=(e+s)*c;else for(e=l(e*c),t=d(t*c),n=Array(i=d(e-t+1));++s<i;)n[s]=(e-s)/c;return r&&n.reverse(),n}},function(e,t){'use strict';t.a=function(e){return Math.ceil(Math.log(e.length)/Math.LN2)+1}},function(e,t){'use strict';t.a=function(e,t){var a=e.length,n=-1,o,i;if(null==t){for(;++n<a;)if(null!=(o=e[n])&&o>=o)for(i=o;++n<a;)null!=(o=e[n])&&i>o&&(i=o);}else for(;++n<a;)if(null!=(o=t(e[n],n,e))&&o>=o)for(i=o;++n<a;)null!=(o=t(e[n],n,e))&&i>o&&(i=o);return i}},function(e,t,n){'use strict';function a(e){return e.length}var o=n(101);t.a=function(e){if(!(s=e.length))return[];for(var t=-1,i=Object(o.a)(e,a),r=Array(i);++t<i;)for(var l=-1,d=r[t]=Array(s),s;++l<s;)d[l]=e[l][t];return r}},function(e,t,n){'use strict';function a(e){function t(t){var a=t+'',o=l.get(a);if(!o){if(n!==r)return n;l.set(a,o=s.push(t))}return e[(o-1)%e.length]}var l=Object(o.c)(),s=[],n=r;return e=null==e?[]:i.b.call(e),t.domain=function(e){if(!arguments.length)return s.slice();s=[],l=Object(o.c)();for(var a=-1,i=e.length,n,r;++a<i;)l.has(r=(n=e[a])+'')||l.set(r,s.push(n));return t},t.range=function(n){return arguments.length?(e=i.b.call(n),t):e.slice()},t.unknown=function(e){return arguments.length?(n=e,t):n},t.copy=function(){return a().domain(s).range(e).unknown(n)},t}n.d(t,'b',function(){return r}),t.a=a;var o=n(21),i=n(12),r={name:'implicit'}},function(e,t,n){'use strict';var a=Math.PI;n.d(t,'a',function(){return o}),n.d(t,'b',function(){return i});var o=a/180,i=180/a},function(e,t,n){'use strict';function a(e){return function(t){var a=t.length,n=Array(a),r=Array(a),l=Array(a),d,i;for(d=0;d<a;++d)i=Object(o.f)(t[d]),n[d]=i.r||0,r[d]=i.g||0,l[d]=i.b||0;return n=e(n),r=e(r),l=e(l),i.opacity=1,function(e){return i.r=n(e),i.g=r(e),i.b=l(e),i+''}}}n.d(t,'b',function(){return d}),n.d(t,'c',function(){return s});var o=n(7),i=n(52),r=n(106),l=n(23);t.a=function e(t){function n(e,t){var n=a((e=Object(o.f)(e)).r,(t=Object(o.f)(t)).r),i=a(e.g,t.g),r=a(e.b,t.b),d=Object(l.a)(e.opacity,t.opacity);return function(a){return e.r=n(a),e.g=i(a),e.b=r(a),e.opacity=d(a),e+''}}var a=Object(l.b)(t);return n.gamma=e,n}(1);var d=a(i.b),s=a(r.a)},function(e,t,n){'use strict';var a=n(52);t.a=function(e){var o=e.length;return function(n){var t=Math.floor((0>(n%=1)?++n:n)*o),i=e[(t+o-1)%o],r=e[t%o],l=e[(t+1)%o],d=e[(t+2)%o];return Object(a.a)((n-t/o)*o,i,r,l,d)}}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t,n){'use strict';var o=n(49);t.a=function(e,t){var n=t?t.length:0,a=e?Math.min(n,e.length):0,r=Array(n),l=Array(n),d;for(d=0;d<a;++d)r[d]=Object(o.a)(e[d],t[d]);for(;d<n;++d)l[d]=t[d];return function(e){for(d=0;d<a;++d)l[d]=r[d](e);return l}}},function(e,t){'use strict';t.a=function(e,n){var o=new Date;return e=+e,n-=e,function(a){return o.setTime(e+n*a),o}}},function(e,t,n){'use strict';var o=n(49);t.a=function(e,t){var n={},i={},r;for(r in(null===e||'object'!=typeof e)&&(e={}),(null===t||'object'!=typeof t)&&(t={}),t)r in e?n[r]=Object(o.a)(e[r],t[r]):i[r]=t[r];return function(e){for(r in n)i[r]=n[r](e);return i}}},function(e,t,n){'use strict';function o(e){return function(){return e}}function r(e){return function(n){return e(n)+''}}var l=n(33),d=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,c=new RegExp(d.source,'g');t.a=function(e,n){var t=d.lastIndex=c.lastIndex=0,a=-1,p=[],s=[],u,g,h;for(e+='',n+='';(u=d.exec(e))&&(g=c.exec(n));)(h=g.index)>t&&(h=n.slice(t,h),p[a]?p[a]+=h:p[++a]=h),(u=u[0])===(g=g[0])?p[a]?p[a]+=g:p[++a]=g:(p[++a]=null,s.push({i:a,x:Object(l.a)(u,g)})),t=c.lastIndex;return t<n.length&&(h=n.slice(t),p[a]?p[a]+=h:p[++a]=h),2>p.length?s[0]?r(s[0].x):o(n):(n=s.length,function(e){for(var t=0,a;t<n;++t)p[(a=s[t]).i]=a.x(e);return p.join('')})}},function(e,t){'use strict';t.a=function(e){return+e}},function(e,t,n){'use strict';var a=Math.min,o=Math.max,i=n(35),r=n(212),l=n(213),d=n(114),s=n(115),p=n(116),c=n(216),u=['y','z','a','f','p','n','\xB5','m','','k','M','G','T','P','E','Z','Y'];t.a=function(e){function t(e){function t(e){var t=v,a=C,o,d,n;if('c'===w)a=T(e)+a,e='';else{e=+e;var s=0>e;if(e=T(Math.abs(e),x),s&&0==+e&&(s=!1),t=(s?'('===l?l:'-':'-'===l||'('===l?'':l)+t,a=a+('s'===w?u[8+p.b/3]:'')+(s&&'('===l?')':''),k)for(o=-1,d=e.length;++o<d;)if(n=e.charCodeAt(o),48>n||57<n){a=(46===n?h+e.slice(o+1):e.slice(o))+a,e=e.slice(0,o);break}}y&&!b&&(e=g(e,Infinity));var c=t.length+e.length+a.length,f=c<_?Array(_-c+1).join(r):'';switch(y&&b&&(e=g(f+e,f.length?_-a.length:Infinity),f=''),i){case'<':e=t+e+a+f;break;case'=':e=t+f+e+a;break;case'^':e=f.slice(0,c=f.length>>1)+t+e+a+f.slice(c);break;default:e=f+t+e+a;}return m(e)}e=Object(d.a)(e);var r=e.fill,i=e.align,l=e.sign,c=e.symbol,b=e.zero,_=e.width,y=e.comma,x=e.precision,w=e.type,v='$'===c?n[0]:'#'===c&&/[boxX]/.test(w)?'0'+w.toLowerCase():'',C='$'===c?n[1]:/[%p]/.test(w)?f:'',T=s.a[w],k=!w||/[defgprs%]/.test(w);return x=null==x?w?6:12:/[gprs]/.test(w)?o(1,a(21,x)):o(0,a(20,x)),t.toString=function(){return e+''},t}var g=e.grouping&&e.thousands?Object(r.a)(e.grouping,e.thousands):c.a,n=e.currency,h=e.decimal,m=e.numerals?Object(l.a)(e.numerals):c.a,f=e.percent||'%';return{format:t,formatPrefix:function(n,r){var l=t((n=Object(d.a)(n),n.type='f',n)),s=3*o(-8,a(8,Math.floor(Object(i.a)(r)/3))),c=Math.pow(10,-s),p=u[8+s/3];return function(e){return l(c*e)+p}}}}},function(e,t,n){'use strict';function a(e){return new o(e)}function o(e){if(!(u=l.exec(e)))throw new Error('invalid format: '+e);var t=u[1]||' ',n=u[2]||'>',a=u[3]||'-',o=u[4]||'',i=!!u[5],d=u[6]&&+u[6],s=!!u[7],c=u[8]&&+u[8].slice(1),p=u[9]||'',u;'n'===p?(s=!0,p='g'):!r.a[p]&&(p=''),(i||'0'===t&&'='===n)&&(i=!0,t='0',n='='),this.fill=t,this.align=n,this.sign=a,this.symbol=o,this.zero=i,this.width=d,this.comma=s,this.precision=c,this.type=p}var i=Math.max;t.a=a;var r=n(115),l=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;a.prototype=o.prototype,o.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?'0':'')+(null==this.width?'':i(1,0|this.width))+(this.comma?',':'')+(null==this.precision?'':'.'+i(0,0|this.precision))+this.type}},function(e,t,n){'use strict';var a=Math.round,o=n(214),i=n(116),r=n(215);t.a={"":o.a,"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return a(e).toString(2)},c:function(e){return e+''},d:function(e){return a(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return a(e).toString(8)},p:function(e,t){return Object(r.a)(100*e,t)},r:r.a,s:i.a,X:function(e){return a(e).toString(16).toUpperCase()},x:function(e){return a(e).toString(16)}}},function(e,t,n){'use strict';var a=Math.max;n.d(t,'b',function(){return r});var o=n(55),r;t.a=function(e,t){var l=Object(o.a)(e,t);if(!l)return e+'';var s=l[0],c=l[1],p=c-(r=3*a(-8,Math.min(8,Math.floor(c/3))))+1,i=s.length;return p===i?s:p>i?s+Array(p-i+1).join('0'):0<p?s.slice(0,p)+'.'+s.slice(p):'0.'+Array(1-p).join('0')+Object(o.a)(e,a(0,t+p-1))[0]}},function(e,t){'use strict';t.a=function(e,n){e=e.slice();var a=0,o=e.length-1,i=e[a],r=e[o],l;return r<i&&(l=a,a=o,o=l,l=i,i=r,r=l),e[a]=n.floor(i),e[o]=n.ceil(r),e}},function(e,t,n){'use strict';function a(e){return new Date(e)}function o(e){return e instanceof Date?+e:+new Date(+e)}function i(e,t,n,d,s,x,w,v,C){function T(a){return(w(a)<a?A:x(a)<a?M:s(a)<a?D:d(a)<a?j:t(a)<a?n(a)<a?N:L:e(a)<a?P:R)(a)}function k(t,n,a,o){if(null==t&&(t=10),'number'==typeof t){var l=Math.abs(a-n)/t,d=Object(r.bisector)(function(e){return e[2]}).right(q,l);d===q.length?(o=Object(r.tickStep)(n/y,a/y,t),t=e):d?(d=q[l/q[d-1][2]<q[d][2]/l?d-1:d],o=d[1],t=d[0]):(o=Object(r.tickStep)(n,a,t),t=v)}return null==o?t:t.every(o)}var S=Object(p.b)(p.c,l.m),E=S.invert,z=S.domain,A=C('.%L'),M=C(':%S'),D=C('%I:%M'),j=C('%I %p'),N=C('%a %d'),L=C('%b %d'),P=C('%B'),R=C('%Y'),q=[[w,1,g],[w,5,5*g],[w,15,15*g],[w,30,30*g],[x,1,h],[x,5,5*h],[x,15,15*h],[x,30,30*h],[s,1,m],[s,3,3*m],[s,6,6*m],[s,12,12*m],[d,1,f],[d,2,2*f],[n,1,b],[t,1,_],[t,3,3*_],[e,1,y]];return S.invert=function(e){return new Date(E(e))},S.domain=function(e){return arguments.length?z(c.a.call(e,o)):z().map(a)},S.ticks=function(e,n){var a=z(),o=a[0],i=a[a.length-1],l=i<o,r;return l&&(r=o,o=i,i=r),r=k(e,o,i,n),r=r?r.range(o,i+1):[],l?r.reverse():r},S.tickFormat=function(e,t){return null==t?T:C(t)},S.nice=function(e,t){var n=z();return(e=k(e,n[0],n[n.length-1],t))?z(Object(u.a)(n,e)):S},S.copy=function(){return Object(p.a)(S,i(e,t,n,d,s,x,w,v,C))},S}t.a=i;var r=n(2),l=n(4),d=n(36),s=n(56),c=n(12),p=n(34),u=n(117),g=1e3,h=60*g,m=60*h,f=24*m,b=7*f,_=30*f,y=365*f;t.b=function(){return i(d.D,d.n,d.B,d.a,d.e,d.j,d.r,d.h,s.c).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}},function(e,t,n){'use strict';function a(e){if(0<=e.y&&100>e.y){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function o(e){if(0<=e.y&&100>e.y){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function r(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}function i(e,t,n){var a=0>e?'-':'',o=(a?-e:e)+'',i=o.length;return a+(i<n?Array(n-i+1).join(t)+o:o)}function l(e){return e.replace(ae,'\\$&')}function d(e){return new RegExp('^(?:'+e.map(l).join('|')+')','i')}function s(e){for(var t={},a=-1,o=e.length;++a<o;)t[e[a].toLowerCase()]=a;return t}function c(e,t,a){var o=te.exec(t.slice(a,a+1));return o?(e.w=+o[0],a+o[0].length):-1}function p(e,t,a){var o=te.exec(t.slice(a));return o?(e.U=+o[0],a+o[0].length):-1}function u(e,t,a){var o=te.exec(t.slice(a));return o?(e.W=+o[0],a+o[0].length):-1}function g(e,t,a){var o=te.exec(t.slice(a,a+4));return o?(e.y=+o[0],a+o[0].length):-1}function h(e,t,a){var o=te.exec(t.slice(a,a+2));return o?(e.y=+o[0]+(68<+o[0]?1900:2e3),a+o[0].length):-1}function m(e,t,a){var o=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(t.slice(a,a+6));return o?(e.Z=o[1]?0:-(o[2]+(o[3]||'00')),a+o[0].length):-1}function f(e,t,a){var o=te.exec(t.slice(a,a+2));return o?(e.m=o[0]-1,a+o[0].length):-1}function b(e,t,a){var o=te.exec(t.slice(a,a+2));return o?(e.d=+o[0],a+o[0].length):-1}function _(e,t,a){var o=te.exec(t.slice(a,a+3));return o?(e.m=0,e.d=+o[0],a+o[0].length):-1}function y(e,t,a){var o=te.exec(t.slice(a,a+2));return o?(e.H=+o[0],a+o[0].length):-1}function x(e,t,a){var o=te.exec(t.slice(a,a+2));return o?(e.M=+o[0],a+o[0].length):-1}function w(e,t,a){var o=te.exec(t.slice(a,a+2));return o?(e.S=+o[0],a+o[0].length):-1}function v(e,t,a){var o=te.exec(t.slice(a,a+3));return o?(e.L=+o[0],a+o[0].length):-1}function C(e,t,a){var o=ne.exec(t.slice(a,a+1));return o?a+o[0].length:-1}function T(e,t){return i(e.getDate(),t,2)}function k(e,t){return i(e.getHours(),t,2)}function S(e,t){return i(e.getHours()%12||12,t,2)}function E(e,t){return i(1+J.a.count(Object(J.D)(e),e),t,3)}function z(e,t){return i(e.getMilliseconds(),t,3)}function A(e,t){return i(e.getMonth()+1,t,2)}function M(e,t){return i(e.getMinutes(),t,2)}function D(e,t){return i(e.getSeconds(),t,2)}function j(e,t){return i(J.t.count(Object(J.D)(e),e),t,2)}function N(e){return e.getDay()}function L(e,t){return i(J.l.count(Object(J.D)(e),e),t,2)}function P(e,t){return i(e.getFullYear()%100,t,2)}function R(e,t){return i(e.getFullYear()%1e4,t,4)}function q(e){var t=e.getTimezoneOffset();return(0<t?'-':(t*=-1,'+'))+i(0|t/60,'0',2)+i(t%60,'0',2)}function I(e,t){return i(e.getUTCDate(),t,2)}function H(e,t){return i(e.getUTCHours(),t,2)}function B(e,t){return i(e.getUTCHours()%12||12,t,2)}function O(e,t){return i(1+J.F.count(Object(J._7)(e),e),t,3)}function U(e,t){return i(e.getUTCMilliseconds(),t,3)}function F(e,t){return i(e.getUTCMonth()+1,t,2)}function W(e,t){return i(e.getUTCMinutes(),t,2)}function Y(e,t){return i(e.getUTCSeconds(),t,2)}function X(e,t){return i(J.X.count(Object(J._7)(e),e),t,2)}function $(e){return e.getUTCDay()}function V(e,t){return i(J.P.count(Object(J._7)(e),e),t,2)}function K(e,t){return i(e.getUTCFullYear()%100,t,2)}function G(e,t){return i(e.getUTCFullYear()%1e4,t,4)}function Z(){return'+0000'}function Q(){return'%'}t.a=function(e){function t(e,t){return function(a){var o=[],r=-1,i=0,l=e.length,n,d,s;for(a instanceof Date||(a=new Date(+a));++r<l;)37===e.charCodeAt(r)&&(o.push(e.slice(i,r)),null==(d=ee[n=e.charAt(++r)])?d='e'===n?' ':'0':n=e.charAt(++r),(s=t[n])&&(n=s(a,d)),o.push(n),i=r+1);return o.push(e.slice(i,r)),o.join('')}}function n(e,t){return function(n){var a=r(1900),d=l(a,e,n+='',0);if(d!=n.length)return null;if('p'in a&&(a.H=a.H%12+12*a.p),'W'in a||'U'in a){'w'in a||(a.w='W'in a?1:0);var i='Z'in a?o(r(a.y)).getUTCDay():t(r(a.y)).getDay();a.m=0,a.d='W'in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7}return'Z'in a?(a.H+=0|a.Z/100,a.M+=a.Z%100,o(a)):t(a)}}function l(e,t,a,o){for(var r=0,i=t.length,n=a.length,l,d;r<i;){if(o>=n)return-1;if(l=t.charCodeAt(r++),37===l){if(l=t.charAt(r++),d=ye[l in ee?t.charAt(r++):l],!d||0>(o=d(e,a,o)))return-1;}else if(l!=a.charCodeAt(o++))return-1}return o}var J=e.dateTime,te=e.date,ne=e.time,i=e.periods,ae=e.days,oe=e.shortDays,ie=e.months,re=e.shortMonths,le=d(i),de=s(i),se=d(ae),ce=s(ae),pe=d(oe),ue=s(oe),ge=d(ie),he=s(ie),me=d(re),fe=s(re),be={a:function(e){return oe[e.getDay()]},A:function(e){return ae[e.getDay()]},b:function(e){return re[e.getMonth()]},B:function(e){return ie[e.getMonth()]},c:null,d:T,e:T,H:k,I:S,j:E,L:z,m:A,M:M,p:function(e){return i[+(12<=e.getHours())]},S:D,U:j,w:N,W:L,x:null,X:null,y:P,Y:R,Z:q,"%":Q},_e={a:function(e){return oe[e.getUTCDay()]},A:function(e){return ae[e.getUTCDay()]},b:function(e){return re[e.getUTCMonth()]},B:function(e){return ie[e.getUTCMonth()]},c:null,d:I,e:I,H:H,I:B,j:O,L:U,m:F,M:W,p:function(e){return i[+(12<=e.getUTCHours())]},S:Y,U:X,w:$,W:V,x:null,X:null,y:K,Y:G,Z:Z,"%":Q},ye={a:function(e,t,a){var o=pe.exec(t.slice(a));return o?(e.w=ue[o[0].toLowerCase()],a+o[0].length):-1},A:function(e,t,a){var o=se.exec(t.slice(a));return o?(e.w=ce[o[0].toLowerCase()],a+o[0].length):-1},b:function(e,t,a){var o=me.exec(t.slice(a));return o?(e.m=fe[o[0].toLowerCase()],a+o[0].length):-1},B:function(e,t,a){var o=ge.exec(t.slice(a));return o?(e.m=he[o[0].toLowerCase()],a+o[0].length):-1},c:function(e,t,n){return l(e,J,t,n)},d:b,e:b,H:y,I:y,j:_,L:v,m:f,M:x,p:function(e,t,a){var o=le.exec(t.slice(a));return o?(e.p=de[o[0].toLowerCase()],a+o[0].length):-1},S:w,U:p,w:c,W:u,x:function(e,t,n){return l(e,te,t,n)},X:function(e,t,n){return l(e,ne,t,n)},y:h,Y:g,Z:m,"%":C};return be.x=t(te,be),be.X=t(ne,be),be.c=t(J,be),_e.x=t(te,_e),_e.X=t(ne,_e),_e.c=t(J,_e),{format:function(e){var n=t(e+='',be);return n.toString=function(){return e},n},parse:function(e){var t=n(e+='',a);return t.toString=function(){return e},t},utcFormat:function(e){var n=t(e+='',_e);return n.toString=function(){return e},n},utcParse:function(e){var t=n(e,o);return t.toString=function(){return e},t}}};var J=n(36),ee={0:'0',"-":'',_:' '},te=/^\s*\d+/,ne=/^%/,ae=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g},function(e,t,n){'use strict';n.d(t,'b',function(){return o});var a=n(57),o='%Y-%m-%dT%H:%M:%S.%LZ',i=Date.prototype.toISOString?function(e){return e.toISOString()}:Object(a.d)(o);t.a=i},function(e,t){'use strict';var n=function(e){return function(){return this.matches(e)}};if('undefined'!=typeof document){var a=document.documentElement;if(!a.matches){var o=a.webkitMatchesSelector||a.msMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector;n=function(e){return function(){return o.call(this,e)}}}}t.a=n},function(e,t){'use strict';function n(){return[]}t.a=function(e){return null==e?n:function(){return this.querySelectorAll(e)}}},function(e,t,n){'use strict';function a(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}t.a=a;var o=n(124),i=n(5);t.b=function(){return new i.a(this._enter||this._groups.map(o.a),this._parents)},a.prototype={constructor:a,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}}},function(e,t){'use strict';t.a=function(e){return Array(e.length)}},function(e,t,n){'use strict';function a(e){return function(){this.style.removeProperty(e)}}function o(e,t,n){return function(){this.style.setProperty(e,t,n)}}function i(e,t,n){return function(){var a=t.apply(this,arguments);null==a?this.style.removeProperty(e):this.style.setProperty(e,a,n)}}function r(e,t){return e.style.getPropertyValue(t)||Object(l.a)(e).getComputedStyle(e,null).getPropertyValue(t)}t.b=r;var l=n(65);t.a=function(e,t,n){return 1<arguments.length?this.each((null==t?a:'function'==typeof t?i:o)(e,t,null==n?'':n)):r(this.node(),e)}},function(e,t,n){'use strict';Object.defineProperty(t,'__esModule',{value:!0});var a=n(282);n.d(t,'axisTop',function(){return a.d}),n.d(t,'axisRight',function(){return a.c}),n.d(t,'axisBottom',function(){return a.a}),n.d(t,'axisLeft',function(){return a.b})},function(e,t,n){'use strict';t.b=function(e,t){var n=e.document.documentElement,i=Object(a.select)(e).on('dragstart.drag',null);t&&(i.on('click.drag',o.a,!0),setTimeout(function(){i.on('click.drag',null)},0)),'onselectstart'in n?i.on('selectstart.drag',null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)};var a=n(1),o=n(128);t.a=function(e){var t=e.document.documentElement,n=Object(a.select)(e).on('dragstart.drag',o.a,!0);'onselectstart'in t?n.on('selectstart.drag',o.a,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect='none')}},function(e,t,n){'use strict';t.b=function(){a.event.stopImmediatePropagation()};var a=n(1);t.a=function(){a.event.preventDefault(),a.event.stopImmediatePropagation()}},function(e,t,n){'use strict';var a=n(6);t.a=function(e,t){var n=e.__transition,o=!0,r,l,d;if(n){for(d in t=null==t?null:t+'',n){if((r=n[d]).name!==t){o=!1;continue}l=r.state>a.d&&r.state<a.b,r.state=a.a,r.timer.stop(),l&&r.on.call('interrupt',e,e.__data__,r.index,r.group),delete n[d]}o&&delete e.__transition}}},function(e,t,n){'use strict';var o=n(7),i=n(4);t.a=function(e,t){var n;return('number'==typeof t?i.m:t instanceof o.a?i.o:(n=Object(o.a)(t))?(t=n,i.o):i.s)(e,t)}},function(e,t,n){'use strict';var a=n(315);n.d(t,'y',function(){return a.a});var o=n(316);n.d(t,'D',function(){return o.b}),n.d(t,'E',function(){return o.a}),n.d(t,'G',function(){return o.c}),n.d(t,'F',function(){return o.b});var i=n(317);n.d(t,'m',function(){return i.b}),n.d(t,'n',function(){return i.a}),n.d(t,'p',function(){return i.c}),n.d(t,'o',function(){return i.b});var r=n(318);n.d(t,'z',function(){return r.b}),n.d(t,'A',function(){return r.a}),n.d(t,'C',function(){return r.c}),n.d(t,'B',function(){return r.b});var l=n(319);n.d(t,'H',function(){return l.b}),n.d(t,'I',function(){return l.a}),n.d(t,'K',function(){return l.c}),n.d(t,'J',function(){return l.b});var d=n(320);n.d(t,'u',function(){return d.b}),n.d(t,'v',function(){return d.a}),n.d(t,'x',function(){return d.c}),n.d(t,'w',function(){return d.b});var s=n(321);n.d(t,'i',function(){return s.b}),n.d(t,'j',function(){return s.a}),n.d(t,'l',function(){return s.c}),n.d(t,'k',function(){return s.b});var c=n(322);n.d(t,'e',function(){return c.c}),n.d(t,'f',function(){return c.a}),n.d(t,'h',function(){return c.c}),n.d(t,'g',function(){return c.b});var p=n(323);n.d(t,'a',function(){return p.b}),n.d(t,'b',function(){return p.a}),n.d(t,'d',function(){return p.c}),n.d(t,'c',function(){return p.b});var u=n(324);n.d(t,'q',function(){return u.c}),n.d(t,'r',function(){return u.a}),n.d(t,'t',function(){return u.c}),n.d(t,'s',function(){return u.b})},function(e,t,n){'use strict';n.d(t,'a',function(){return a}),n.d(t,'d',function(){return o}),n.d(t,'b',function(){return r}),n.d(t,'e',function(){return l}),n.d(t,'c',function(){return d});var a=Math.cos,o=Math.sin,i=Math.PI,r=i/2,l=2*i,d=Math.max},function(e,t,n){'use strict';t.b=function(e){return e.x},t.c=function(e){return e.y};var a=n(13),o=n(21),i=n(37),r=Math.PI*(3-2.23606797749979);t.a=function(e){function t(){n(),f.call('tick',b),s<c&&(m.stop(),f.call('end',b))}function n(){var t=e.length,n,a;for(s+=(u-s)*p,h.each(function(e){e(s)}),n=0;n<t;++n)a=e[n],null==a.fx?a.x+=a.vx*=g:(a.x=a.fx,a.vx=0),null==a.fy?a.y+=a.vy*=g:(a.y=a.fy,a.vy=0)}function l(){for(var t=0,a=e.length,n;t<a;++t){if(n=e[t],n.index=t,isNaN(n.x)||isNaN(n.y)){var o=10*Math.sqrt(t),i=t*r;n.x=o*Math.cos(i),n.y=o*Math.sin(i)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(t){return t.initialize&&t.initialize(e),t}var s=1,c=1e-3,p=1-Math.pow(c,1/300),u=0,g=0.6,h=Object(o.c)(),m=Object(i.d)(t),f=Object(a.a)('tick','end'),b;return null==e&&(e=[]),l(),b={tick:n,restart:function(){return m.restart(t),b},stop:function(){return m.stop(),b},nodes:function(t){return arguments.length?(e=t,l(),h.each(d),b):e},alpha:function(e){return arguments.length?(s=+e,b):s},alphaMin:function(e){return arguments.length?(c=+e,b):c},alphaDecay:function(e){return arguments.length?(p=+e,b):+p},alphaTarget:function(e){return arguments.length?(u=+e,b):u},velocityDecay:function(e){return arguments.length?(g=1-e,b):1-g},force:function(e,t){return 1<arguments.length?(null==t?h.remove(e):h.set(e,d(t)),b):h.get(e)},find:function(t,a,o){var r=0,i=e.length,n,l,d,s,c;for(null==o?o=Infinity:o*=o,r=0;r<i;++r)s=e[r],n=t-s.x,l=a-s.y,d=n*n+l*l,d<o&&(c=s,o=d);return c},on:function(e,t){return 1<arguments.length?(f.on(e,t),b):f.on(e)}}}},function(e,t,n){'use strict';function a(){g.point=i}function o(){r(h,m)}function i(e,t){g.point=r,h=e,m=t,e*=d.r,t*=d.r,f=e,b=Object(d.g)(t=t/2+d.q),_=Object(d.t)(t)}function r(e,t){e*=d.r,t*=d.r,t=t/2+d.q;var n=e-f,a=0<=n?1:-1,o=a*n,i=Object(d.g)(t),r=Object(d.t)(t),l=_*r,s=b*i+l*Object(d.g)(o),c=l*a*Object(d.t)(o);p.add(Object(d.e)(c,s)),f=e,b=i,_=r}n.d(t,'a',function(){return p}),n.d(t,'b',function(){return g});var l=n(18),d=n(0),s=n(11),c=n(15),p=Object(l.a)(),u=Object(l.a)(),g={point:s.a,lineStart:s.a,lineEnd:s.a,polygonStart:function(){p.reset(),g.lineStart=a,g.lineEnd=o},polygonEnd:function(){var e=+p;u.add(0>e?d.w+e:e),this.lineStart=this.lineEnd=this.point=s.a},sphere:function(){u.add(d.w)}},h,m,f,b,_;t.c=function(e){return u.reset(),Object(c.a)(e,g),2*u}},function(e,t,n){'use strict';function a(e,n,a,r,d,s){if(a){var c=Object(l.g)(n),p=Object(l.t)(n),u=r*a;null==d?(d=n+r*l.w,s=n-u/2):(d=o(c,d),s=o(c,s),(0<r?d<s:d>s)&&(d+=r*l.w));for(var g=d,t;0<r?g>s:g<s;g-=u)t=Object(i.g)([c,-p*Object(l.g)(g),-p*Object(l.t)(g)]),e.point(t[0],t[1])}}function o(e,t){t=Object(i.a)(t),t[0]-=e,Object(i.e)(t);var n=Object(l.b)(-t[1]);return((0>-t[2]?-n:n)+l.w-l.i)%l.w}t.a=a;var i=n(26),r=n(360),l=n(0),d=n(39);t.b=function(){function e(){var e=t.apply(this,arguments),c=n.apply(this,arguments)*l.r,r=o.apply(this,arguments)*l.r;return s=[],u=Object(d.b)(-e[0]*l.r,-e[1]*l.r,0).invert,a(i,c,r,1),e={type:'Polygon',coordinates:[s]},s=u=null,e}var t=Object(r.a)([0,0]),n=Object(r.a)(90),o=Object(r.a)(6),i={point:function(e,t){s.push(e=u(e,t)),e[0]*=l.h,e[1]*=l.h}},s,u;return e.center=function(n){return arguments.length?(t='function'==typeof n?n:Object(r.a)([+n[0],+n[1]]),e):t},e.radius=function(t){return arguments.length?(n='function'==typeof t?t:Object(r.a)(+t),e):n},e.precision=function(t){return arguments.length?(o='function'==typeof t?t:Object(r.a)(+t),e):o},e}},function(e,t){'use strict';t.a=function(e,t){function n(n,a){return n=e(n,a),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,a){return n=t.invert(n,a),n&&e.invert(n[0],n[1])}),n}},function(e,t,n){'use strict';var a=n(11);t.a=function(){var e=[],t;return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:a.a,rejoin:function(){1<e.length&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}},function(e,t,n){'use strict';function a(e,t,n,a){this.x=e,this.z=t,this.o=n,this.e=a,this.v=!1,this.n=this.p=null}function o(e){if(a=e.length){for(var t=0,o=e[0],a,n;++t<a;)o.n=n=e[t],n.p=o,o=n;o.n=n=e[0],n.p=o}}var r=n(139);t.a=function(e,t,l,d,s){var c=[],p=[],u,i;if(e.forEach(function(e){if(!(0>=(i=e.length-1))){var t=e[0],o=e[i],i,n;if(Object(r.a)(t,o)){for(s.lineStart(),u=0;u<i;++u)s.point((t=e[u])[0],t[1]);return void s.lineEnd()}c.push(n=new a(t,e,null,!0)),p.push(n.o=new a(t,null,n,!1)),c.push(n=new a(o,e,null,!1)),p.push(n.o=new a(o,null,n,!0))}}),!!c.length){for(p.sort(t),o(c),o(p),(u=0,i=p.length);u<i;++u)p[u].e=l=!l;for(var n=c[0],g,h;;){for(var m=n,f=!0;m.v;)if((m=m.n)===n)return;g=m.z,s.lineStart();do{if(m.v=m.o.v=!0,m.e){if(f)for(u=0,i=g.length;u<i;++u)s.point((h=g[u])[0],h[1]);else d(m.x,m.n.x,1,s);m=m.n}else{if(f)for(g=m.p.z,u=g.length-1;0<=u;--u)s.point((h=g[u])[0],h[1]);else d(m.x,m.p.x,-1,s);m=m.p}m=m.o,g=m.z,f=!f}while(!m.v);s.lineEnd()}}}},function(e,t,n){'use strict';var o=n(0);t.a=function(e,t){return Object(o.a)(e[0]-t[0])<o.i&&Object(o.a)(e[1]-t[1])<o.i}},function(e,t,n){'use strict';var a=n(18),o=n(26),r=n(0),l=Object(a.a)();t.a=function(e,t){var a=t[0],d=t[1],s=[Object(r.t)(a),-Object(r.g)(a),0],c=0,p=0;l.reset();for(var u=0,i=e.length;u<i;++u)if(x=(y=e[u]).length)for(var n=y[x-1],g=n[0],h=n[1]/2+r.q,f=Object(r.t)(h),b=Object(r.g)(h),_=0,y,x;_<x;++_,g=w,f=C,b=T,n=m){var m=y[_],w=m[0],v=m[1]/2+r.q,C=Object(r.t)(v),T=Object(r.g)(v),S=w-g,E=0<=S?1:-1,z=E*S,A=z>r.o,M=f*C;if(l.add(Object(r.e)(M*E*Object(r.t)(z),b*T+M*Object(r.g)(z))),c+=A?S+E*r.w:S,A^g>=a^w>=a){var k=Object(o.c)(Object(o.a)(n),Object(o.a)(m));Object(o.e)(k);var D=Object(o.c)(s,k);Object(o.e)(D);var j=(A^0<=S?-1:1)*Object(r.c)(D[2]);(d>j||d===j&&(k[0]||k[1]))&&(p+=A^0<=S?1:-1)}}return(c<-r.i||c<r.i&&l<-r.i)^1&p}},function(e,t,n){'use strict';var o=n(142),i=[null,null],r={type:'LineString',coordinates:i};t.a=function(e,t){return i[0]=e,i[1]=t,Object(o.a)(r)}},function(e,t,n){'use strict';function a(){p.point=p.lineEnd=d.a}function o(e,t){e*=l.r,t*=l.r,u=e,g=Object(l.t)(t),h=Object(l.g)(t),p.point=i}function i(e,t){e*=l.r,t*=l.r;var n=Object(l.t)(t),a=Object(l.g)(t),o=Object(l.a)(e-u),i=Object(l.g)(o),r=Object(l.t)(o),d=a*r,s=h*n-g*a*i,p=g*n+h*a*i;c.add(Object(l.e)(Object(l.u)(d*d+s*s),p)),u=e,g=n,h=a}var r=n(18),l=n(0),d=n(11),s=n(15),c=Object(r.a)(),p={sphere:d.a,point:d.a,lineStart:function(){p.point=o,p.lineEnd=a},lineEnd:d.a,polygonStart:d.a,polygonEnd:d.a},u,g,h;t.a=function(e){return c.reset(),Object(s.a)(e,p),+c}},function(e,t,n){'use strict';var a=n(11),o=Infinity,i=o,r=-o,l=r,d={point:function(e,t){e<o&&(o=e),e>r&&(r=e),t<i&&(i=t),t>l&&(l=t)},lineStart:a.a,lineEnd:a.a,polygonStart:a.a,polygonEnd:a.a,result:function(){var e=[[o,i],[r,l]];return r=l=-(i=o=Infinity),e}};t.a=d},function(e,t,n){'use strict';var a=n(76);t.a=function(){return Object(a.b)().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-0.6,38.7])}},function(e,t,n){'use strict';function a(e){return 1<e.length}function o(e,t){return(0>(e=e.x)[0]?e[1]-l.l-l.i:l.l-e[1])-(0>(t=t.x)[0]?t[1]-l.l-l.i:l.l-t[1])}var i=n(137),r=n(138),l=n(0),d=n(140),s=n(2);t.a=function(e,t,n,l){return function(c,p){function u(t,n){var a=c(t,n);e(t=a[0],n=a[1])&&p.point(t,n)}function g(e,t){var n=c(e,t);y.point(n[0],n[1])}function h(){T.point=g,y.lineStart()}function m(){T.point=u,y.lineEnd()}function f(e,t){E.push([e,t]);var n=c(e,t);v.point(n[0],n[1])}function b(){v.lineStart(),E=[]}function _(){f(E[0][0],E[0][1]),v.lineEnd();var e=v.clean(),t=w.result(),o=t.length,r,i,l,d;if(E.pop(),k.push(E),E=null,!!o){if(1&e){if(l=t[0],0<(i=l.length-1)){for(C||(p.polygonStart(),C=!0),p.lineStart(),r=0;r<i;++r)p.point((d=l[r])[0],d[1]);p.lineEnd()}return}1<o&&2&e&&t.push(t.pop().concat(t.shift())),S.push(t.filter(a))}}var y=t(p),x=c.invert(l[0],l[1]),w=Object(i.a)(),v=t(w),C=!1,T={point:u,lineStart:h,lineEnd:m,polygonStart:function(){T.point=f,T.lineStart=b,T.lineEnd=_,S=[],k=[]},polygonEnd:function(){T.point=u,T.lineStart=h,T.lineEnd=m,S=Object(s.merge)(S);var e=Object(d.a)(k,x);S.length?(!C&&(p.polygonStart(),C=!0),Object(r.a)(S,o,e,n,p)):e&&(!C&&(p.polygonStart(),C=!0),p.lineStart(),n(null,null,1,p),p.lineEnd()),C&&(p.polygonEnd(),C=!1),S=k=null},sphere:function(){p.polygonStart(),p.lineStart(),n(null,null,1,p),p.lineEnd(),p.polygonEnd()}},k,S,E;return T}}},function(e,t,n){'use strict';function a(e,t){return[e,t]}t.b=a;var o=n(9);a.invert=a,t.a=function(){return Object(o.a)(a).scale(152.63)}},function(e,t,n){'use strict';function o(e,t,n){var a=e.x,o=e.y,i=t.r+n.r,r=e.r+n.r,l=t.x-a,d=t.y-o,s=l*l+d*d;if(s){var c=0.5+((r*=r)-(i*=i))/(2*s),p=Math.sqrt(Math.max(0,2*i*(r+s)-(r-=s)*r-i*i))/(2*s);n.x=a+c*l+p*d,n.y=o+c*d-p*l}else n.x=a+r,n.y=o}function r(e,t){var n=t.x-e.x,a=t.y-e.y,o=e.r+t.r;return o*o-1e-6>n*n+a*a}function i(e){var t=e._,n=e.next._,a=t.r+n.r,o=(t.x*n.r+n.x*t.r)/a,i=(t.y*n.r+n.y*t.r)/a;return o*o+i*i}function l(e){this._=e,this.next=null,this.previous=null}function a(e){if(!(c=e.length))return 0;var t,a,s,c,n,p,u,g,h,m,f;if(t=e[0],t.x=0,t.y=0,!(1<c))return t.r;if(a=e[1],t.x=-a.r,a.x=t.r,a.y=0,!(2<c))return t.r+a.r;o(a,t,s=e[2]),t=new l(t),a=new l(a),s=new l(s),t.next=s.previous=a,a.next=t.previous=s,s.next=a.previous=t;pack:for(u=3;u<c;++u){o(t._,a._,s=e[u]),s=new l(s),g=a.next,h=t.previous,m=a._.r,f=t._.r;do if(m<=f){if(r(g._,s._)){a=g,t.next=a,a.previous=t,--u;continue pack}m+=g._.r,g=g.next}else{if(r(h._,s._)){t=h,t.next=a,a.previous=t,--u;continue pack}f+=h._.r,h=h.previous}while(g!==h.next);for(s.previous=t,s.next=a,t.next=a.previous=a=s,n=i(t);(s=s.next)!==a;)(p=i(s))<n&&(t=s,n=p);a=t.next}for(t=[a._],s=a;(s=s.next)!==a;)t.push(s._);for(s=Object(d.a)(t),u=0;u<c;++u)t=e[u],t.x-=s.x,t.y-=s.y;return s.r}t.b=a;var d=n(148);t.a=function(e){return a(e),e}},function(e,t,n){'use strict';function a(e,t){var n,a;if(l(t,e))return[t];for(n=0;n<e.length;++n)if(o(t,e[n])&&l(s(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(a=n+1;a<e.length;++a)if(o(s(e[n],e[a]),t)&&o(s(e[n],t),e[a])&&o(s(e[a],t),e[n])&&l(c(e[n],e[a],t),e))return[e[n],e[a],t];throw new Error}function o(e,t){var n=e.r-t.r,a=t.x-e.x,o=t.y-e.y;return 0>n||n*n<a*a+o*o}function r(e,t){var n=e.r-t.r+1e-6,a=t.x-e.x,o=t.y-e.y;return 0<n&&n*n>a*a+o*o}function l(e,t){for(var n=0;n<t.length;++n)if(!r(e,t[n]))return!1;return!0}function d(e){switch(e.length){case 1:return i(e[0]);case 2:return s(e[0],e[1]);case 3:return c(e[0],e[1],e[2]);}}function i(e){return{x:e.x,y:e.y,r:e.r}}function s(e,t){var n=e.x,a=e.y,o=e.r,i=t.x,r=t.y,d=t.r,s=i-n,c=r-a,u=d-o,g=p(s*s+c*c);return{x:(n+i+s/g*u)/2,y:(a+r+c/g*u)/2,r:(g+o+d)/2}}function c(e,t,n){var a=e.x,o=e.y,i=e.r,l=t.x,d=t.y,s=t.r,c=n.x,u=n.y,g=n.r,h=a-l,m=a-c,f=o-d,b=o-u,_=s-i,y=g-i,x=a*a+o*o-i*i,w=x-l*l-d*d+s*s,v=x-c*c-u*u+g*g,T=m*f-h*b,k=(f*v-b*w)/(2*T)-a,S=(b*_-f*y)/T,E=(m*w-h*v)/(2*T)-o,z=(h*y-m*_)/T,M=S*S+z*z-1,A=2*(i+k*S+E*z),D=k*k+E*E-i*i,C=-(M?(A+p(A*A-4*M*D))/(2*M):D/A);return{x:a+k+S*C,y:o+E+z*C,r:C}}var p=Math.sqrt,u=n(399);t.a=function(t){for(var o=0,i=(t=Object(u.a)(u.b.call(t))).length,n=[],l,s;o<i;)l=t[o],s&&r(s,l)?++o:(s=d(n=a(n,l)),o=0);return s}},function(e,t){'use strict';t.a=function(){return 0},t.b=function(e){return function(){return e}}},function(e,t){'use strict';var n=Math.round;t.a=function(e){e.x0=n(e.x0),e.y0=n(e.y0),e.x1=n(e.x1),e.y1=n(e.y1)}},function(e,t,n){'use strict';var a=n(19);t.a=function e(t){function n(e,n){var a,o;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=a)i=a,a=null;else do a=2*t()-1,i=2*t()-1,o=a*a+i*i;while(!o||1<o);return e+n*i*Math.sqrt(-2*Math.log(o)/o)}}return n.source=e,n}(a.a)},function(e,t,n){'use strict';var a=n(19);t.a=function e(t){function n(e){return function(){for(var n=0,a=0;a<e;++a)n+=t();return n}}return n.source=e,n}(a.a)},function(e,t,n){'use strict';function a(e,t){return function(n){return e(n.responseText,t)}}var o=n(83);t.a=function(e,t){return function(n,i,l){3>arguments.length&&(l=i,i=null);var d=Object(o.a)(n).mimeType(e);return d.row=function(e){return arguments.length?d.response(a(t,i=e)):i},d.row(i),l?d.get(l):d}}},function(e,t,n){'use strict';var a=n(14),o=n(16),i=n(43),r=n(84),l=n(85);t.a=function(){function e(e){var t=e.length,n=!1,o=Array(t),r=Array(t),l,i,b,_,d;for(null==h&&(f=m(d=Object(a.a)())),l=0;l<=t;++l){if(!(l<t&&g(_=e[l],l,e))==n)if(n=!n)i=l,f.areaStart(),f.lineStart();else{for(f.lineEnd(),f.lineStart(),b=l-1;b>=i;--b)f.point(o[b],r[b]);f.lineEnd(),f.areaEnd()}n&&(o[l]=+s(_,l,e),r[l]=+p(_,l,e),f.point(c?+c(_,l,e):o[l],u?+u(_,l,e):r[l]))}if(d)return f=null,d+''||null}function t(){return Object(r.a)().defined(g).curve(m).context(h)}var s=l.a,c=null,p=Object(o.a)(0),u=l.b,g=Object(o.a)(!0),h=null,m=i.a,f=null;return e.x=function(t){return arguments.length?(s='function'==typeof t?t:Object(o.a)(+t),c=null,e):s},e.x0=function(t){return arguments.length?(s='function'==typeof t?t:Object(o.a)(+t),e):s},e.x1=function(t){return arguments.length?(c=null==t?null:'function'==typeof t?t:Object(o.a)(+t),e):c},e.y=function(t){return arguments.length?(p='function'==typeof t?t:Object(o.a)(+t),u=null,e):p},e.y0=function(t){return arguments.length?(p='function'==typeof t?t:Object(o.a)(+t),e):p},e.y1=function(t){return arguments.length?(u=null==t?null:'function'==typeof t?t:Object(o.a)(+t),e):u},e.lineX0=e.lineY0=function(){return t().x(s).y(p)},e.lineY1=function(){return t().x(s).y(u)},e.lineX1=function(){return t().x(c).y(p)},e.defined=function(t){return arguments.length?(g='function'==typeof t?t:Object(o.a)(!!t),e):g},e.curve=function(t){return arguments.length?(m=t,null!=h&&(f=m(h)),e):m},e.context=function(t){return arguments.length?(null==t?h=f=null:f=m(h=t),e):h},e}},function(e,t,n){'use strict';function a(e){this._curve=e}function o(e){function t(t){return new a(e(t))}return t._curve=e,t}n.d(t,'a',function(){return r}),t.b=o;var i=n(43),r=o(i.a);a.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}}},function(e,t,n){'use strict';function a(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(Object(o.b)(e)):t()._curve},e}t.b=a;var o=n(155),i=n(84);t.a=function(){return a(Object(i.a)().curve(o.a))}},function(e,t){'use strict';t.a=function(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]}},function(e,t,n){'use strict';n.d(t,'a',function(){return a});var a=Array.prototype.slice},function(e,t,n){'use strict';var a=n(29);t.a={draw:function(e,t){var n=Math.sqrt(t/a.j);e.moveTo(n,0),e.arc(0,0,n,0,a.m)}}},function(e,t){'use strict';t.a={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}}},function(e,t){'use strict';var n=0.5773502691896257;t.a={draw:function(e,t){var a=Math.sqrt(t/(2*n)),o=a*n;e.moveTo(0,-a),e.lineTo(o,0),e.lineTo(0,a),e.lineTo(-o,0),e.closePath()}}},function(e,t,n){'use strict';var o=Math.sin,l=Math.cos,d=n(29),a=o(d.j/10)/o(7*d.j/10),p=o(d.m/10)*a,u=-l(d.m/10)*a;t.a={draw:function(e,t){var n=Math.sqrt(t*0.8908130915292852),g=p*n,h=u*n;e.moveTo(0,-n),e.lineTo(g,h);for(var m=1;5>m;++m){var i=d.m*m/5,a=l(i),f=o(i);e.lineTo(f*n,-a*n),e.lineTo(a*g-f*h,f*g+a*h)}e.closePath()}}},function(e,t){'use strict';t.a={draw:function(e,t){var n=Math.sqrt(t),a=-n/2;e.rect(a,a,n,n)}}},function(e,t){'use strict';var n=1.7320508075688772;t.a={draw:function(e,t){var a=-Math.sqrt(t/(3*n));e.moveTo(0,2*a),e.lineTo(-n*a,-a),e.lineTo(n*a,-a),e.closePath()}}},function(e,t){'use strict';var n=-0.5,a=1.7320508075688772/2,o=1/3.4641016151377544;t.a={draw:function(e,t){var i=Math.sqrt(t/(3*(o/2+1))),r=i/2,l=i*o,d=r,s=i*o+i,c=-d,p=s;e.moveTo(r,l),e.lineTo(d,s),e.lineTo(c,p),e.lineTo(n*r-a*l,a*r+n*l),e.lineTo(n*d-a*s,a*d+n*s),e.lineTo(n*c-a*p,a*c+n*p),e.lineTo(n*r+a*l,n*l-a*r),e.lineTo(n*d+a*s,n*s-a*d),e.lineTo(n*c+a*p,n*p-a*c),e.closePath()}}},function(e,t,n){'use strict';function a(e,t){this._context=e,this._k=(1-t)/6}t.a=a;var o=n(44),i=n(46);a.prototype={areaStart:o.a,areaEnd:o.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3),this._context.closePath();break}case 2:{this._context.lineTo(this._x3,this._y3),this._context.closePath();break}case 3:{this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5);break}}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Object(i.c)(this,e,t);}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.b=function e(t){function n(e){return new a(e,t)}return n.tension=function(t){return e(+t)},n}(0)},function(e,t,n){'use strict';function a(e,t){this._context=e,this._k=(1-t)/6}t.a=a;var o=n(46);a.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(o.c)(this,e,t);}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.b=function e(t){function n(e){return new a(e,t)}return n.tension=function(t){return e(+t)},n}(0)},function(e,t,n){'use strict';function a(e,t){var n=e.site,a=t.left,o=t.right;return(n===o&&(o=a,a=n),o)?r(o[1]-a[1],o[0]-a[0]):(n===a?(a=t[1],o=t[0]):(a=t[0],o=t[1]),r(a[0]-o[0],o[1]-a[1]))}function o(e,t){return t[+(t.left!==e.site)]}function i(e,t){return t[+(t.left===e.site)]}var r=Math.atan2,l=Math.abs;t.c=function(e){return s.b[e.index]={site:e,halfedges:[]}},t.a=o,t.d=function(){for(var e=0,t=s.b.length,n,o,i,r;e<t;++e)if((n=s.b[e])&&(r=(o=n.halfedges).length)){var l=Array(r),d=Array(r);for(i=0;i<r;++i)l[i]=i,d[i]=a(n,s.e[o[i]]);for(l.sort(function(e,t){return d[t]-d[e]}),i=0;i<r;++i)d[i]=o[l[i]];for(i=0;i<r;++i)o[i]=d[i]}},t.b=function(e,t,n,a){var r=s.b.length,c=!0,p,u,g,h,m,f,b,_,y,x,w,v;for(p=0;p<r;++p)if(u=s.b[p]){for(g=u.site,m=u.halfedges,h=m.length;h--;)s.e[m[h]]||m.splice(h,1);for(h=0,f=m.length;h<f;)x=i(u,s.e[m[h]]),w=x[0],v=x[1],b=o(u,s.e[m[++h%f]]),_=b[0],y=b[1],(l(w-_)>s.f||l(v-y)>s.f)&&(m.splice(h,0,s.e.push(Object(d.b)(g,x,l(w-e)<s.f&&a-v>s.f?[e,l(_-e)<s.f?y:a]:l(v-a)<s.f&&n-w>s.f?[l(y-a)<s.f?_:n,a]:l(w-n)<s.f&&v-t>s.f?[n,l(_-n)<s.f?y:t]:l(v-t)<s.f&&w-e>s.f?[l(y-t)<s.f?_:e,t]:null))-1),++f);f&&(c=!1)}if(c){var C=Infinity,T,k,S;for(p=0,c=null;p<r;++p)(u=s.b[p])&&(g=u.site,T=g[0]-e,k=g[1]-t,S=T*T+k*k,S<C&&(C=S,c=u));if(c){var E=[e,t],z=[e,a],A=[n,a],M=[n,t];c.halfedges.push(s.e.push(Object(d.b)(g=c.site,E,z))-1,s.e.push(Object(d.b)(g,z,A))-1,s.e.push(Object(d.b)(g,A,M))-1,s.e.push(Object(d.b)(g,M,E))-1)}}for(p=0;p<r;++p)(u=s.b[p])&&(u.halfedges.length||delete s.b[p])};var d=n(89),s=n(32)},function(e,t,n){'use strict';function a(){Object(o.a)(this),this.x=this.y=this.arc=this.site=this.cy=null}n.d(t,'c',function(){return l}),t.a=function(e){var t=e.P,n=e.N;if(t&&n){var o=t.site,s=e.site,c=n.site;if(o!==c){var p=s[0],u=s[1],g=o[0]-p,h=o[1]-u,m=c[0]-p,f=c[1]-u,b=2*(g*f-h*m);if(!(b>=-i.g)){var d=g*g+h*h,_=m*m+f*f,w=(f*d-h*_)/b,x=(g*_-m*d)/b,y=r.pop()||new a;y.arc=e,y.site=s,y.x=w+p,y.y=(y.cy=x+u)+Math.sqrt(w*w+x*x),e.circle=y;for(var v=null,C=i.c._;C;)if(y.y<C.y||y.y===C.y&&y.x<=C.x){if(C.L)C=C.L;else{v=C.P;break}}else if(C.R)C=C.R;else{v=C;break}i.c.insert(v,y),v||(l=y)}}}},t.b=function(e){var t=e.circle;t&&(!t.P&&(l=t.N),i.c.remove(t),r.push(t),Object(o.a)(t),e.circle=null)};var o=n(88),i=n(32),r=[],l},function(e,t,n){'use strict';function a(e,t,n){this.k=e,this.x=t,this.y=n}function o(e){return e.__zoom||i}t.a=a,n.d(t,'c',function(){return i}),t.b=o,a.prototype={constructor:a,scale:function(e){return 1===e?this:new a(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new a(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return'translate('+this.x+','+this.y+') scale('+this.k+')'}};var i=new a(1,0,0);o.prototype=a.prototype},function(e,t){var n=Math.max,a,o;/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */(function(t,n){'use strict';'object'==typeof e&&'object'==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error('jQuery requires a window with a document');return n(e)}:n(t)})('undefined'==typeof window?this:window,function(i,r){'use strict';function l(e,t){t=t||re;var n=t.createElement('script');n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function d(e){var t=!!e&&'length'in e&&e.length,n=ye.type(e);return'function'===n||ye.isWindow(e)?!1:'array'===n||0===t||'number'==typeof t&&0<t&&t-1 in e}function s(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function c(e,t,n){return ye.isFunction(t)?ye.grep(e,function(e,a){return!!t.call(e,a,e)!==n}):t.nodeType?ye.grep(e,function(e){return e===t!==n}):'string'==typeof t?Ae.test(t)?ye.filter(t,e,n):(t=ye.filter(t,e),ye.grep(e,function(e){return-1<pe.call(t,e)!==n&&1===e.nodeType})):ye.grep(e,function(e){return-1<pe.call(t,e)!==n})}function p(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function u(e){var t={};return ye.each(e.match(Pe)||[],function(e,n){t[n]=!0}),t}function g(e){return e}function h(e){throw e}function m(e,t,n,a){var o;try{e&&ye.isFunction(o=e.promise)?o.call(e).done(t).fail(n):e&&ye.isFunction(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(a))}catch(e){n.apply(void 0,[e])}}function f(){re.removeEventListener('DOMContentLoaded',f),i.removeEventListener('load',f),ye.ready()}function b(){this.expando=ye.expando+b.uid++}function _(e){return'true'===e||'false'!==e&&('null'===e?null:e===+e+''?+e:Ue.test(e)?JSON.parse(e):e)}function y(e,t,n){var a;if(void 0===n&&1===e.nodeType)if(a='data-'+t.replace(Fe,'-$&').toLowerCase(),n=e.getAttribute(a),'string'==typeof n){try{n=_(n)}catch(t){}Oe.set(e,t,n)}else n=void 0;return n}function x(e,t,n,a){var o=1,i=20,r=a?function(){return a.cur()}:function(){return ye.css(e,t,'')},l=r(),d=n&&n[3]||(ye.cssNumber[t]?'':'px'),s=(ye.cssNumber[t]||'px'!==d&&+l)&&Ye.exec(ye.css(e,t)),c;if(s&&s[3]!==d){d=d||s[3],n=n||[],s=+l||1;do o=o||'.5',s/=o,ye.style(e,t,s+d);while(o!=(o=r()/l)&&1!=o&&--i)}return n&&(s=+s||+l||0,c=n[1]?s+(n[1]+1)*n[2]:+n[2],a&&(a.unit=d,a.start=s,a.end=c)),c}function w(e){var t=e.ownerDocument,n=e.nodeName,a=Ke[n],o;return a?a:(o=t.body.appendChild(t.createElement(n)),a=ye.css(o,'display'),o.parentNode.removeChild(o),'none'===a&&(a='block'),Ke[n]=a,a)}function v(e,t){for(var n=[],a=0,o=e.length,i,r;a<o;a++)(r=e[a],!!r.style)&&(i=r.style.display,t?('none'===i&&(n[a]=Be.get(r,'display')||null,!n[a]&&(r.style.display='')),''===r.style.display&&$e(r)&&(n[a]=w(r))):'none'!==i&&(n[a]='none',Be.set(r,'display',i)));for(a=0;a<o;a++)null!=n[a]&&(e[a].style.display=n[a]);return e}function C(e,t){var n;return n='undefined'==typeof e.getElementsByTagName?'undefined'==typeof e.querySelectorAll?[]:e.querySelectorAll(t||'*'):e.getElementsByTagName(t||'*'),void 0===t||t&&s(e,t)?ye.merge([e],n):n}function T(e,t){for(var n=0,a=e.length;n<a;n++)Be.set(e[n],'globalEval',!t||Be.get(t[n],'globalEval'))}function k(e,t,n,a,o){for(var r=t.createDocumentFragment(),d=[],s=0,i=e.length,l,c,p,u,g,h;s<i;s++)if(l=e[s],l||0===l)if('object'===ye.type(l))ye.merge(d,l.nodeType?[l]:l);else if(!et.test(l))d.push(t.createTextNode(l));else{for(c=c||r.appendChild(t.createElement('div')),p=(Ze.exec(l)||['',''])[1].toLowerCase(),u=Je[p]||Je._default,c.innerHTML=u[1]+ye.htmlPrefilter(l)+u[2],h=u[0];h--;)c=c.lastChild;ye.merge(d,c.childNodes),c=r.firstChild,c.textContent=''}for(r.textContent='',s=0;l=d[s++];){if(a&&-1<ye.inArray(l,a)){o&&o.push(l);continue}if(g=ye.contains(l.ownerDocument,l),c=C(r.appendChild(l),'script'),g&&T(c),n)for(h=0;l=c[h++];)Qe.test(l.type||'')&&n.push(l)}return r}function S(){return!0}function E(){return!1}function z(){try{return re.activeElement}catch(e){}}function A(e,t,n,a,o,i){var r,l;if('object'==typeof t){for(l in'string'!=typeof n&&(a=a||n,n=void 0),t)A(e,l,n,a,t[l],i);return e}if(null==a&&null==o?(o=n,a=n=void 0):null==o&&('string'==typeof n?(o=a,a=void 0):(o=a,a=n,n=void 0)),!1===o)o=E;else if(!o)return e;return 1===i&&(r=o,o=function(e){return ye().off(e),r.apply(this,arguments)},o.guid=r.guid||(r.guid=ye.guid++)),e.each(function(){ye.event.add(this,t,o,a,n)})}function M(e,t){return s(e,'table')&&s(11===t.nodeType?t.firstChild:t,'tr')?ye('>tbody',e)[0]||e:e}function D(e){return e.type=(null!==e.getAttribute('type'))+'/'+e.type,e}function j(e){var t=dt.exec(e.type);return t?e.type=t[1]:e.removeAttribute('type'),e}function N(e,t){var n,a,o,i,r,l,d,s;if(1===t.nodeType){if(Be.hasData(e)&&(i=Be.access(e),r=Be.set(t,i),s=i.events,s))for(o in delete r.handle,r.events={},s)for(n=0,a=s[o].length;n<a;n++)ye.event.add(t,o,s[o][n]);Oe.hasData(e)&&(l=Oe.access(e),d=ye.extend({},l),Oe.set(t,d))}}function L(e,t){var n=t.nodeName.toLowerCase();'input'===n&&Ge.test(e.type)?t.checked=e.checked:('input'===n||'textarea'===n)&&(t.defaultValue=e.defaultValue)}function P(e,t,n,a){t=se.apply([],t);var o=0,i=e.length,r=t[0],d=ye.isFunction(r),s,c,p,u,g,h;if(d||1<i&&'string'==typeof r&&!be.checkClone&&lt.test(r))return e.each(function(o){var i=e.eq(o);d&&(t[0]=r.call(this,o,i.html())),P(i,t,n,a)});if(i&&(s=k(t,e[0].ownerDocument,!1,e,a),c=s.firstChild,1===s.childNodes.length&&(s=c),c||a)){for(p=ye.map(C(s,'script'),D),u=p.length;o<i;o++)g=s,o!=i-1&&(g=ye.clone(g,!0,!0),u&&ye.merge(p,C(g,'script'))),n.call(e[o],g,o);if(u)for(h=p[p.length-1].ownerDocument,ye.map(p,j),o=0;o<u;o++)g=p[o],Qe.test(g.type||'')&&!Be.access(g,'globalEval')&&ye.contains(h,g)&&(g.src?ye._evalUrl&&ye._evalUrl(g.src):l(g.textContent.replace(st,''),h))}return e}function R(e,t,n){for(var a=t?ye.filter(t,e):e,o=0,i;null!=(i=a[o]);o++)n||1!==i.nodeType||ye.cleanData(C(i)),i.parentNode&&(n&&ye.contains(i.ownerDocument,i)&&T(C(i,'script')),i.parentNode.removeChild(i));return e}function q(e,t,n){var a=e.style,o,i,r,l;return n=n||ut(e),n&&(l=n.getPropertyValue(t)||n[t],''===l&&!ye.contains(e.ownerDocument,e)&&(l=ye.style(e,t)),!be.pixelMarginRight()&&pt.test(l)&&ct.test(t)&&(o=a.width,i=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=l,l=n.width,a.width=o,a.minWidth=i,a.maxWidth=r)),void 0===l?l:l+''}function I(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function H(e){if(e in _t)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=bt.length;n--;)if(e=bt[n]+t,e in _t)return e}function B(e){var t=ye.cssProps[e];return t||(t=ye.cssProps[e]=H(e)||e),t}function O(e,t,a){var o=Ye.exec(t);return o?n(0,o[2]-(a||0))+(o[3]||'px'):t}function U(e,t,n,a,o){var r=0,l;for(l=n===(a?'border':'content')?4:'width'===t?1:0;4>l;l+=2)'margin'===n&&(r+=ye.css(e,n+Xe[l],!0,o)),a?('content'===n&&(r-=ye.css(e,'padding'+Xe[l],!0,o)),'margin'!==n&&(r-=ye.css(e,'border'+Xe[l]+'Width',!0,o))):(r+=ye.css(e,'padding'+Xe[l],!0,o),'padding'!==n&&(r+=ye.css(e,'border'+Xe[l]+'Width',!0,o)));return r}function F(e,t,n){var a=ut(e),o=q(e,t,a),i='border-box'===ye.css(e,'boxSizing',!1,a),r;return pt.test(o)?o:(r=i&&(be.boxSizingReliable()||o===e.style[t]),'auto'===o&&(o=e['offset'+t[0].toUpperCase()+t.slice(1)]),o=parseFloat(o)||0,o+U(e,t,n||(i?'border':'content'),r,a)+'px')}function W(e,t,n,a,o){return new W.prototype.init(e,t,n,a,o)}function Y(){vt&&(!1===re.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(Y):i.setTimeout(Y,ye.fx.interval),ye.fx.tick())}function X(){return i.setTimeout(function(){wt=void 0}),wt=ye.now()}function $(e,t){var n=0,a={height:e},o;for(t=t?1:0;4>n;n+=2-t)o=Xe[n],a['margin'+o]=a['padding'+o]=e;return t&&(a.opacity=a.width=e),a}function V(e,t,n){for(var a=(G.tweeners[t]||[]).concat(G.tweeners['*']),o=0,i=a.length,r;o<i;o++)if(r=a[o].call(n,t,e))return r}function K(e,t){var n,a,o,i,r;for(n in e)if(a=ye.camelCase(n),o=t[a],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==a&&(e[a]=i,delete e[n]),r=ye.cssHooks[a],r&&'expand'in r)for(n in i=r.expand(i),delete e[a],i)n in e||(e[n]=i[n],t[n]=o);else t[a]=o}function G(e,t,a){var o=0,i=G.prefilters.length,r=ye.Deferred().always(function(){delete l.elem}),l=function(){if(p)return!1;for(var t=wt||X(),a=n(0,d.startTime+d.duration-t),o=a/d.duration||0,i=1-o,l=0,s=d.tweens.length;l<s;l++)d.tweens[l].run(i);return(r.notifyWith(e,[d,i,a]),1>i&&s)?a:(s||r.notifyWith(e,[d,1,0]),r.resolveWith(e,[d]),!1)},d=r.promise({elem:e,props:ye.extend({},t),opts:ye.extend(!0,{specialEasing:{},easing:ye.easing._default},a),originalProperties:t,originalOptions:a,startTime:wt||X(),duration:a.duration,tweens:[],createTween:function(t,n){var a=ye.Tween(e,d.opts,t,n,d.opts.specialEasing[t]||d.opts.easing);return d.tweens.push(a),a},stop:function(t){var n=0,a=t?d.tweens.length:0;if(p)return this;for(p=!0;n<a;n++)d.tweens[n].run(1);return t?(r.notifyWith(e,[d,1,0]),r.resolveWith(e,[d,t])):r.rejectWith(e,[d,t]),this}}),s=d.props,c,p;for(K(s,d.opts.specialEasing);o<i;o++)if(c=G.prefilters[o].call(d,e,s,d.opts),c)return ye.isFunction(c.stop)&&(ye._queueHooks(d.elem,d.opts.queue).stop=ye.proxy(c.stop,c)),c;return ye.map(s,V,d),ye.isFunction(d.opts.start)&&d.opts.start.call(e,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),ye.fx.timer(ye.extend(l,{elem:e,anim:d,queue:d.opts.queue})),d}function Z(e){var t=e.match(Pe)||[];return t.join(' ')}function Q(e){return e.getAttribute&&e.getAttribute('class')||''}function J(e,t,n,a){if(Array.isArray(t))ye.each(t,function(t,o){n||jt.test(e)?a(e,o):J(e+'['+('object'==typeof o&&null!=o?t:'')+']',o,n,a)});else if(!n&&'object'===ye.type(t))for(var o in t)J(e+'['+o+']',t[o],n,a);else a(e,t)}function ee(e){return function(t,n){'string'!=typeof t&&(n=t,t='*');var a=0,o=t.toLowerCase().match(Pe)||[],i;if(ye.isFunction(n))for(;i=o[a++];)'+'===i[0]?(i=i.slice(1)||'*',(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function te(e,t,n,a){function o(l){var d;return i[l]=!0,ye.each(e[l]||[],function(e,l){var s=l(t,n,a);return'string'!=typeof s||r||i[s]?r?!(d=s):void 0:(t.dataTypes.unshift(s),o(s),!1)}),d}var i={},r=e===Wt;return o(t.dataTypes[0])||!i['*']&&o('*')}function ne(e,t){var n=ye.ajaxSettings.flatOptions||{},a,o;for(a in t)void 0!==t[a]&&((n[a]?e:o||(o={}))[a]=t[a]);return o&&ye.extend(!0,e,o),e}function ae(e,t,n){for(var a=e.contents,o=e.dataTypes,i,r,l,d;'*'===o[0];)o.shift(),void 0==i&&(i=e.mimeType||t.getResponseHeader('Content-Type'));if(i)for(r in a)if(a[r]&&a[r].test(i)){o.unshift(r);break}if(o[0]in n)l=o[0];else{for(r in n){if(!o[0]||e.converters[r+' '+o[0]]){l=r;break}d||(d=r)}l=l||d}return l?(l!==o[0]&&o.unshift(l),n[l]):void 0}function oe(e,t,n,a){var o={},i=e.dataTypes.slice(),r,l,d,s,c;if(i[1])for(d in e.converters)o[d.toLowerCase()]=e.converters[d];for(l=i.shift();l;)if(e.responseFields[l]&&(n[e.responseFields[l]]=t),!c&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=l,l=i.shift(),l)if('*'===l)l=c;else if('*'!==c&&c!==l){if(d=o[c+' '+l]||o['* '+l],!d)for(r in o)if(s=r.split(' '),s[1]===l&&(d=o[c+' '+s[0]]||o['* '+s[0]],d)){!0===d?d=o[r]:!0!==o[r]&&(l=s[0],i.unshift(s[1]));break}if(!0!==d)if(d&&e.throws)t=d(t);else try{t=d(t)}catch(t){return{state:'parsererror',error:d?t:'No conversion from '+c+' to '+l}}}return{state:'success',data:t}}var ie=[],re=i.document,le=Object.getPrototypeOf,de=ie.slice,se=ie.concat,ce=ie.push,pe=ie.indexOf,ue={},ge=ue.toString,he=ue.hasOwnProperty,me=he.toString,fe=me.call(Object),be={},_e='3.2.1',ye=function(e,t){return new ye.fn.init(e,t)},xe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,we=/^-ms-/,ve=/-([a-z])/g,Ce=function(e,t){return t.toUpperCase()};ye.fn=ye.prototype={jquery:_e,constructor:ye,length:0,toArray:function(){return de.call(this)},get:function(e){return null==e?de.call(this):0>e?this[e+this.length]:this[e]},pushStack:function(e){var t=ye.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ye.each(this,e)},map:function(e){return this.pushStack(ye.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(de.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ce,sort:ie.sort,splice:ie.splice},ye.extend=ye.fn.extend=function(){var e=arguments[0]||{},t=1,n=arguments.length,a=!1,o,i,r,l,d,s;for('boolean'==typeof e&&(a=e,e=arguments[t]||{},t++),'object'==typeof e||ye.isFunction(e)||(e={}),t===n&&(e=this,t--);t<n;t++)if(null!=(o=arguments[t]))for(i in o)(r=e[i],l=o[i],e!==l)&&(a&&l&&(ye.isPlainObject(l)||(d=Array.isArray(l)))?(d?(d=!1,s=r&&Array.isArray(r)?r:[]):s=r&&ye.isPlainObject(r)?r:{},e[i]=ye.extend(a,s,l)):void 0!==l&&(e[i]=l));return e},ye.extend({expando:'jQuery'+(_e+Math.random()).replace(/\D/g,''),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return'function'===ye.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=ye.type(e);return('number'===t||'string'===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return e&&'[object Object]'===ge.call(e)&&((t=le(e),!!!t)||(n=he.call(t,'constructor')&&t.constructor,'function'==typeof n&&me.call(n)===fe))},isEmptyObject:function(e){for(var t in e)return!1;return!0},type:function(e){return null==e?e+'':'object'==typeof e||'function'==typeof e?ue[ge.call(e)]||'object':typeof e},globalEval:function(e){l(e)},camelCase:function(e){return e.replace(we,'ms-').replace(ve,Ce)},each:function(e,t){var n=0,a;if(d(e))for(a=e.length;n<a&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?'':(e+'').replace(xe,'')},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?ye.merge(n,'string'==typeof e?[e]:e):ce.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:pe.call(t,e,n)},merge:function(e,t){for(var n=+t.length,a=0,o=e.length;a<n;a++)e[o++]=t[a];return e.length=o,e},grep:function(e,t,n){for(var a=[],o=0,i=e.length,r;o<i;o++)r=!t(e[o],o),r!==!n&&a.push(e[o]);return a},map:function(e,t,n){var a=0,o=[],i,r;if(d(e))for(i=e.length;a<i;a++)r=t(e[a],a,n),null!=r&&o.push(r);else for(a in e)r=t(e[a],a,n),null!=r&&o.push(r);return se.apply([],o)},guid:1,proxy:function(e,t){var n,a,o;if('string'==typeof t&&(n=e[t],t=e,e=n),!!ye.isFunction(e))return a=de.call(arguments,2),o=function(){return e.apply(t||this,a.concat(de.call(arguments)))},o.guid=e.guid=e.guid||ye.guid++,o},now:Date.now,support:be}),'function'==typeof Symbol&&(ye.fn[Symbol.iterator]=ie[Symbol.iterator]),ye.each(['Boolean','Number','String','Function','Array','Date','RegExp','Object','Error','Symbol'],function(e,t){ue['[object '+t+']']=t.toLowerCase()});var Te=/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */function(e){function t(e,t,n,a){var o=t&&t.ownerDocument,r=t?t.nodeType:9,l,d,i,s,c,p,g;if(n=n||[],'string'!=typeof e||!e||1!==r&&9!==r&&11!==r)return n;if(!a&&((t?t.ownerDocument||t:C)!==fe&&me(t),t=t||fe,_e)){if(11!==r&&(c=Z.exec(e)))if(!(l=c[1])){if(c[2])return L.apply(n,t.getElementsByTagName(e)),n;if((l=c[3])&&re.getElementsByClassName&&t.getElementsByClassName)return L.apply(n,t.getElementsByClassName(l)),n}else if(9===r){if(!(i=t.getElementById(l)))return n;if(i.id===l)return n.push(i),n}else if(o&&(i=o.getElementById(l))&&ve(t,i)&&i.id===l)return n.push(i),n;if(re.qsa&&!z[e+' ']&&(!ye||!ye.test(e))){if(1!==r)o=t,g=e;else if('object'!==t.nodeName.toLowerCase()){for((s=t.getAttribute('id'))?s=s.replace(te,ne):t.setAttribute('id',s=v),p=se(e),d=p.length;d--;)p[d]='#'+s+' '+h(p[d]);g=p.join(','),o=Q.test(e)&&u(t.parentNode)||t}if(g)try{return L.apply(n,o.querySelectorAll(g)),n}catch(e){}finally{s===v&&t.removeAttribute('id')}}}return pe(e.replace(O,'$1'),t,n,a)}function n(){function e(n,a){return t.push(n+' ')>le.cacheLength&&delete e[t.shift()],e[n+' ']=a}var t=[];return e}function a(e){return e[v]=!0,e}function o(e){var t=fe.createElement('fieldset');try{return!!e(t)}catch(t){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split('|'),a=n.length;a--;)le.attrHandle[n[a]]=t}function l(e,t){var n=t&&e,a=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(a)return a;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function d(e){return function(t){var n=t.nodeName.toLowerCase();return'input'===n&&t.type===e}}function s(e){return function(t){var n=t.nodeName.toLowerCase();return('input'===n||'button'===n)&&t.type===e}}function c(e){return function(t){return'form'in t?t.parentNode&&!1===t.disabled?'label'in t?'label'in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:!!('label'in t)&&t.disabled===e}}function p(e){return a(function(t){return t=+t,a(function(n,a){for(var o=e([],n.length,t),r=o.length,i;r--;)n[i=o[r]]&&(n[i]=!(a[i]=n[i]))})})}function u(e){return e&&'undefined'!=typeof e.getElementsByTagName&&e}function g(){}function h(e){for(var t=0,n=e.length,a='';t<n;t++)a+=e[t].value;return a}function m(e,t,n){var a=t.dir,o=t.next,i=o||a,r=n&&'parentNode'===i,l=k++;return t.first?function(t,n,o){for(;t=t[a];)if(1===t.nodeType||r)return e(t,n,o);return!1}:function(t,n,d){var s=[T,l],c,p,u;if(d){for(;t=t[a];)if((1===t.nodeType||r)&&e(t,n,d))return!0;}else for(;t=t[a];)if(1===t.nodeType||r)if(u=t[v]||(t[v]={}),p=u[t.uniqueID]||(u[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[a]||t;else{if((c=p[i])&&c[0]===T&&c[1]===l)return s[2]=c[2];if(p[i]=s,s[2]=e(t,n,d))return!0}return!1}}function f(e){return 1<e.length?function(t,n,a){for(var o=e.length;o--;)if(!e[o](t,n,a))return!1;return!0}:e[0]}function b(e,n,a){for(var o=0,i=n.length;o<i;o++)t(e,n[o],a);return a}function _(e,t,n,a,o){for(var r=[],l=0,i=e.length,d;l<i;l++)(d=e[l])&&(!n||n(d,a,o))&&(r.push(d),null!=t&&t.push(l));return r}function y(e,t,n,o,r,i){return o&&!o[v]&&(o=y(o)),r&&!r[v]&&(r=y(r,i)),a(function(a,l,d,s){var c=[],p=[],u=l.length,g=a||b(t||'*',d.nodeType?[d]:d,[]),h=e&&(a||!t)?_(g,c,e,d,s):g,m=n?r||(a?e:u||o)?[]:l:h,f,y,i;if(n&&n(h,m,d,s),o)for(f=_(m,p),o(f,[],d,s),y=f.length;y--;)(i=f[y])&&(m[p[y]]=!(h[p[y]]=i));if(!a)m=_(m===l?m.splice(u,m.length):m),r?r(null,l,m,s):L.apply(l,m);else if(r||e){if(r){for(f=[],y=m.length;y--;)(i=m[y])&&f.push(h[y]=i);r(null,m=[],f,s)}for(y=m.length;y--;)(i=m[y])&&-1<(f=r?R(a,i):c[y])&&(a[f]=!(l[f]=i))}})}function x(e){for(var t=e.length,n=le.relative[e[0].type],a=n||le.relative[' '],o=n?1:0,i=m(function(e){return e===d},a,!0),r=m(function(e){return-1<R(d,e)},a,!0),l=[function(e,t,a){var o=!n&&(a||t!==ue)||((d=t).nodeType?i(e,t,a):r(e,t,a));return d=null,o}],d,s,c;o<t;o++)if(s=le.relative[e[o].type])l=[m(f(l),s)];else{if(s=le.filter[e[o].type].apply(null,e[o].matches),s[v]){for(c=++o;c<t&&!le.relative[e[c].type];c++);return y(1<o&&f(l),1<o&&h(e.slice(0,o-1).concat({value:' '===e[o-2].type?'*':''})).replace(O,'$1'),s,o<c&&x(e.slice(o,c)),c<t&&x(e=e.slice(c)),c<t&&h(e))}l.push(s)}return f(l)}function w(e,n){var o=0<n.length,r=0<e.length,i=function(a,l,d,s,c){var p=0,u='0',i=a&&[],g=[],h=ue,m=a||r&&le.find.TAG('*',c),f=T+=null==h?1:Math.random()||0.1,b=m.length,y,x,w;for(c&&(ue=l===fe||l||c);u!==b&&null!=(y=m[u]);u++){if(r&&y){for(x=0,l||y.ownerDocument===fe||(me(y),d=!_e);w=e[x++];)if(w(y,l||fe,d)){s.push(y);break}c&&(T=f)}o&&((y=!w&&y)&&p--,a&&i.push(y))}if(p+=u,o&&u!==p){for(x=0;w=n[x++];)w(i,g,l,d);if(a){if(0<p)for(;u--;)i[u]||g[u]||(g[u]=j.call(s));g=_(g)}L.apply(s,g),c&&!a&&0<g.length&&1<p+n.length&&t.uniqueSort(s)}return c&&(T=f,ue=h),i};return o?a(i):i}var v='sizzle'+1*new Date,C=e.document,T=0,k=0,S=n(),E=n(),z=n(),A=function(e,t){return e===t&&(he=!0),0},M={}.hasOwnProperty,D=[],j=D.pop,N=D.push,L=D.push,P=D.slice,R=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},q='checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',I='[\\x20\\t\\r\\n\\f]',H='(?:\\\\.|[\\w-]|[^\0-\\xa0])+',B=/[\x20\t\r\n\f]+/g,O=/^[\x20\t\r\n\f]+|((?:^|[^\\])(?:\\.)*)[\x20\t\r\n\f]+$/g,U=/^[\x20\t\r\n\f]*,[\x20\t\r\n\f]*/,F=/^[\x20\t\r\n\f]*([>+~]|[\x20\t\r\n\f])[\x20\t\r\n\f]*/,W=/=[\x20\t\r\n\f]*([^\]'"]*?)[\x20\t\r\n\f]*\]/g,Y=/:((?:\\.|[\w-]|[^ -\xa0])+)(?:\((('((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)")|((?:\\.|[^\\()[\]]|\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^ -\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^ -\xa0])+))|)[\x20\t\r\n\f]*\])*)|.*)\)|)/,X=/^(?:\\.|[\w-]|[^ -\xa0])+$/,$={ID:/^#((?:\\.|[\w-]|[^ -\xa0])+)/,CLASS:/^\.((?:\\.|[\w-]|[^ -\xa0])+)/,TAG:/^((?:\\.|[\w-]|[^ -\xa0])+|[*])/,ATTR:/^\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^ -\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^ -\xa0])+))|)[\x20\t\r\n\f]*\]/,PSEUDO:/^:((?:\\.|[\w-]|[^ -\xa0])+)(?:\((('((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)")|((?:\\.|[^\\()[\]]|\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^ -\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^ -\xa0])+))|)[\x20\t\r\n\f]*\])*)|.*)\)|)/,CHILD:/^:(only|first|last|nth|nth-last)-(child|of-type)(?:\([\x20\t\r\n\f]*(even|odd|(([+-]|)(\d*)n|)[\x20\t\r\n\f]*(?:([+-]|)[\x20\t\r\n\f]*(\d+)|))[\x20\t\r\n\f]*\)|)/i,bool:/^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,needsContext:/^[\x20\t\r\n\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\([\x20\t\r\n\f]*((?:-\d)?\d*)[\x20\t\r\n\f]*\)|)(?=[^-]|$)/i},V=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,J=/\\([\da-f]{1,6}[\x20\t\r\n\f]?|([\x20\t\r\n\f])|.)/ig,ee=function(e,t,n){var a=String.fromCharCode,o='0x'+t-65536;return o!=o||n?t:0>o?a(o+65536):a(55296|o>>10,56320|1023&o)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?'\0'===e?'\uFFFD':e.slice(0,-1)+'\\'+e.charCodeAt(e.length-1).toString(16)+' ':'\\'+e},ae=function(){me()},oe=m(function(e){return!0===e.disabled&&('form'in e||'label'in e)},{dir:'parentNode',next:'legend'}),ie,re,le,de,i,se,ce,pe,ue,ge,he,me,fe,be,_e,ye,xe,we,ve;try{L.apply(D=P.call(C.childNodes),C.childNodes),D[C.childNodes.length].nodeType}catch(t){L={apply:D.length?function(e,t){N.apply(e,P.call(t))}:function(e,t){for(var n=e.length,a=0;e[n++]=t[a++];);e.length=n-1}}}for(ie in re=t.support={},i=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&'HTML'!==t.nodeName},me=t.setDocument=function(e){var t=e?e.ownerDocument||e:C,n,a;return t!==fe&&9===t.nodeType&&t.documentElement?(fe=t,be=fe.documentElement,_e=!i(fe),C!==fe&&(a=fe.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener('unload',ae,!1):a.attachEvent&&a.attachEvent('onunload',ae)),re.attributes=o(function(e){return e.className='i',!e.getAttribute('className')}),re.getElementsByTagName=o(function(e){return e.appendChild(fe.createComment('')),!e.getElementsByTagName('*').length}),re.getElementsByClassName=G.test(fe.getElementsByClassName),re.getById=o(function(e){return be.appendChild(e).id=v,!fe.getElementsByName||!fe.getElementsByName(v).length}),re.getById?(le.filter.ID=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute('id')===t}},le.find.ID=function(e,t){if('undefined'!=typeof t.getElementById&&_e){var n=t.getElementById(e);return n?[n]:[]}}):(le.filter.ID=function(e){var t=e.replace(J,ee);return function(e){var n='undefined'!=typeof e.getAttributeNode&&e.getAttributeNode('id');return n&&n.value===t}},le.find.ID=function(e,t){if('undefined'!=typeof t.getElementById&&_e){var n=t.getElementById(e),a,o,i;if(n){if(a=n.getAttributeNode('id'),a&&a.value===e)return[n];for(i=t.getElementsByName(e),o=0;n=i[o++];)if(a=n.getAttributeNode('id'),a&&a.value===e)return[n]}return[]}}),le.find.TAG=re.getElementsByTagName?function(e,t){return'undefined'==typeof t.getElementsByTagName?re.qsa?t.querySelectorAll(e):void 0:t.getElementsByTagName(e)}:function(e,t){var n=[],a=0,o=t.getElementsByTagName(e),i;if('*'===e){for(;i=o[a++];)1===i.nodeType&&n.push(i);return n}return o},le.find.CLASS=re.getElementsByClassName&&function(e,t){if('undefined'!=typeof t.getElementsByClassName&&_e)return t.getElementsByClassName(e)},xe=[],ye=[],(re.qsa=G.test(fe.querySelectorAll))&&(o(function(e){be.appendChild(e).innerHTML='<a id=\''+v+'\'></a><select id=\''+v+'-\r\\\' msallowcapture=\'\'><option selected=\'\'></option></select>',e.querySelectorAll('[msallowcapture^=\'\']').length&&ye.push('[*^$]='+I+'*(?:\'\'|"")'),e.querySelectorAll('[selected]').length||ye.push('\\['+I+'*(?:value|'+q+')'),e.querySelectorAll('[id~='+v+'-]').length||ye.push('~='),e.querySelectorAll(':checked').length||ye.push(':checked'),e.querySelectorAll('a#'+v+'+*').length||ye.push('.#.+[+~]')}),o(function(e){e.innerHTML='<a href=\'\' disabled=\'disabled\'></a><select disabled=\'disabled\'><option/></select>';var t=fe.createElement('input');t.setAttribute('type','hidden'),e.appendChild(t).setAttribute('name','D'),e.querySelectorAll('[name=d]').length&&ye.push('name'+I+'*[*^$|!~]?='),2!==e.querySelectorAll(':enabled').length&&ye.push(':enabled',':disabled'),be.appendChild(e).disabled=!0,2!==e.querySelectorAll(':disabled').length&&ye.push(':enabled',':disabled'),e.querySelectorAll('*,:x'),ye.push(',.*:')})),(re.matchesSelector=G.test(we=be.matches||be.webkitMatchesSelector||be.mozMatchesSelector||be.oMatchesSelector||be.msMatchesSelector))&&o(function(e){re.disconnectedMatch=we.call(e,'*'),we.call(e,'[s!=\'\']:x'),xe.push('!=',':('+H+')(?:\\(((\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|'+('\\['+I+'*('+H+')(?:'+I+'*([*^$|!~]?=)'+I+'*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|('+H+'))|)'+I+'*\\]')+')*)|.*)\\)|)')}),ye=ye.length&&new RegExp(ye.join('|')),xe=xe.length&&new RegExp(xe.join('|')),n=G.test(be.compareDocumentPosition),ve=n||G.test(be.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,a=t&&t.parentNode;return e===a||!!(a&&1===a.nodeType&&(n.contains?n.contains(a):e.compareDocumentPosition&&16&e.compareDocumentPosition(a)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=n?function(e,t){if(e===t)return he=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!re.sortDetached&&t.compareDocumentPosition(e)===n?e===fe||e.ownerDocument===C&&ve(C,e)?-1:t===fe||t.ownerDocument===C&&ve(C,t)?1:ge?R(ge,e)-R(ge,t):0:4&n?-1:1)}:function(e,t){if(e===t)return he=!0,0;var n=0,a=e.parentNode,o=t.parentNode,i=[e],r=[t],d;if(!a||!o)return e===fe?-1:t===fe?1:a?-1:o?1:ge?R(ge,e)-R(ge,t):0;if(a===o)return l(e,t);for(d=e;d=d.parentNode;)i.unshift(d);for(d=t;d=d.parentNode;)r.unshift(d);for(;i[n]===r[n];)n++;return n?l(i[n],r[n]):i[n]===C?-1:r[n]===C?1:0},fe):fe},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==fe&&me(e),n=n.replace(W,'=\'$1\']'),re.matchesSelector&&_e&&!z[n+' ']&&(!xe||!xe.test(n))&&(!ye||!ye.test(n)))try{var a=we.call(e,n);if(a||re.disconnectedMatch||e.document&&11!==e.document.nodeType)return a}catch(t){}return 0<t(n,fe,null,[e]).length},t.contains=function(e,t){return(e.ownerDocument||e)!==fe&&me(e),ve(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==fe&&me(e);var n=le.attrHandle[t.toLowerCase()],a=n&&M.call(le.attrHandle,t.toLowerCase())?n(e,t,!_e):void 0;return void 0===a?re.attributes||!_e?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null:a},t.escape=function(e){return(e+'').replace(te,ne)},t.error=function(e){throw new Error('Syntax error, unrecognized expression: '+e)},t.uniqueSort=function(e){var t=[],n=0,a=0,o;if(he=!re.detectDuplicates,ge=!re.sortStable&&e.slice(0),e.sort(A),he){for(;o=e[a++];)o===e[a]&&(n=t.push(a));for(;n--;)e.splice(t[n],1)}return ge=null,e},de=t.getText=function(e){var t='',n=0,a=e.nodeType,o;if(!a)for(;o=e[n++];)t+=de(o);else if(1===a||9===a||11===a){if('string'==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)t+=de(e)}else if(3===a||4===a)return e.nodeValue;return t},le=t.selectors={cacheLength:50,createPseudo:a,match:$,attrHandle:{},find:{},relative:{">":{dir:'parentNode',first:!0}," ":{dir:'parentNode'},"+":{dir:'previousSibling',first:!0},"~":{dir:'previousSibling'}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,ee),e[3]=(e[3]||e[4]||e[5]||'').replace(J,ee),'~='===e[2]&&(e[3]=' '+e[3]+' '),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),'nth'===e[1].slice(0,3)?(!e[3]&&t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*('even'===e[3]||'odd'===e[3])),e[5]=+(e[7]+e[8]||'odd'===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t=!e[6]&&e[2],n;return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||'':t&&Y.test(t)&&(n=se(t,!0))&&(n=t.indexOf(')',t.length-n)-t.length)&&(e[0]=e[0].slice(0,n),e[2]=t.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return'*'===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+' '];return t||(t=new RegExp('(^|'+I+')'+e+'('+I+'|$)'))&&S(e,function(e){return t.test('string'==typeof e.className&&e.className||'undefined'!=typeof e.getAttribute&&e.getAttribute('class')||'')})},ATTR:function(e,n,a){return function(o){var i=t.attr(o,e);return null==i?'!='===n:!n||(i+='','='===n?i===a:'!='===n?i!==a:'^='===n?a&&0===i.indexOf(a):'*='===n?a&&-1<i.indexOf(a):'$='===n?a&&i.slice(-a.length)===a:'~='===n?-1<(' '+i.replace(B,' ')+' ').indexOf(a):'|='===n&&(i===a||i.slice(0,a.length+1)===a+'-'))}},CHILD:function(e,t,n,a,o){var i='nth'!==e.slice(0,3),r='last'!==e.slice(-4),l='of-type'===t;return 1===a&&0===o?function(e){return!!e.parentNode}:function(t,n,d){var s=i==r?'previousSibling':'nextSibling',c=t.parentNode,p=l&&t.nodeName.toLowerCase(),u=!d&&!l,g=!1,h,m,f,b,_,y;if(c){if(i){for(;s;){for(b=t;b=b[s];)if(l?b.nodeName.toLowerCase()===p:1===b.nodeType)return!1;y=s='only'===e&&!y&&'nextSibling'}return!0}if(y=[r?c.firstChild:c.lastChild],r&&u){for(b=c,f=b[v]||(b[v]={}),m=f[b.uniqueID]||(f[b.uniqueID]={}),h=m[e]||[],_=h[0]===T&&h[1],g=_&&h[2],b=_&&c.childNodes[_];b=++_&&b&&b[s]||(g=_=0)||y.pop();)if(1===b.nodeType&&++g&&b===t){m[e]=[T,_,g];break}}else if(u&&(b=t,f=b[v]||(b[v]={}),m=f[b.uniqueID]||(f[b.uniqueID]={}),h=m[e]||[],_=h[0]===T&&h[1],g=_),!1===g)for(;(b=++_&&b&&b[s]||(g=_=0)||y.pop())&&!((l?b.nodeName.toLowerCase()===p:1===b.nodeType)&&++g&&(u&&(f=b[v]||(b[v]={}),m=f[b.uniqueID]||(f[b.uniqueID]={}),m[e]=[T,g]),b===t)););return g-=o,g===a||0==g%a&&0<=g/a}}},PSEUDO:function(e,n){var o=le.pseudos[e]||le.setFilters[e.toLowerCase()]||t.error('unsupported pseudo: '+e),i;return o[v]?o(n):1<o.length?(i=[e,e,'',n],le.setFilters.hasOwnProperty(e.toLowerCase())?a(function(e,t){for(var a=o(e,n),r=a.length,i;r--;)i=R(e,a[r]),e[i]=!(t[i]=a[r])}):function(e){return o(e,0,i)}):o}},pseudos:{not:a(function(e){var t=[],n=[],o=ce(e.replace(O,'$1'));return o[v]?a(function(e,t,n,a){for(var r=o(e,null,a,[]),l=e.length,i;l--;)(i=r[l])&&(e[l]=!(t[l]=i))}):function(e,a,i){return t[0]=e,o(t,null,i,n),t[0]=null,!n.pop()}}),has:a(function(e){return function(n){return 0<t(e,n).length}}),contains:a(function(e){return e=e.replace(J,ee),function(t){return-1<(t.textContent||t.innerText||de(t)).indexOf(e)}}),lang:a(function(e){return X.test(e||'')||t.error('unsupported lang: '+e),e=e.replace(J,ee).toLowerCase(),function(t){var n;do if(n=_e?t.lang:t.getAttribute('xml:lang')||t.getAttribute('lang'))return n=n.toLowerCase(),n===e||0===n.indexOf(e+'-');while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===be},focus:function(e){return e===fe.activeElement&&(!fe.hasFocus||fe.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return'input'===t&&!!e.checked||'option'===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(6>e.nodeType)return!1;return!0},parent:function(e){return!le.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return'input'===t&&'button'===e.type||'button'===t},text:function(e){var t;return'input'===e.nodeName.toLowerCase()&&'text'===e.type&&(null==(t=e.getAttribute('type'))||'text'===t.toLowerCase())},first:p(function(){return[0]}),last:p(function(e,t){return[t-1]}),eq:p(function(e,t,n){return[0>n?n+t:n]}),even:p(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:p(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:p(function(e,t,n){for(var a=0>n?n+t:n;0<=--a;)e.push(a);return e}),gt:p(function(e,t,n){for(var a=0>n?n+t:n;++a<t;)e.push(a);return e})}},le.pseudos.nth=le.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})le.pseudos[ie]=d(ie);for(ie in{submit:!0,reset:!0})le.pseudos[ie]=s(ie);return g.prototype=le.filters=le.pseudos,le.setFilters=new g,se=t.tokenize=function(e,n){var a=E[e+' '],o,i,r,l,d,s,c;if(a)return n?0:a.slice(0);for(d=e,s=[],c=le.preFilter;d;){for(l in(!o||(i=U.exec(d)))&&(i&&(d=d.slice(i[0].length)||d),s.push(r=[])),o=!1,(i=F.exec(d))&&(o=i.shift(),r.push({value:o,type:i[0].replace(O,' ')}),d=d.slice(o.length)),le.filter)(i=$[l].exec(d))&&(!c[l]||(i=c[l](i)))&&(o=i.shift(),r.push({value:o,type:l,matches:i}),d=d.slice(o.length));if(!o)break}return n?d.length:d?t.error(e):E(e,s).slice(0)},ce=t.compile=function(e,t){var n=[],a=[],o=z[e+' '],r;if(!o){for(t||(t=se(e)),r=t.length;r--;)o=x(t[r]),o[v]?n.push(o):a.push(o);o=z(e,w(a,n)),o.selector=e}return o},pe=t.select=function(e,t,n,a){var o='function'==typeof e&&e,r=!a&&se(e=o.selector||e),l,i,d,s,c;if(n=n||[],1===r.length){if(i=r[0]=r[0].slice(0),2<i.length&&'ID'===(d=i[0]).type&&9===t.nodeType&&_e&&le.relative[i[1].type]){if(t=(le.find.ID(d.matches[0].replace(J,ee),t)||[])[0],!t)return n;o&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(l=$.needsContext.test(e)?0:i.length;l--&&(d=i[l],!le.relative[s=d.type]);)if((c=le.find[s])&&(a=c(d.matches[0].replace(J,ee),Q.test(i[0].type)&&u(t.parentNode)||t))){if(i.splice(l,1),e=a.length&&h(i),!e)return L.apply(n,a),n;break}}return(o||ce(e,r))(a,t,!_e,n,!t||Q.test(e)&&u(t.parentNode)||t),n},re.sortStable=v.split('').sort(A).join('')===v,re.detectDuplicates=!!he,me(),re.sortDetached=o(function(e){return 1&e.compareDocumentPosition(fe.createElement('fieldset'))}),o(function(e){return e.innerHTML='<a href=\'#\'></a>','#'===e.firstChild.getAttribute('href')})||r('type|href|height|width',function(e,t,n){if(!n)return e.getAttribute(t,'type'===t.toLowerCase()?1:2)}),re.attributes&&o(function(e){return e.innerHTML='<input/>',e.firstChild.setAttribute('value',''),''===e.firstChild.getAttribute('value')})||r('value',function(e,t,n){if(!n&&'input'===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute('disabled')})||r(q,function(e,t,n){var a;if(!n)return!0===e[t]?t.toLowerCase():(a=e.getAttributeNode(t))&&a.specified?a.value:null}),t}(i);ye.find=Te,ye.expr=Te.selectors,ye.expr[':']=ye.expr.pseudos,ye.uniqueSort=ye.unique=Te.uniqueSort,ye.text=Te.getText,ye.isXMLDoc=Te.isXML,ye.contains=Te.contains,ye.escapeSelector=Te.escape;var ke=function(e,t,n){for(var a=[];(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(void 0!==n&&ye(e).is(n))break;a.push(e)}return a},Se=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ee=ye.expr.match.needsContext,ze=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ae=/^.[^:#\[\.,]*$/;ye.filter=function(e,t,n){var a=t[0];return n&&(e=':not('+e+')'),1===t.length&&1===a.nodeType?ye.find.matchesSelector(a,e)?[a]:[]:ye.find.matches(e,ye.grep(t,function(e){return 1===e.nodeType}))},ye.fn.extend({find:function(e){var t=this.length,n=this,a,o;if('string'!=typeof e)return this.pushStack(ye(e).filter(function(){for(a=0;a<t;a++)if(ye.contains(n[a],this))return!0}));for(o=this.pushStack([]),a=0;a<t;a++)ye.find(e,n[a],o);return 1<t?ye.uniqueSort(o):o},filter:function(e){return this.pushStack(c(this,e||[],!1))},not:function(e){return this.pushStack(c(this,e||[],!0))},is:function(e){return!!c(this,'string'==typeof e&&Ee.test(e)?ye(e):e||[],!1).length}});var Me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,De=ye.fn.init=function(e,t,n){var a,o;if(!e)return this;if(n=n||je,'string'==typeof e){if(a='<'===e[0]&&'>'===e[e.length-1]&&3<=e.length?[null,e,null]:Me.exec(e),a&&(a[1]||!t)){if(a[1]){if(t=t instanceof ye?t[0]:t,ye.merge(this,ye.parseHTML(a[1],t&&t.nodeType?t.ownerDocument||t:re,!0)),ze.test(a[1])&&ye.isPlainObject(t))for(a in t)ye.isFunction(this[a])?this[a](t[a]):this.attr(a,t[a]);return this}return o=re.getElementById(a[2]),o&&(this[0]=o,this.length=1),this}return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e)}return e.nodeType?(this[0]=e,this.length=1,this):ye.isFunction(e)?void 0===n.ready?e(ye):n.ready(e):ye.makeArray(e,this)},je;De.prototype=ye.fn,je=ye(re);var Ne=/^(?:parents|prev(?:Until|All))/,Le={children:!0,contents:!0,next:!0,prev:!0};ye.fn.extend({has:function(e){var t=ye(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ye.contains(this,t[e]))return!0})},closest:function(e,t){var n=0,a=this.length,o=[],i='string'!=typeof e&&ye(e),r;if(!Ee.test(e))for(;n<a;n++)for(r=this[n];r&&r!==t;r=r.parentNode)if(11>r.nodeType&&(i?-1<i.index(r):1===r.nodeType&&ye.find.matchesSelector(r,e))){o.push(r);break}return this.pushStack(1<o.length?ye.uniqueSort(o):o)},index:function(e){return e?'string'==typeof e?pe.call(ye(e),this[0]):pe.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ye.uniqueSort(ye.merge(this.get(),ye(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ye.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ke(e,'parentNode')},parentsUntil:function(e,t,n){return ke(e,'parentNode',n)},next:function(e){return p(e,'nextSibling')},prev:function(e){return p(e,'previousSibling')},nextAll:function(e){return ke(e,'nextSibling')},prevAll:function(e){return ke(e,'previousSibling')},nextUntil:function(e,t,n){return ke(e,'nextSibling',n)},prevUntil:function(e,t,n){return ke(e,'previousSibling',n)},siblings:function(e){return Se((e.parentNode||{}).firstChild,e)},children:function(e){return Se(e.firstChild)},contents:function(e){return s(e,'iframe')?e.contentDocument:(s(e,'template')&&(e=e.content||e),ye.merge([],e.childNodes))}},function(e,t){ye.fn[e]=function(n,a){var o=ye.map(this,t,n);return'Until'!==e.slice(-5)&&(a=n),a&&'string'==typeof a&&(o=ye.filter(a,o)),1<this.length&&(!Le[e]&&ye.uniqueSort(o),Ne.test(e)&&o.reverse()),this.pushStack(o)}});var Pe=/[^\x20\t\r\n\f]+/g;ye.Callbacks=function(e){e='string'==typeof e?u(e):ye.extend({},e);var t=[],n=[],a=-1,o=function(){for(s=s||e.once,d=r=!0;n.length;a=-1)for(l=n.shift();++a<t.length;)!1===t[a].apply(l[0],l[1])&&e.stopOnFalse&&(a=t.length,l=!1);e.memory||(l=!1),r=!1,s&&(l?t=[]:t='')},i={add:function(){return t&&(l&&!r&&(a=t.length-1,n.push(l)),function n(a){ye.each(a,function(a,o){ye.isFunction(o)?(!e.unique||!i.has(o))&&t.push(o):o&&o.length&&'string'!==ye.type(o)&&n(o)})}(arguments),l&&!r&&o()),this},remove:function(){return ye.each(arguments,function(e,n){for(var o;-1<(o=ye.inArray(n,t,o));)t.splice(o,1),o<=a&&a--}),this},has:function(e){return e?-1<ye.inArray(e,t):0<t.length},empty:function(){return t&&(t=[]),this},disable:function(){return s=n=[],t=l='',this},disabled:function(){return!t},lock:function(){return s=n=[],l||r||(t=l=''),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=t||[],t=[e,t.slice?t.slice():t],n.push(t),!r&&o()),this},fire:function(){return i.fireWith(this,arguments),this},fired:function(){return!!d}},r,l,d,s;return i},ye.extend({Deferred:function(e){var t=[['notify','progress',ye.Callbacks('memory'),ye.Callbacks('memory'),2],['resolve','done',ye.Callbacks('once memory'),ye.Callbacks('once memory'),0,'resolved'],['reject','fail',ye.Callbacks('once memory'),ye.Callbacks('once memory'),1,'rejected']],n='pending',a={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return ye.Deferred(function(n){ye.each(t,function(t,a){var i=ye.isFunction(e[a[4]])&&e[a[4]];o[a[1]](function(){var e=i&&i.apply(this,arguments);e&&ye.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[a[0]+'With'](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,n,a){function o(t,n,a,e){return function(){var l=this,d=arguments,s=function(){var i,s;if(!(t<r)){if(i=a.apply(l,d),i===n.promise())throw new TypeError('Thenable self-resolution');s=i&&('object'==typeof i||'function'==typeof i)&&i.then,ye.isFunction(s)?e?s.call(i,o(r,n,g,e),o(r,n,h,e)):(r++,s.call(i,o(r,n,g,e),o(r,n,h,e),o(r,n,g,n.notifyWith))):(a!==g&&(l=void 0,d=[i]),(e||n.resolveWith)(l,d))}},c=e?s:function(){try{s()}catch(o){ye.Deferred.exceptionHook&&ye.Deferred.exceptionHook(o,c.stackTrace),t+1>=r&&(a!==h&&(l=void 0,d=[o]),n.rejectWith(l,d))}};t?c():(ye.Deferred.getStackHook&&(c.stackTrace=ye.Deferred.getStackHook()),i.setTimeout(c))}}var r=0;return ye.Deferred(function(i){t[0][3].add(o(0,i,ye.isFunction(a)?a:g,i.notifyWith)),t[1][3].add(o(0,i,ye.isFunction(e)?e:g)),t[2][3].add(o(0,i,ye.isFunction(n)?n:h))}).promise()},promise:function(e){return null==e?a:ye.extend(e,a)}},o={};return ye.each(t,function(e,i){var r=i[2],l=i[5];a[i[1]]=r.add,l&&r.add(function(){n=l},t[3-e][2].disable,t[0][2].lock),r.add(i[3].fire),o[i[0]]=function(){return o[i[0]+'With'](this===o?void 0:this,arguments),this},o[i[0]+'With']=r.fireWith}),a.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,a=Array(n),o=de.call(arguments),r=ye.Deferred(),i=function(e){return function(n){a[e]=this,o[e]=1<arguments.length?de.call(arguments):n,--t||r.resolveWith(a,o)}};if(1>=t&&(m(e,r.done(i(n)).resolve,r.reject,!t),'pending'===r.state()||ye.isFunction(o[n]&&o[n].then)))return r.then();for(;n--;)m(o[n],i(n),r.reject);return r.promise()}});var Re=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ye.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&Re.test(e.name)&&i.console.warn('jQuery.Deferred exception: '+e.message,e.stack,t)},ye.readyException=function(e){i.setTimeout(function(){throw e})};var qe=ye.Deferred();ye.fn.ready=function(e){return qe.then(e).catch(function(e){ye.readyException(e)}),this},ye.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?! --ye.readyWait:!ye.isReady)&&(ye.isReady=!0,!0!==e&&0<--ye.readyWait||qe.resolveWith(re,[ye]))}}),ye.ready.then=qe.then,'complete'!==re.readyState&&('loading'===re.readyState||re.documentElement.doScroll)?(re.addEventListener('DOMContentLoaded',f),i.addEventListener('load',f)):i.setTimeout(ye.ready);var Ie=function(e,t,n,a,o,r,l){var d=0,i=e.length,s=null==n;if('object'===ye.type(n))for(d in o=!0,n)Ie(e,t,d,n[d],!0,r,l);else if(void 0!==a&&(o=!0,ye.isFunction(a)||(l=!0),s&&(l?(t.call(e,a),t=null):(s=t,t=function(e,t,n){return s.call(ye(e),n)})),t))for(;d<i;d++)t(e[d],n,l?a:a.call(e[d],d,t(e[d],n)));return o?e:s?t.call(e):i?t(e[0],n):r},He=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};b.uid=1,b.prototype={cache:function(e){var t=e[this.expando];return t||(t={},He(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a=this.cache(e),o;if('string'==typeof t)a[ye.camelCase(t)]=n;else for(o in t)a[ye.camelCase(o)]=t[o];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][ye.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&'string'==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0===n?t:n)},remove:function(e,t){var n=e[this.expando],a;if(void 0!==n){if(void 0!==t)for(Array.isArray(t)?t=t.map(ye.camelCase):(t=ye.camelCase(t),t=(t in n)?[t]:t.match(Pe)||[]),a=t.length;a--;)delete n[t[a]];(void 0===t||ye.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ye.isEmptyObject(t)}};var Be=new b,Oe=new b,Ue=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Fe=/[A-Z]/g;ye.extend({hasData:function(e){return Oe.hasData(e)||Be.hasData(e)},data:function(e,t,n){return Oe.access(e,t,n)},removeData:function(e,t){Oe.remove(e,t)},_data:function(e,t,n){return Be.access(e,t,n)},_removeData:function(e,t){Be.remove(e,t)}}),ye.fn.extend({data:function(e,t){var n=this[0],a=n&&n.attributes,o,i,r;if(void 0===e){if(this.length&&(r=Oe.get(n),1===n.nodeType&&!Be.get(n,'hasDataAttrs'))){for(o=a.length;o--;)a[o]&&(i=a[o].name,0===i.indexOf('data-')&&(i=ye.camelCase(i.slice(5)),y(n,i,r[i])));Be.set(n,'hasDataAttrs',!0)}return r}return'object'==typeof e?this.each(function(){Oe.set(this,e)}):Ie(this,function(t){var a;return n&&void 0===t?(a=Oe.get(n,e),void 0!==a)?a:(a=y(n,e),void 0===a?void 0:a):void this.each(function(){Oe.set(this,e,t)})},null,t,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){Oe.remove(this,e)})}}),ye.extend({queue:function(e,t,n){var a;if(e)return t=(t||'fx')+'queue',a=Be.get(e,t),n&&(!a||Array.isArray(n)?a=Be.access(e,t,ye.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||'fx';var n=ye.queue(e,t),a=n.length,o=n.shift(),i=ye._queueHooks(e,t);'inprogress'===o&&(o=n.shift(),a--),o&&('fx'===t&&n.unshift('inprogress'),delete i.stop,o.call(e,function(){ye.dequeue(e,t)},i)),!a&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+'queueHooks';return Be.get(e,n)||Be.access(e,n,{empty:ye.Callbacks('once memory').add(function(){Be.remove(e,[t+'queue',n])})})}}),ye.fn.extend({queue:function(e,t){var n=2;return'string'!=typeof e&&(t=e,e='fx',n--),arguments.length<n?ye.queue(this[0],e):void 0===t?this:this.each(function(){var n=ye.queue(this,e,t);ye._queueHooks(this,e),'fx'===e&&'inprogress'!==n[0]&&ye.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ye.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||'fx',[])},promise:function(e,t){var n=1,a=ye.Deferred(),o=this,r=this.length,i=function(){--n||a.resolveWith(o,[o])},l;for('string'!=typeof e&&(t=e,e=void 0),e=e||'fx';r--;)l=Be.get(o[r],e+'queueHooks'),l&&l.empty&&(n++,l.empty.add(i));return i(),a.promise(t)}});var We=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ye=new RegExp('^(?:([+-])=|)('+We+')([a-z%]*)$','i'),Xe=['Top','Right','Bottom','Left'],$e=function(e,t){return e=t||e,'none'===e.style.display||''===e.style.display&&ye.contains(e.ownerDocument,e)&&'none'===ye.css(e,'display')},Ve=function(e,t,n,a){var o={},i,r;for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.apply(e,a||[]),t)e.style[r]=o[r];return i},Ke={};ye.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return'boolean'==typeof e?e?this.show():this.hide():this.each(function(){$e(this)?ye(this).show():ye(this).hide()})}});var Ge=/^(?:checkbox|radio)$/i,Ze=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Qe=/^$|\/(?:java|ecma)script/i,Je={option:[1,'<select multiple=\'multiple\'>','</select>'],thead:[1,'<table>','</table>'],col:[2,'<table><colgroup>','</colgroup></table>'],tr:[2,'<table><tbody>','</tbody></table>'],td:[3,'<table><tbody><tr>','</tr></tbody></table>'],_default:[0,'','']};Je.optgroup=Je.option,Je.tbody=Je.tfoot=Je.colgroup=Je.caption=Je.thead,Je.th=Je.td;var et=/<|&#?\w+;/;(function(){var e=re.createDocumentFragment(),t=e.appendChild(re.createElement('div')),n=re.createElement('input');n.setAttribute('type','radio'),n.setAttribute('checked','checked'),n.setAttribute('name','t'),t.appendChild(n),be.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML='<textarea>x</textarea>',be.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue})();var tt=re.documentElement,nt=/^key/,at=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ot=/^([^.]*)(?:\.(.+)|)/;ye.event={global:{},add:function(n,e,a,o,i){var r=Be.get(n),l,d,s,c,p,t,u,g,h,m,f;if(r)for(a.handler&&(l=a,a=l.handler,i=l.selector),i&&ye.find.matchesSelector(tt,i),a.guid||(a.guid=ye.guid++),(c=r.events)||(c=r.events={}),(d=r.handle)||(d=r.handle=function(t){return'undefined'!=typeof ye&&ye.event.triggered!==t.type?ye.event.dispatch.apply(n,arguments):void 0}),e=(e||'').match(Pe)||[''],p=e.length;p--;)(s=ot.exec(e[p])||[],h=f=s[1],m=(s[2]||'').split('.').sort(),!!h)&&(u=ye.event.special[h]||{},h=(i?u.delegateType:u.bindType)||h,u=ye.event.special[h]||{},t=ye.extend({type:h,origType:f,data:o,handler:a,guid:a.guid,selector:i,needsContext:i&&ye.expr.match.needsContext.test(i),namespace:m.join('.')},l),(g=c[h])||(g=c[h]=[],g.delegateCount=0,(!u.setup||!1===u.setup.call(n,o,m,d))&&n.addEventListener&&n.addEventListener(h,d)),u.add&&(u.add.call(n,t),!t.handler.guid&&(t.handler.guid=a.guid)),i?g.splice(g.delegateCount++,0,t):g.push(t),ye.event.global[h]=!0)},remove:function(e,n,a,o,i){var r=Be.hasData(e)&&Be.get(e),l,d,s,c,p,t,u,g,h,m,f;if(r&&(c=r.events)){for(n=(n||'').match(Pe)||[''],p=n.length;p--;){if(s=ot.exec(n[p])||[],h=f=s[1],m=(s[2]||'').split('.').sort(),!h){for(h in c)ye.event.remove(e,h+n[p],a,o,!0);continue}for(u=ye.event.special[h]||{},h=(o?u.delegateType:u.bindType)||h,g=c[h]||[],s=s[2]&&new RegExp('(^|\\.)'+m.join('\\.(?:.*\\.|)')+'(\\.|$)'),d=l=g.length;l--;)t=g[l],(i||f===t.origType)&&(!a||a.guid===t.guid)&&(!s||s.test(t.namespace))&&(!o||o===t.selector||'**'===o&&t.selector)&&(g.splice(l,1),t.selector&&g.delegateCount--,u.remove&&u.remove.call(e,t));d&&!g.length&&((!u.teardown||!1===u.teardown.call(e,m,r.handle))&&ye.removeEvent(e,h,r.handle),delete c[h])}ye.isEmptyObject(c)&&Be.remove(e,'handle events')}},dispatch:function(e){var t=ye.event.fix(e),n=Array(arguments.length),a=(Be.get(this,'events')||{})[t.type]||[],o=ye.event.special[t.type]||{},r,i,l,d,s,c;for(n[0]=t,r=1;r<arguments.length;r++)n[r]=arguments[r];if(t.delegateTarget=this,!(o.preDispatch&&!1===o.preDispatch.call(this,t))){for(c=ye.event.handlers.call(this,t,a),r=0;(d=c[r++])&&!t.isPropagationStopped();)for(t.currentTarget=d.elem,i=0;(s=d.handlers[i++])&&!t.isImmediatePropagationStopped();)(!t.rnamespace||t.rnamespace.test(s.namespace))&&(t.handleObj=s,t.data=s.data,l=((ye.event.special[s.origType]||{}).handle||s.handler).apply(d.elem,n),void 0!==l&&!1===(t.result=l)&&(t.preventDefault(),t.stopPropagation()));return o.postDispatch&&o.postDispatch.call(this,t),t.result}},handlers:function(e,t){var n=[],a=t.delegateCount,o=e.target,r,i,l,d,s;if(a&&o.nodeType&&!('click'===e.type&&1<=e.button))for(;o!==this;o=o.parentNode||this)if(1===o.nodeType&&('click'!==e.type||!0!==o.disabled)){for(d=[],s={},r=0;r<a;r++)i=t[r],l=i.selector+' ',void 0===s[l]&&(s[l]=i.needsContext?-1<ye(l,this).index(o):ye.find(l,this,null,[o]).length),s[l]&&d.push(i);d.length&&n.push({elem:o,handlers:d})}return o=this,a<t.length&&n.push({elem:o,handlers:t.slice(a)}),n},addProp:function(e,t){Object.defineProperty(ye.Event.prototype,e,{enumerable:!0,configurable:!0,get:ye.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[ye.expando]?e:new ye.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==z()&&this.focus)return this.focus(),!1},delegateType:'focusin'},blur:{trigger:function(){if(this===z()&&this.blur)return this.blur(),!1},delegateType:'focusout'},click:{trigger:function(){if('checkbox'===this.type&&this.click&&s(this,'input'))return this.click(),!1},_default:function(e){return s(e.target,'a')}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ye.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ye.Event=function(e,t){return this instanceof ye.Event?void(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?S:E,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ye.extend(this,t),this.timeStamp=e&&e.timeStamp||ye.now(),this[ye.expando]=!0):new ye.Event(e,t)},ye.Event.prototype={constructor:ye.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=S,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=S,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=S,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},ye.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&nt.test(e.type)?null==e.charCode?e.keyCode:e.charCode:!e.which&&void 0!==t&&at.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},ye.event.addProp),ye.each({mouseenter:'mouseover',mouseleave:'mouseout',pointerenter:'pointerover',pointerleave:'pointerout'},function(e,t){ye.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n=this,a=e.relatedTarget,o=e.handleObj,i;return a&&(a===n||ye.contains(n,a))||(e.type=o.origType,i=o.handler.apply(this,arguments),e.type=t),i}}}),ye.fn.extend({on:function(e,t,n,a){return A(this,e,t,n,a)},one:function(e,t,n,a){return A(this,e,t,n,a,1)},off:function(e,t,n){var a,o;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,ye(e.delegateTarget).off(a.namespace?a.origType+'.'+a.namespace:a.origType,a.selector,a.handler),this;if('object'==typeof e){for(o in e)this.off(o,t,e[o]);return this}return(!1===t||'function'==typeof t)&&(n=t,t=void 0),!1===n&&(n=E),this.each(function(){ye.event.remove(this,e,n,t)})}});var it=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,rt=/<script|<style|<link/i,lt=/checked\s*(?:[^=]|=\s*.checked.)/i,dt=/^true\/(.*)/,st=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ye.extend({htmlPrefilter:function(e){return e.replace(it,'<$1></$2>')},clone:function(e,t,n){var a=e.cloneNode(!0),o=ye.contains(e.ownerDocument,e),r,i,l,d;if(!be.noCloneChecked&&(1===e.nodeType||11===e.nodeType)&&!ye.isXMLDoc(e))for(d=C(a),l=C(e),(r=0,i=l.length);r<i;r++)L(l[r],d[r]);if(t)if(n)for(l=l||C(e),d=d||C(a),(r=0,i=l.length);r<i;r++)N(l[r],d[r]);else N(e,a);return d=C(a,'script'),0<d.length&&T(d,!o&&C(e,'script')),a},cleanData:function(e){for(var t=ye.event.special,n=0,a,o,i;void 0!==(o=e[n]);n++)if(He(o)){if(a=o[Be.expando]){if(a.events)for(i in a.events)t[i]?ye.event.remove(o,i):ye.removeEvent(o,i,a.handle);o[Be.expando]=void 0}o[Oe.expando]&&(o[Oe.expando]=void 0)}}}),ye.fn.extend({detach:function(e){return R(this,e,!0)},remove:function(e){return R(this,e)},text:function(e){return Ie(this,function(e){return void 0===e?ye.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=M(this,e);t.appendChild(e)}})},prepend:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=M(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e=0,t;null!=(t=this[e]);e++)1===t.nodeType&&(ye.cleanData(C(t,!1)),t.textContent='');return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ye.clone(this,e,t)})},html:function(e){return Ie(this,function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if('string'==typeof e&&!rt.test(e)&&!Je[(Ze.exec(e)||['',''])[1].toLowerCase()]){e=ye.htmlPrefilter(e);try{for(;n<a;n++)t=this[n]||{},1===t.nodeType&&(ye.cleanData(C(t,!1)),t.innerHTML=e);t=0}catch(t){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return P(this,arguments,function(t){var n=this.parentNode;0>ye.inArray(this,e)&&(ye.cleanData(C(this)),n&&n.replaceChild(t,this))},e)}}),ye.each({appendTo:'append',prependTo:'prepend',insertBefore:'before',insertAfter:'after',replaceAll:'replaceWith'},function(e,t){ye.fn[e]=function(e){for(var n=[],a=ye(e),o=a.length-1,r=0,i;r<=o;r++)i=r==o?this:this.clone(!0),ye(a[r])[t](i),ce.apply(n,i.get());return this.pushStack(n)}});var ct=/^margin/,pt=new RegExp('^('+We+')(?!px)[a-z%]+$','i'),ut=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)};(function(){function e(){if(n){n.style.cssText='box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%',n.innerHTML='',tt.appendChild(t);var e=i.getComputedStyle(n);a='1%'!==e.top,l='2px'===e.marginLeft,o='4px'===e.width,n.style.marginRight='50%',r='4px'===e.marginRight,tt.removeChild(t),n=null}}var t=re.createElement('div'),n=re.createElement('div'),a,o,r,l;n.style&&(n.style.backgroundClip='content-box',n.cloneNode(!0).style.backgroundClip='',be.clearCloneStyle='content-box'===n.style.backgroundClip,t.style.cssText='border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute',t.appendChild(n),ye.extend(be,{pixelPosition:function(){return e(),a},boxSizingReliable:function(){return e(),o},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),l}}))})();var gt=/^(none|table(?!-c[ea]).+)/,ht=/^--/,mt={position:'absolute',visibility:'hidden',display:'block'},ft={letterSpacing:'0',fontWeight:'400'},bt=['Webkit','Moz','ms'],_t=re.createElement('div').style;ye.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=q(e,'opacity');return''===n?'1':n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:'cssFloat'},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o=ye.camelCase(t),i=ht.test(t),r=e.style,l,d,s;if(i||(t=B(o)),s=ye.cssHooks[t]||ye.cssHooks[o],void 0!==n){if(d=typeof n,'string'===d&&(l=Ye.exec(n))&&l[1]&&(n=x(e,t,l),d='number'),null==n||n!==n)return;'number'===d&&(n+=l&&l[3]||(ye.cssNumber[o]?'':'px')),be.clearCloneStyle||''!==n||0!==t.indexOf('background')||(r[t]='inherit'),s&&'set'in s&&void 0===(n=s.set(e,n,a))||(i?r.setProperty(t,n):r[t]=n)}else return s&&'get'in s&&void 0!==(l=s.get(e,!1,a))?l:r[t]}},css:function(e,t,n,a){var o=ye.camelCase(t),i=ht.test(t),r,l,d;return i||(t=B(o)),d=ye.cssHooks[t]||ye.cssHooks[o],d&&'get'in d&&(r=d.get(e,!0,n)),void 0===r&&(r=q(e,t,a)),'normal'===r&&t in ft&&(r=ft[t]),''===n||n?(l=parseFloat(r),!0===n||isFinite(l)?l||0:r):r}}),ye.each(['height','width'],function(e,t){ye.cssHooks[t]={get:function(e,n,a){if(n)return!gt.test(ye.css(e,'display'))||e.getClientRects().length&&e.getBoundingClientRect().width?F(e,t,a):Ve(e,mt,function(){return F(e,t,a)})},set:function(e,n,a){var o=a&&ut(e),i=a&&U(e,t,a,'border-box'===ye.css(e,'boxSizing',!1,o),o),r;return i&&(r=Ye.exec(n))&&'px'!==(r[3]||'px')&&(e.style[t]=n,n=ye.css(e,t)),O(e,n,i)}}}),ye.cssHooks.marginLeft=I(be.reliableMarginLeft,function(e,t){if(t)return(parseFloat(q(e,'marginLeft'))||e.getBoundingClientRect().left-Ve(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+'px'}),ye.each({margin:'',padding:'',border:'Width'},function(e,t){ye.cssHooks[e+t]={expand:function(n){for(var a=0,o={},i='string'==typeof n?n.split(' '):[n];4>a;a++)o[e+Xe[a]+t]=i[a]||i[a-2]||i[0];return o}},ct.test(e)||(ye.cssHooks[e+t].set=O)}),ye.fn.extend({css:function(e,t){return Ie(this,function(e,t,n){var a={},o=0,i,r;if(Array.isArray(t)){for(i=ut(e),r=t.length;o<r;o++)a[t[o]]=ye.css(e,t[o],!1,i);return a}return void 0===n?ye.css(e,t):ye.style(e,t,n)},e,t,1<arguments.length)}}),ye.Tween=W,W.prototype={constructor:W,init:function(e,t,n,a,o,i){this.elem=e,this.prop=n,this.easing=o||ye.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=i||(ye.cssNumber[n]?'':'px')},cur:function(){var e=W.propHooks[this.prop];return e&&e.get?e.get(this):W.propHooks._default.get(this)},run:function(e){var t=W.propHooks[this.prop],n;return this.pos=this.options.duration?n=ye.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):n=e,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),t&&t.set?t.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ye.css(e.elem,e.prop,''),t&&'auto'!==t?t:0)},set:function(e){ye.fx.step[e.prop]?ye.fx.step[e.prop](e):1===e.elem.nodeType&&(null!=e.elem.style[ye.cssProps[e.prop]]||ye.cssHooks[e.prop])?ye.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ye.easing={linear:function(e){return e},swing:function(e){return 0.5-Math.cos(e*Math.PI)/2},_default:'swing'},ye.fx=W.prototype.init,ye.fx.step={};var yt=/^(?:toggle|show|hide)$/,xt=/queueHooks$/,wt,vt;ye.Animation=ye.extend(G,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return x(n.elem,e,Ye.exec(t),n),n}]},tweener:function(e,t){ye.isFunction(e)?(t=e,e=['*']):e=e.match(Pe);for(var n=0,a=e.length,o;n<a;n++)o=e[n],G.tweeners[o]=G.tweeners[o]||[],G.tweeners[o].unshift(t)},prefilters:[function(e,t,n){var a=this,o={},i=e.style,r=e.nodeType&&$e(e),l=Be.get(e,'fxshow'),d,s,c,p,u,g,h,m;for(d in n.queue||(p=ye._queueHooks(e,'fx'),null==p.unqueued&&(p.unqueued=0,u=p.empty.fire,p.empty.fire=function(){p.unqueued||u()}),p.unqueued++,a.always(function(){a.always(function(){p.unqueued--,ye.queue(e,'fx').length||p.empty.fire()})})),t)if(s=t[d],yt.test(s)){if(delete t[d],c=c||'toggle'===s,s===(r?'hide':'show'))if('show'===s&&l&&void 0!==l[d])r=!0;else continue;o[d]=l&&l[d]||ye.style(e,d)}if(g=!ye.isEmptyObject(t),g||!ye.isEmptyObject(o))for(d in('width'in t||'height'in t)&&1===e.nodeType&&(n.overflow=[i.overflow,i.overflowX,i.overflowY],h=l&&l.display,null==h&&(h=Be.get(e,'display')),m=ye.css(e,'display'),'none'===m&&(h?m=h:(v([e],!0),h=e.style.display||h,m=ye.css(e,'display'),v([e]))),('inline'===m||'inline-block'===m&&null!=h)&&'none'===ye.css(e,'float')&&(!g&&(a.done(function(){i.display=h}),null==h&&(m=i.display,h='none'===m?'':m)),i.display='inline-block')),n.overflow&&(i.overflow='hidden',a.always(function(){i.overflow=n.overflow[0],i.overflowX=n.overflow[1],i.overflowY=n.overflow[2]})),g=!1,o)g||(l?'hidden'in l&&(r=l.hidden):l=Be.access(e,'fxshow',{display:h}),c&&(l.hidden=!r),r&&v([e],!0),a.done(function(){for(d in r||v([e]),Be.remove(e,'fxshow'),o)ye.style(e,d,o[d])})),g=V(r?l[d]:0,d,a),d in l||(l[d]=g.start,r&&(g.end=g.start,g.start=0))}],prefilter:function(e,t){t?G.prefilters.unshift(e):G.prefilters.push(e)}}),ye.speed=function(e,t,n){var a=e&&'object'==typeof e?ye.extend({},e):{complete:n||!n&&t||ye.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ye.isFunction(t)&&t};return ye.fx.off?a.duration=0:'number'!=typeof a.duration&&(a.duration in ye.fx.speeds?a.duration=ye.fx.speeds[a.duration]:a.duration=ye.fx.speeds._default),(null==a.queue||!0===a.queue)&&(a.queue='fx'),a.old=a.complete,a.complete=function(){ye.isFunction(a.old)&&a.old.call(this),a.queue&&ye.dequeue(this,a.queue)},a},ye.fn.extend({fadeTo:function(e,t,n,a){return this.filter($e).css('opacity',0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var o=ye.isEmptyObject(e),i=ye.speed(t,n,a),r=function(){var t=G(this,ye.extend({},e),i);(o||Be.get(this,'finish'))&&t.stop(!0)};return r.finish=r,o||!1===i.queue?this.each(r):this.queue(i.queue,r)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return'string'!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||'fx',[]),this.each(function(){var t=!0,o=null!=e&&e+'queueHooks',i=ye.timers,r=Be.get(this);if(o)r[o]&&r[o].stop&&a(r[o]);else for(o in r)r[o]&&r[o].stop&&xt.test(o)&&a(r[o]);for(o=i.length;o--;)i[o].elem===this&&(null==e||i[o].queue===e)&&(i[o].anim.stop(n),t=!1,i.splice(o,1));(t||!n)&&ye.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||'fx'),this.each(function(){var t=Be.get(this),n=t[e+'queue'],a=t[e+'queueHooks'],o=ye.timers,i=n?n.length:0,r;for(t.finish=!0,ye.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),r=o.length;r--;)o[r].elem===this&&o[r].queue===e&&(o[r].anim.stop(!0),o.splice(r,1));for(r=0;r<i;r++)n[r]&&n[r].finish&&n[r].finish.call(this);delete t.finish})}}),ye.each(['toggle','show','hide'],function(e,t){var n=ye.fn[t];ye.fn[t]=function(e,a,o){return null==e||'boolean'==typeof e?n.apply(this,arguments):this.animate($(t,!0),e,a,o)}}),ye.each({slideDown:$('show'),slideUp:$('hide'),slideToggle:$('toggle'),fadeIn:{opacity:'show'},fadeOut:{opacity:'hide'},fadeToggle:{opacity:'toggle'}},function(e,t){ye.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}}),ye.timers=[],ye.fx.tick=function(){var e=0,t=ye.timers,n;for(wt=ye.now();e<t.length;e++)n=t[e],n()||t[e]!==n||t.splice(e--,1);t.length||ye.fx.stop(),wt=void 0},ye.fx.timer=function(e){ye.timers.push(e),ye.fx.start()},ye.fx.interval=13,ye.fx.start=function(){vt||(vt=!0,Y())},ye.fx.stop=function(){vt=null},ye.fx.speeds={slow:600,fast:200,_default:400},ye.fn.delay=function(e,t){return e=ye.fx?ye.fx.speeds[e]||e:e,t=t||'fx',this.queue(t,function(t,n){var a=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(a)}})},function(){var e=re.createElement('input'),t=re.createElement('select'),n=t.appendChild(re.createElement('option'));e.type='checkbox',be.checkOn=''!==e.value,be.optSelected=n.selected,e=re.createElement('input'),e.value='t',e.type='radio',be.radioValue='t'===e.value}();var Ct=ye.expr.attrHandle,Tt;ye.fn.extend({attr:function(e,t){return Ie(this,ye.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){ye.removeAttr(this,e)})}}),ye.extend({attr:function(e,t,n){var a=e.nodeType,o,i;if(3!==a&&8!==a&&2!==a)return'undefined'==typeof e.getAttribute?ye.prop(e,t,n):(1===a&&ye.isXMLDoc(e)||(i=ye.attrHooks[t.toLowerCase()]||(ye.expr.match.bool.test(t)?Tt:void 0)),void 0!==n)?null===n?void ye.removeAttr(e,t):i&&'set'in i&&void 0!==(o=i.set(e,n,t))?o:(e.setAttribute(t,n+''),n):i&&'get'in i&&null!==(o=i.get(e,t))?o:(o=ye.find.attr(e,t),null==o?void 0:o)},attrHooks:{type:{set:function(e,t){if(!be.radioValue&&'radio'===t&&s(e,'input')){var n=e.value;return e.setAttribute('type',t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n=0,a=t&&t.match(Pe),o;if(a&&1===e.nodeType)for(;o=a[n++];)e.removeAttribute(o)}}),Tt={set:function(e,t,n){return!1===t?ye.removeAttr(e,n):e.setAttribute(n,n),n}},ye.each(ye.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Ct[t]||ye.find.attr;Ct[t]=function(e,t,a){var o=t.toLowerCase(),i,r;return a||(r=Ct[o],Ct[o]=i,i=null==n(e,t,a)?null:o,Ct[o]=r),i}});var kt=/^(?:input|select|textarea|button)$/i,St=/^(?:a|area)$/i;ye.fn.extend({prop:function(e,t){return Ie(this,ye.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[ye.propFix[e]||e]})}}),ye.extend({prop:function(e,t,n){var a=e.nodeType,o,i;if(3!==a&&8!==a&&2!==a)return 1===a&&ye.isXMLDoc(e)||(t=ye.propFix[t]||t,i=ye.propHooks[t]),void 0===n?i&&'get'in i&&null!==(o=i.get(e,t))?o:e[t]:i&&'set'in i&&void 0!==(o=i.set(e,n,t))?o:e[t]=n},propHooks:{tabIndex:{get:function(e){var t=ye.find.attr(e,'tabindex');return t?parseInt(t,10):kt.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:'htmlFor',class:'className'}}),be.optSelected||(ye.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ye.each(['tabIndex','readOnly','maxLength','cellSpacing','cellPadding','rowSpan','colSpan','useMap','frameBorder','contentEditable'],function(){ye.propFix[this.toLowerCase()]=this}),ye.fn.extend({addClass:function(e){var t=0,n,a,o,i,r,l,d;if(ye.isFunction(e))return this.each(function(t){ye(this).addClass(e.call(this,t,Q(this)))});if('string'==typeof e&&e)for(n=e.match(Pe)||[];a=this[t++];)if(i=Q(a),o=1===a.nodeType&&' '+Z(i)+' ',o){for(l=0;r=n[l++];)0>o.indexOf(' '+r+' ')&&(o+=r+' ');d=Z(o),i!==d&&a.setAttribute('class',d)}return this},removeClass:function(e){var t=0,n,a,o,i,r,l,d;if(ye.isFunction(e))return this.each(function(t){ye(this).removeClass(e.call(this,t,Q(this)))});if(!arguments.length)return this.attr('class','');if('string'==typeof e&&e)for(n=e.match(Pe)||[];a=this[t++];)if(i=Q(a),o=1===a.nodeType&&' '+Z(i)+' ',o){for(l=0;r=n[l++];)for(;-1<o.indexOf(' '+r+' ');)o=o.replace(' '+r+' ',' ');d=Z(o),i!==d&&a.setAttribute('class',d)}return this},toggleClass:function(e,t){var n=typeof e;return'boolean'==typeof t&&'string'==n?t?this.addClass(e):this.removeClass(e):ye.isFunction(e)?this.each(function(n){ye(this).toggleClass(e.call(this,n,Q(this),t),t)}):this.each(function(){var t,a,o,i;if('string'==n)for(a=0,o=ye(this),i=e.match(Pe)||[];t=i[a++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else(void 0===e||'boolean'==n)&&(t=Q(this),t&&Be.set(this,'__className__',t),this.setAttribute&&this.setAttribute('class',t||!1===e?'':Be.get(this,'__className__')||''))})},hasClass:function(e){var t=0,n,a;for(n=' '+e+' ';a=this[t++];)if(1===a.nodeType&&-1<(' '+Z(Q(a))+' ').indexOf(n))return!0;return!1}});var Et=/\r/g;ye.fn.extend({val:function(e){var t=this[0],n,a,o;return arguments.length?(o=ye.isFunction(e),this.each(function(t){var a;1!==this.nodeType||(a=o?e.call(this,t,ye(this).val()):e,null==a?a='':'number'==typeof a?a+='':Array.isArray(a)&&(a=ye.map(a,function(e){return null==e?'':e+''})),n=ye.valHooks[this.type]||ye.valHooks[this.nodeName.toLowerCase()],(!n||!('set'in n)||void 0===n.set(this,a,'value'))&&(this.value=a))})):t?(n=ye.valHooks[t.type]||ye.valHooks[t.nodeName.toLowerCase()],n&&'get'in n&&void 0!==(a=n.get(t,'value')))?a:(a=t.value,'string'==typeof a?a.replace(Et,''):null==a?'':a):void 0}}),ye.extend({valHooks:{option:{get:function(e){var t=ye.find.attr(e,'value');return null==t?Z(ye.text(e)):t}},select:{get:function(e){var t=e.options,n=e.selectedIndex,a='select-one'===e.type,o=a?null:[],r=a?n+1:t.length,l,d,c;for(c=0>n?r:a?n:0;c<r;c++)if(d=t[c],(d.selected||c===n)&&!d.disabled&&(!d.parentNode.disabled||!s(d.parentNode,'optgroup'))){if(l=ye(d).val(),a)return l;o.push(l)}return o},set:function(e,t){for(var n=e.options,a=ye.makeArray(t),o=n.length,i,r;o--;)r=n[o],(r.selected=-1<ye.inArray(ye.valHooks.option.get(r),a))&&(i=!0);return i||(e.selectedIndex=-1),a}}}}),ye.each(['radio','checkbox'],function(){ye.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<ye.inArray(ye(e).val(),t)}},be.checkOn||(ye.valHooks[this].get=function(e){return null===e.getAttribute('value')?'on':e.value})});var zt=/^(?:focusinfocus|focusoutblur)$/;ye.extend(ye.event,{trigger:function(e,t,n,a){var o=[n||re],r=he.call(e,'type')?e.type:e,l=he.call(e,'namespace')?e.namespace.split('.'):[],d,s,c,p,u,g,h;if((s=c=n=n||re,3!==n.nodeType&&8!==n.nodeType)&&!zt.test(r+ye.event.triggered)&&(-1<r.indexOf('.')&&(l=r.split('.'),r=l.shift(),l.sort()),u=0>r.indexOf(':')&&'on'+r,e=e[ye.expando]?e:new ye.Event(r,'object'==typeof e&&e),e.isTrigger=a?2:3,e.namespace=l.join('.'),e.rnamespace=e.namespace?new RegExp('(^|\\.)'+l.join('\\.(?:.*\\.|)')+'(\\.|$)'):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:ye.makeArray(t,[e]),h=ye.event.special[r]||{},a||!h.trigger||!1!==h.trigger.apply(n,t))){if(!a&&!h.noBubble&&!ye.isWindow(n)){for(p=h.delegateType||r,zt.test(p+r)||(s=s.parentNode);s;s=s.parentNode)o.push(s),c=s;c===(n.ownerDocument||re)&&o.push(c.defaultView||c.parentWindow||i)}for(d=0;(s=o[d++])&&!e.isPropagationStopped();)e.type=1<d?p:h.bindType||r,g=(Be.get(s,'events')||{})[e.type]&&Be.get(s,'handle'),g&&g.apply(s,t),g=u&&s[u],g&&g.apply&&He(s)&&(e.result=g.apply(s,t),!1===e.result&&e.preventDefault());return e.type=r,a||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(o.pop(),t)||!He(n)||!u||!ye.isFunction(n[r])||ye.isWindow(n)||(c=n[u],c&&(n[u]=null),ye.event.triggered=r,n[r](),ye.event.triggered=void 0,c&&(n[u]=c)),e.result}},simulate:function(t,n,a){var o=ye.extend(new ye.Event,a,{type:t,isSimulated:!0});ye.event.trigger(o,null,n)}}),ye.fn.extend({trigger:function(e,t){return this.each(function(){ye.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ye.event.trigger(e,t,n,!0)}}),ye.each(['blur','focus','focusin','focusout','resize','scroll','click','dblclick','mousedown','mouseup','mousemove','mouseover','mouseout','mouseenter','mouseleave','change','select','submit','keydown','keypress','keyup','contextmenu'],function(e,t){ye.fn[t]=function(e,n){return 0<arguments.length?this.on(t,null,e,n):this.trigger(t)}}),ye.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),be.focusin='onfocusin'in i,be.focusin||ye.each({focus:'focusin',blur:'focusout'},function(e,t){var n=function(e){ye.event.simulate(t,e.target,ye.event.fix(e))};ye.event.special[t]={setup:function(){var a=this.ownerDocument||this,o=Be.access(a,t);o||a.addEventListener(e,n,!0),Be.access(a,t,(o||0)+1)},teardown:function(){var a=this.ownerDocument||this,o=Be.access(a,t)-1;o?Be.access(a,t,o):(a.removeEventListener(e,n,!0),Be.remove(a,t))}}});var At=i.location,Mt=ye.now(),Dt=/\?/;ye.parseXML=function(e){var t;if(!e||'string'!=typeof e)return null;try{t=new i.DOMParser().parseFromString(e,'text/xml')}catch(n){t=void 0}return(!t||t.getElementsByTagName('parsererror').length)&&ye.error('Invalid XML: '+e),t};var jt=/\[\]$/,Nt=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;ye.param=function(e,t){var n=[],a=function(e,t){var a=ye.isFunction(t)?t():t;n[n.length]=encodeURIComponent(e)+'='+encodeURIComponent(null==a?'':a)},o;if(Array.isArray(e)||e.jquery&&!ye.isPlainObject(e))ye.each(e,function(){a(this.name,this.value)});else for(o in e)J(o,e[o],t,a);return n.join('&')},ye.fn.extend({serialize:function(){return ye.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ye.prop(this,'elements');return e?ye.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ye(this).is(':disabled')&&Pt.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!Ge.test(e))}).map(function(e,t){var n=ye(this).val();return null==n?null:Array.isArray(n)?ye.map(n,function(e){return{name:t.name,value:e.replace(Nt,'\r\n')}}):{name:t.name,value:n.replace(Nt,'\r\n')}}).get()}});var Rt=/%20/g,qt=/#.*$/,It=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/mg,Bt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ot=/^(?:GET|HEAD)$/,Ut=/^\/\//,Ft={},Wt={},Yt='*/'.concat('*'),Xt=re.createElement('a');Xt.href=At.href,ye.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:'GET',isLocal:Bt.test(At.protocol),global:!0,processData:!0,async:!0,contentType:'application/x-www-form-urlencoded; charset=UTF-8',accepts:{"*":Yt,text:'text/plain',html:'text/html',xml:'application/xml, text/xml',json:'application/json, text/javascript'},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:'responseXML',text:'responseText',json:'responseJSON'},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ye.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?ne(ne(e,ye.ajaxSettings),t):ne(ye.ajaxSettings,e)},ajaxPrefilter:ee(Ft),ajaxTransport:ee(Wt),ajax:function(e,t){function n(e,t,n,c){var p=t,u,b,y,v,C;x||(x=!0,_&&i.clearTimeout(_),h=void 0,f=c||'',g.readyState=0<e?4:0,u=200<=e&&300>e||304===e,n&&(v=ae(a,g,n)),v=oe(a,v,g,u),u?(a.ifModified&&(C=g.getResponseHeader('Last-Modified'),C&&(ye.lastModified[m]=C),C=g.getResponseHeader('etag'),C&&(ye.etag[m]=C)),204===e||'HEAD'===a.type?p='nocontent':304===e?p='notmodified':(p=v.state,b=v.data,y=v.error,u=!y)):(y=p,(e||!p)&&(p='error',0>e&&(e=0))),g.status=e,g.statusText=(t||p)+'',u?l.resolveWith(o,[b,p,g]):l.rejectWith(o,[g,p,y]),g.statusCode(s),s=void 0,w&&r.trigger(u?'ajaxSuccess':'ajaxError',[g,a,u?b:y]),d.fireWith(o,[g,p]),w&&(r.trigger('ajaxComplete',[g,a]),! --ye.active&&ye.event.trigger('ajaxStop')))}'object'==typeof e&&(t=e,e=void 0),t=t||{};var a=ye.ajaxSetup({},t),o=a.context||a,r=a.context&&(o.nodeType||o.jquery)?ye(o):ye.event,l=ye.Deferred(),d=ye.Callbacks('once memory'),s=a.statusCode||{},c={},p={},u='canceled',g={readyState:0,getResponseHeader:function(e){var t;if(x){if(!b)for(b={};t=Ht.exec(f);)b[t[1].toLowerCase()]=t[2];t=b[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return x?f:null},setRequestHeader:function(e,t){return null==x&&(e=p[e.toLowerCase()]=p[e.toLowerCase()]||e,c[e]=t),this},overrideMimeType:function(e){return null==x&&(a.mimeType=e),this},statusCode:function(e){if(e)if(x)g.always(e[g.status]);else for(var t in e)s[t]=[s[t],e[t]];return this},abort:function(e){var t=e||u;return h&&h.abort(t),n(0,t),this}},h,m,f,b,_,y,x,w,v,C;if(l.promise(g),a.url=((e||a.url||At.href)+'').replace(Ut,At.protocol+'//'),a.type=t.method||t.type||a.method||a.type,a.dataTypes=(a.dataType||'*').toLowerCase().match(Pe)||[''],null==a.crossDomain){y=re.createElement('a');try{y.href=a.url,y.href=y.href,a.crossDomain=Xt.protocol+'//'+Xt.host!=y.protocol+'//'+y.host}catch(t){a.crossDomain=!0}}if(a.data&&a.processData&&'string'!=typeof a.data&&(a.data=ye.param(a.data,a.traditional)),te(Ft,a,t,g),x)return g;for(v in w=ye.event&&a.global,w&&0==ye.active++&&ye.event.trigger('ajaxStart'),a.type=a.type.toUpperCase(),a.hasContent=!Ot.test(a.type),m=a.url.replace(qt,''),a.hasContent?a.data&&a.processData&&0===(a.contentType||'').indexOf('application/x-www-form-urlencoded')&&(a.data=a.data.replace(Rt,'+')):(C=a.url.slice(m.length),a.data&&(m+=(Dt.test(m)?'&':'?')+a.data,delete a.data),!1===a.cache&&(m=m.replace(It,'$1'),C=(Dt.test(m)?'&':'?')+'_='+Mt++ +C),a.url=m+C),a.ifModified&&(ye.lastModified[m]&&g.setRequestHeader('If-Modified-Since',ye.lastModified[m]),ye.etag[m]&&g.setRequestHeader('If-None-Match',ye.etag[m])),(a.data&&a.hasContent&&!1!==a.contentType||t.contentType)&&g.setRequestHeader('Content-Type',a.contentType),g.setRequestHeader('Accept',a.dataTypes[0]&&a.accepts[a.dataTypes[0]]?a.accepts[a.dataTypes[0]]+('*'===a.dataTypes[0]?'':', '+Yt+'; q=0.01'):a.accepts['*']),a.headers)g.setRequestHeader(v,a.headers[v]);if(a.beforeSend&&(!1===a.beforeSend.call(o,g,a)||x))return g.abort();if(u='abort',d.add(a.complete),g.done(a.success),g.fail(a.error),h=te(Wt,a,t,g),!h)n(-1,'No Transport');else{if(g.readyState=1,w&&r.trigger('ajaxSend',[g,a]),x)return g;a.async&&0<a.timeout&&(_=i.setTimeout(function(){g.abort('timeout')},a.timeout));try{x=!1,h.send(c,n)}catch(t){if(x)throw t;n(-1,t)}}return g},getJSON:function(e,t,n){return ye.get(e,t,n,'json')},getScript:function(e,t){return ye.get(e,void 0,t,'script')}}),ye.each(['get','post'],function(e,t){ye[t]=function(e,n,a,o){return ye.isFunction(n)&&(o=o||a,a=n,n=void 0),ye.ajax(ye.extend({url:e,type:t,dataType:o,data:n,success:a},ye.isPlainObject(e)&&e))}}),ye._evalUrl=function(e){return ye.ajax({url:e,type:'GET',dataType:'script',cache:!0,async:!1,global:!1,throws:!0})},ye.fn.extend({wrapAll:function(e){var t;return this[0]&&(ye.isFunction(e)&&(e=e.call(this[0])),t=ye(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ye.isFunction(e)?this.each(function(t){ye(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ye(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ye.isFunction(e);return this.each(function(n){ye(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not('body').each(function(){ye(this).replaceWith(this.childNodes)}),this}}),ye.expr.pseudos.hidden=function(e){return!ye.expr.pseudos.visible(e)},ye.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ye.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var $t={0:200,1223:204},Vt=ye.ajaxSettings.xhr();be.cors=!!Vt&&'withCredentials'in Vt,be.ajax=Vt=!!Vt,ye.ajaxTransport(function(e){var t,n;if(be.cors||Vt&&!e.crossDomain)return{send:function(a,o){var r=e.xhr(),l;if(r.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(l in e.xhrFields)r[l]=e.xhrFields[l];for(l in e.mimeType&&r.overrideMimeType&&r.overrideMimeType(e.mimeType),e.crossDomain||a['X-Requested-With']||(a['X-Requested-With']='XMLHttpRequest'),a)r.setRequestHeader(l,a[l]);t=function(e){return function(){t&&(t=n=r.onload=r.onerror=r.onabort=r.onreadystatechange=null,'abort'===e?r.abort():'error'===e?'number'==typeof r.status?o(r.status,r.statusText):o(0,'error'):o($t[r.status]||r.status,r.statusText,'text'!==(r.responseType||'text')||'string'!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=t(),n=r.onerror=t('error'),void 0===r.onabort?r.onreadystatechange=function(){4===r.readyState&&i.setTimeout(function(){t&&n()})}:r.onabort=n,t=t('abort');try{r.send(e.hasContent&&e.data||null)}catch(n){if(t)throw n}},abort:function(){t&&t()}}}),ye.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ye.ajaxSetup({accepts:{script:'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript'},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ye.globalEval(e),e}}}),ye.ajaxPrefilter('script',function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type='GET')}),ye.ajaxTransport('script',function(e){if(e.crossDomain){var t,n;return{send:function(a,o){t=ye('<script>').prop({charset:e.scriptCharset,src:e.url}).on('load error',n=function(e){t.remove(),n=null,e&&o('error'===e.type?404:200,e.type)}),re.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Kt=[],Gt=/(=)\?(?=&|$)|\?\?/;ye.ajaxSetup({jsonp:'callback',jsonpCallback:function(){var e=Kt.pop()||ye.expando+'_'+Mt++;return this[e]=!0,e}}),ye.ajaxPrefilter('json jsonp',function(e,t,n){var a=!1!==e.jsonp&&(Gt.test(e.url)?'url':'string'==typeof e.data&&0===(e.contentType||'').indexOf('application/x-www-form-urlencoded')&&Gt.test(e.data)&&'data'),o,r,l;if(a||'jsonp'===e.dataTypes[0])return o=e.jsonpCallback=ye.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Gt,'$1'+o):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?'&':'?')+e.jsonp+'='+o),e.converters['script json']=function(){return l||ye.error(o+' was not called'),l[0]},e.dataTypes[0]='json',r=i[o],i[o]=function(){l=arguments},n.always(function(){void 0===r?ye(i).removeProp(o):i[o]=r,e[o]&&(e.jsonpCallback=t.jsonpCallback,Kt.push(o)),l&&ye.isFunction(r)&&r(l[0]),l=r=void 0}),'script'}),be.createHTMLDocument=function(){var e=re.implementation.createHTMLDocument('').body;return e.innerHTML='<form></form><form></form>',2===e.childNodes.length}(),ye.parseHTML=function(e,t,n){if('string'!=typeof e)return[];'boolean'==typeof t&&(n=t,t=!1);var a,o,i;return(t||(be.createHTMLDocument?(t=re.implementation.createHTMLDocument(''),a=t.createElement('base'),a.href=re.location.href,t.head.appendChild(a)):t=re),o=ze.exec(e),i=!n&&[],o)?[t.createElement(o[1])]:(o=k([e],t,i),i&&i.length&&ye(i).remove(),ye.merge([],o.childNodes))},ye.fn.load=function(e,t,n){var a=this,o=e.indexOf(' '),i,r,l;return-1<o&&(i=Z(e.slice(o)),e=e.slice(0,o)),ye.isFunction(t)?(n=t,t=void 0):t&&'object'==typeof t&&(r='POST'),0<a.length&&ye.ajax({url:e,type:r||'GET',dataType:'html',data:t}).done(function(e){l=arguments,a.html(i?ye('<div>').append(ye.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,l||[e.responseText,t,e])})}),this},ye.each(['ajaxStart','ajaxStop','ajaxComplete','ajaxError','ajaxSuccess','ajaxSend'],function(e,t){ye.fn[t]=function(e){return this.on(t,e)}}),ye.expr.pseudos.animated=function(e){return ye.grep(ye.timers,function(t){return e===t.elem}).length},ye.offset={setOffset:function(e,t,n){var a=ye.css(e,'position'),o=ye(e),i={},r,l,d,s,c,p,u;'static'===a&&(e.style.position='relative'),c=o.offset(),d=ye.css(e,'top'),p=ye.css(e,'left'),u=('absolute'===a||'fixed'===a)&&-1<(d+p).indexOf('auto'),u?(r=o.position(),s=r.top,l=r.left):(s=parseFloat(d)||0,l=parseFloat(p)||0),ye.isFunction(t)&&(t=t.call(e,n,ye.extend({},c))),null!=t.top&&(i.top=t.top-c.top+s),null!=t.left&&(i.left=t.left-c.left+l),'using'in t?t.using.call(e,i):o.css(i)}},ye.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ye.offset.setOffset(this,e,t)});var t=this[0],n,a,o,i;if(t)return t.getClientRects().length?(o=t.getBoundingClientRect(),n=t.ownerDocument,a=n.documentElement,i=n.defaultView,{top:o.top+i.pageYOffset-a.clientTop,left:o.left+i.pageXOffset-a.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e=this[0],t={top:0,left:0},n,a;return'fixed'===ye.css(e,'position')?a=e.getBoundingClientRect():(n=this.offsetParent(),a=this.offset(),!s(n[0],'html')&&(t=n.offset()),t={top:t.top+ye.css(n[0],'borderTopWidth',!0),left:t.left+ye.css(n[0],'borderLeftWidth',!0)}),{top:a.top-t.top-ye.css(e,'marginTop',!0),left:a.left-t.left-ye.css(e,'marginLeft',!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&'static'===ye.css(e,'position');)e=e.offsetParent;return e||tt})}}),ye.each({scrollLeft:'pageXOffset',scrollTop:'pageYOffset'},function(e,t){var n='pageYOffset'===t;ye.fn[e]=function(a){return Ie(this,function(e,a,o){var i;return ye.isWindow(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o?i?i[t]:e[a]:void(i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[a]=o)},e,a,arguments.length)}}),ye.each(['top','left'],function(e,t){ye.cssHooks[t]=I(be.pixelPosition,function(e,n){if(n)return n=q(e,t),pt.test(n)?ye(e).position()[t]+'px':n})}),ye.each({Height:'height',Width:'width'},function(e,t){ye.each({padding:'inner'+e,content:t,"":'outer'+e},function(a,o){ye.fn[o]=function(i,r){var l=arguments.length&&(a||'boolean'!=typeof i),d=a||(!0===i||!0===r?'margin':'border');return Ie(this,function(t,a,i){var r;return ye.isWindow(t)?0===o.indexOf('outer')?t['inner'+e]:t.document.documentElement['client'+e]:9===t.nodeType?(r=t.documentElement,n(t.body['scroll'+e],r['scroll'+e],t.body['offset'+e],r['offset'+e],r['client'+e])):void 0===i?ye.css(t,a,d):ye.style(t,a,i,d)},t,l?i:void 0,l)}})}),ye.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,'**'):this.off(t,e||'**',n)}}),ye.holdReady=function(e){e?ye.readyWait++:ye.ready(!0)},ye.isArray=Array.isArray,ye.parseJSON=JSON.parse,ye.nodeName=s,a=[],o=function(){return ye}.apply(t,a),!(void 0!==o&&(e.exports=o));var Zt=i.jQuery,Qt=i.$;return ye.noConflict=function(e){return i.$===ye&&(i.$=Qt),e&&i.jQuery===ye&&(i.jQuery=Zt),ye},r||(i.jQuery=i.$=ye),ye})},function(e){function t(e,t){var a=e[1]||'',o=e[3];if(!o)return a;if(t&&'function'==typeof btoa){var i=n(o),r=o.sources.map(function(e){return'/*# sourceURL='+o.sourceRoot+e+' */'});return[a].concat(r).concat([i]).join('\n')}return[a].join('\n')}function n(e){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e))));return'/*# '+('sourceMappingURL=data:application/json;charset=utf-8;base64,'+t)+' */'}e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var a=t(n,e);return n[2]?'@media '+n[2]+'{'+a+'}':a}).join('')},n.i=function(e,t){'string'==typeof e&&(e=[[null,e,'']]);for(var a={},o=0,i;o<this.length;o++)i=this[o][0],'number'==typeof i&&(a[i]=!0);for(o=0;o<e.length;o++){var r=e[o];'number'==typeof r[0]&&a[r[0]]||(t&&!r[2]?r[2]=t:t&&(r[2]='('+r[2]+') and ('+t+')'),n.push(r))}},n}},function(e,t,n){function a(e,t){for(var n=0;n<e.length;n++){var a=e[n],o=h[a.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](a.parts[i]);for(;i<a.parts.length;i++)o.parts.push(c(a.parts[i],t))}else{for(var r=[],i=0;i<a.parts.length;i++)r.push(c(a.parts[i],t));h[a.id]={id:a.id,refs:1,parts:r}}}}function o(e,t){for(var n=[],a={},o=0;o<e.length;o++){var i=e[o],r=t.base?i[0]+t.base:i[0],l=i[1],d=i[2],s=i[3],c={css:l,media:d,sourceMap:s};a[r]?a[r].parts.push(c):n.push(a[r]={id:r,parts:[c]})}return n}function i(e,t){var n=f(e.insertInto);if(!n)throw new Error('Couldn\'t find a style target. This probably means that the value for the \'insertInto\' parameter is invalid.');var a=y[y.length-1];if('top'===e.insertAt)a?a.nextSibling?n.insertBefore(t,a.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),y.push(t);else if('bottom'===e.insertAt)n.appendChild(t);else throw new Error('Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.')}function r(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=y.indexOf(e);0<=t&&y.splice(t,1)}function l(e){var t=document.createElement('style');return e.attrs.type='text/css',s(t,e.attrs),i(e,t),t}function d(e){var t=document.createElement('link');return e.attrs.type='text/css',e.attrs.rel='stylesheet',s(t,e.attrs),i(e,t),t}function s(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function c(e,t){var n,a,o,i;if(t.transform&&e.css)if(i=t.transform(e.css),i)e.css=i;else return function(){};if(t.singleton){var s=_++;n=b||(b=l(t)),a=p.bind(null,n,s,!1),o=p.bind(null,n,s,!0)}else e.sourceMap&&'function'==typeof URL&&'function'==typeof URL.createObjectURL&&'function'==typeof URL.revokeObjectURL&&'function'==typeof Blob&&'function'==typeof btoa?(n=d(t),a=g.bind(null,n,t),o=function(){r(n),n.href&&URL.revokeObjectURL(n.href)}):(n=l(t),a=u.bind(null,n),o=function(){r(n)});return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else o()}}function p(e,t,n,a){var o=n?'':a.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(i,r[t]):e.appendChild(i)}}function u(e,t){var n=t.css,a=t.media;if(a&&e.setAttribute('media',a),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function g(e,t,n){var a=n.css,o=n.sourceMap,i=t.convertToAbsoluteUrls===void 0&&o;(t.convertToAbsoluteUrls||i)&&(a=x(a)),o&&(a+='\n/*# sourceMappingURL=data:application/json;base64,'+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+' */');var r=new Blob([a],{type:'text/css'}),l=e.href;e.href=URL.createObjectURL(r),l&&URL.revokeObjectURL(l)}var h={},m=function(e){var t;return function(){return'undefined'==typeof t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),f=function(e){var t={};return function(n){return'undefined'==typeof t[n]&&(t[n]=e.call(this,n)),t[n]}}(function(e){return document.querySelector(e)}),b=null,_=0,y=[],x=n(467);e.exports=function(e,t){if('undefined'!=typeof DEBUG&&DEBUG&&'object'!=typeof document)throw new Error('The style-loader cannot be used in a non-browser environment');t=t||{},t.attrs='object'==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=m()),t.insertInto||(t.insertInto='head'),t.insertAt||(t.insertAt='bottom');var n=o(e,t);return a(n,t),function(e){for(var r=[],l=0;l<n.length;l++){var i=n[l],d=h[i.id];d.refs--,r.push(d)}if(e){var s=o(e,t);a(s,t)}for(var l=0,d;l<r.length;l++)if(d=r[l],0===d.refs){for(var c=0;c<d.parts.length;c++)d.parts[c]();delete h[d.id]}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join('\n')}}()},function(e,t,n){'use strict';function a(e){return(t)=>t[e]}function o(e){return e.brand+e.model}function i(e,t,n){document.getElementById(e).addEventListener(t,n)}function r(){document.getElementById('control-filter-container').classList.toggle('hidden')}function l(){for(let e in d(),$){let t=$[e],n=Y[t];if(n){let t=document.getElementById(e);for(let e=0,a;e<t.options.length;e++)if(a=t.options[e],a.value===n){t.selectedIndex=e;break}}}}function d(){let e=Y.filterItems||[],t={};for(let n=0;n<e.length;n++)t[e[n]]=!0;let n=document.getElementById('control-filter-select');for(let e=0;e<N.a.length;e++){let a=N.a[e],o=document.createElement('option');o.setAttribute('data-section',`${a.brand}/${a.model}`),o.setAttribute('value',e),t[e]&&o.setAttribute('selected',''),o.textContent=`${a.size} | ${a.color}`,n.appendChild(o)}E()(n).treeMultiselect({searchable:!0,hideSidePanel:!0,startCollapsed:!0})}function s(){for(let e of N.a)e.upper60=e.upper-0.4*e.range,e.lower10=e.lower+0.1*e.range,e.usable_upper=e.man_usable_upper||e.upper60,e.usable_lower=e.man_usable_lower||e.lower10}function c(){let e=Y.filterItems,t=[];e&&e.length&&t.push('items='+Y.filterItems.map((e)=>N.a[e].id).join(','));for(let e=0;e<V.length;e++){let n=V[e],a=Y[n];a&&t.push(n+'='+a)}return t.join('&')}function p(e){if(e){let t=e.split('&');for(let e=0;e<t.length;e++){let n=t[e].split('=',2),a=n[0],o=n[1];if('items'===a){let e={},t=o.split(',');for(let n=0,a;n<t.length;n++)a=t[n],e[a]=!0;let n=[];for(let t=0;t<N.a.length;t++)e[N.a[t].id]&&n.push(t);Y.filterItems=n}else V.includes(a)&&(Y[a]=o)}}}function u(e){let t={};for(let n of e)t[o(n)]=n.model;let n=Object.keys(t);n.sort();let a={},r=0;for(let o of n)a[t[o]]=q[r],r=(r+1)%q.length;return a}function g(e){return e}function h(e){return 0.0393701*e}function m(e,t){if(!e){let e=I*t.length;return{height:e,y:R.scaleBand().rangeRound([0,e]).paddingInner(0.1).domain(R.range(t.length))}}let n=R.scaleLinear().range([0,I]).domain([0,R.min(t,a('weight'))]);return{height:R.sum(t,(e)=>n(e.weight))+t.length*H,y:n}}function f(){function e(e){return Math.round(100*i(e))/100}function t(e){return c?p(e.weight):p.bandwidth()}function n(e){return c?v[e]:p(e)}let o=_(N.a);w(o),Y.filterItems&&Y.filterItems.length?document.getElementById('control-filter-info').classList.remove('hidden'):document.getElementById('control-filter-info').classList.add('hidden'),X&&X.hide&&X.hide();const i='metric'===Y.units?g:h,r='metric'===Y.units?'mm':'in';X=R.tip().attr('class','d3-tip').direction(function(){let e=+this.attributes.x.value,t=this.attributes.width,n=t?+t.value:0;return 700<e+n?'w':'e'}).offset(function(){return[39,0]}).html((t)=>{let n=[`${t.brand} ${t.model} ${t.size} (${t.color})`,`${t.lobes} lobes`,`${t.weight} g`,`${t.strength} kN`,`Max range: ${e(t.lower)} - ${e(t.upper)} ${r}`,`Usable range: ${e(t.usable_lower)} - ${e(t.usable_upper)} ${r}`].map((e)=>`<p>${e}</p>`);return n.join('')+'<span class="hide-popover"><button onclick="closeToolTip()">X</button></span>'});let l,s,d;'max'===Y.expansion?(l='upper',s='lower',d=!0):(l='usable_upper',s='usable_lower',d=!1);const c='show'===Y.weights;let{y:p,height:f}=m(c,o),b='linear'===Y.scale?R.scaleLinear():R.scaleLog().base(2).nice();b=b.rangeRound([0,U]),b.domain([i(R.min(o,a(s))),i(R.max(o,a(l)))]);let y=f+O.top+O.bottom+2*H;B.attr('height',y+'px'),F.selectAll('g').remove(),F.call(X),document.getElementsByClassName('hide-popover'),F.append('g').attr('class','axis x bottom').attr('transform','translate(0,'+(f+2*H)+')').call(R.axisBottom(b).ticks(20)).append('text').attr('class','label').attr('y','30px').style('text-anchor','start').text(`Expansion (${r})`),F.append('g').attr('class','axis x top').call(R.axisTop(b).ticks(20)).append('text').attr('class','label').attr('y','-25px').style('text-anchor','start').text(`Expansion (${r})`),F.append('g').attr('class','grid x').call(R.axisBottom(b).ticks(20).tickSize(f+2*H).tickFormat(''));let x=F.selectAll('.bar').data(o).enter().append('g').attr('class','bar'),v=[];if(c){let e=H;for(let t of o)v.push(e),e+=p(t.weight)+H}let C=x.append('rect').attr('x',(e)=>b(i(e[s]))).attr('y',(e,t)=>n(t)+H).attr('width',(e)=>b(i(e[l]))-b(i(e[s]))).attr('height',t).on('mouseover',function(e){X.show.apply(this,[e,this])});switch(Y.color){case'model':let e=u(o);C.attr('fill',(t)=>e[t.model]);break;case'cam':C.attr('fill',(e)=>e.color);break;case'none':break;default:throw new Error('unhandled coloring type: '+Y.color);}if(d){function e(e){return'yellow'===e.color?'gray':'white'}x.append('rect').attr('x',(e)=>b(i(e.lower10))).attr('y',(e,t)=>n(t)+H).attr('width',1).attr('height',(e)=>t(e)-4).attr('fill',e),x.append('rect').attr('x',(e)=>b(i(e.upper60))).attr('y',(e,t)=>n(t)+H).attr('width',1).attr('height',(e)=>t(e)-4).attr('fill',e)}let T=(e)=>b(i(e[l]))+5+5,k=(e)=>750<T(e),S=x.append('text').attr('x',T).attr('y',(e,t)=>n(t)+I+H).attr('dy','-.35em').attr('text-anchor',(e)=>k(e)?'end':null).attr('fill',(e)=>k(e)?'white':null).attr('dx',(e)=>k(e)?'-1em':null).text((e)=>`${e.brand} ${e.model} ${e.size}`).on('mouseover',function(e){let t=this.previousSibling;X.show.apply(t,[e,t])})}function b(e,t){return(n,a)=>{let o=e(n,a);return 0===o?t(n,a):o}}function _(e){if(Y.filter){let t=Y.filter.toLowerCase().trim();return e.filter((e)=>e.model.toLowerCase().includes(t)||e.brand.toLowerCase().includes(t))}if(Y.filterItems&&Y.filterItems.length){let t=[];for(let n of Y.filterItems)t.push(e[n]);return t}return e.map((e)=>e)}function w(e){let t;switch(Y.sortOn){case'model':t=b(K.model,K.size);break;case'size':t=K.size;break;case'weight':t=K.weight;break;default:throw new Error('unknown sort type: '+Y.sortOn);}e.sort(t)}Object.defineProperty(t,'__esModule',{value:!0});var y=n(90),x=n(1),v=n(2),C=n(126),T=n(285),k=n.n(T),S=n(171),E=n.n(S),z=n(464),A=n.n(z),M=n(465),D=n.n(M),j=n(468),N=n.n(j),L=n(469),P=n.n(L);const R=Object.assign({},x,y,v,C);R.tip=k.a;const q=['#2a80b9','#8f44ad','#c1392b','#f39c11','#27ae61','#2d3e50'],I=20,H=5;let B=R.select('svg'),O={top:40,right:20,bottom:40,left:0},U=+B.attr('width')-O.left-O.right,F=B.append('g').attr('transform','translate('+O.left+','+O.top+')'),W=['weight','lower','upper','range','man_usable_lower','man_usable_upper'],Y={sortOn:'model',expansion:'max',filter:null,filterItems:null,color:'model',units:'metric',scale:'linear',weights:'hide'},X=null;window.closeToolTip=function(){X&&X.hide()};const $={"sort-by":'sortOn',expansion:'expansion',"control-color":'color',"control-units":'units',"control-scale":'scale',"control-weights":'weights'},V=['sortOn','expansion','color','units','scale','weights'],K={model:(e,t)=>o(e).localeCompare(o(t)),size:(e,t)=>e.lower-t.lower,weight:(e,t)=>e.weight-t.weight};(function(){for(let e in $)i(e,'change',function(e){return function(t){Y[e]=t.target.value,f()}}($[e]));i('control-filter-open','click',function(){r()}),i('control-filter-apply','click',function(){r();let e=document.getElementById('control-filter-select').selectedOptions,t=[];for(let n=0;n<e.length;n++)t.push(+e.item(n).value);Y.filterItems=t,f()}),i('control-share','click',function(t){window.location.hash=c(),t.preventDefault(),document.getElementById('share-info-url').value=window.location.toString(),document.getElementById('share-info').classList.toggle('hidden'),document.getElementById('share-info-url').select()}),i('share-info-close','click',function(){document.getElementById('share-info').classList.toggle('hidden')}),i('control-more','click',function(t){let e=document.getElementsByTagName('header')[0],n=e.classList.contains('expanded');e.classList.toggle('expanded');let a=document.getElementById('control-more');a.textContent=n?'More Options...':'Fewer Options',t.preventDefault()}),document.addEventListener('click',function(t){if(X){for(let e=t.srcElement;e;){if('HEADER'===e.tagName||e.classList.contains('d3-tip'))return;e=e.parentElement}X.hide()}})})(),function(e){for(let t of N.a)for(let e of W)t[e]=+t[e];s(),e()}(()=>{let e=window.location.hash;e&&p(e.split('#',2)[1]),f(),l()})},function(e,t,n){'use strict';function a(){function e(){var e=o().length,t=p[1]<p[0],n=p[t-0],a=p[1-t];f=(a-n)/r(1,e-g+2*h),u&&(f=Math.floor(f)),n+=(a-n-f*(e-g))*m,b=f*(1-g),u&&(n=l(n),b=l(b));var i=Object(d.range)(e).map(function(e){return n+f*e});return c(t?i.reverse():i)}var t=Object(s.a)().unknown(void 0),o=t.domain,c=t.range,p=[0,1],u=!1,g=0,h=0,m=0.5,f,b;return delete t.unknown,t.domain=function(t){return arguments.length?(o(t),e()):o()},t.range=function(t){return arguments.length?(p=[+t[0],+t[1]],e()):p.slice()},t.rangeRound=function(t){return p=[+t[0],+t[1]],u=!0,e()},t.bandwidth=function(){return b},t.step=function(){return f},t.round=function(t){return arguments.length?(u=!!t,e()):u},t.padding=function(t){return arguments.length?(g=h=r(0,i(1,t)),e()):g},t.paddingInner=function(t){return arguments.length?(g=r(0,i(1,t)),e()):g},t.paddingOuter=function(t){return arguments.length?(h=r(0,i(1,t)),e()):h},t.align=function(t){return arguments.length?(m=r(0,i(1,t)),e()):m},t.copy=function(){return a().domain(o()).range(p).round(u).paddingInner(g).paddingOuter(h).align(m)},e()}function o(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return o(t())},e}var i=Math.min,r=Math.max,l=Math.round;t.a=a,t.b=function(){return o(a().paddingInner(1))};var d=n(2),s=n(103)},function(e,t,n){'use strict';var a=n(93);t.a=function(e,t,n){var o=e.length,r=t.length,l=Array(o*r),d,s,c,i;for(null==n&&(n=a.b),d=c=0;d<o;++d)for(i=e[d],s=0;s<r;++s,++c)l[c]=n(i,t[s]);return l}},function(e,t){'use strict';t.a=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN}},function(e,t,n){'use strict';var a=n(97),o=n(91),i=n(179),r=n(96),l=n(180),d=n(98),s=n(99),c=n(100);t.a=function(){function e(e){var a=e.length,n=Array(a),r,i;for(r=0;r<a;++r)n[r]=t(e[r],r,e);var l=p(n),c=l[0],g=l[1],h=u(n,c,g);Array.isArray(h)||(h=Object(s.c)(c,g,h),h=Object(d.a)(Math.ceil(c/h)*h,Math.floor(g/h)*h,h));for(var f=h.length;h[0]<=c;)h.shift(),--f;for(;h[f-1]>g;)h.pop(),--f;var m=Array(f+1),b;for(r=0;r<=f;++r)b=m[r]=[],b.x0=0<r?h[r-1]:c,b.x1=r<f?h[r]:g;for(r=0;r<a;++r)i=n[r],c<=i&&i<=g&&m[Object(o.c)(h,i,0,f)].push(e[r]);return m}var t=l.a,p=r.a,u=c.a;return e.value=function(n){return arguments.length?(t='function'==typeof n?n:Object(i.a)(n),e):t},e.domain=function(t){return arguments.length?(p='function'==typeof t?t:Object(i.a)([t[0],t[1]]),e):p},e.thresholds=function(t){return arguments.length?(u='function'==typeof t?t:Array.isArray(t)?Object(i.a)(a.b.call(t)):Object(i.a)(t),e):u},e}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';t.a=function(e){return e}},function(e,t,n){'use strict';var a=n(97),o=n(17),i=n(20),r=n(47);t.a=function(e,t,n){return e=a.a.call(e,i.a).sort(o.a),Math.ceil((n-t)/(2*(Object(r.a)(e,0.75)-Object(r.a)(e,0.25))*Math.pow(e.length,-1/3)))}},function(e,t,n){'use strict';var a=n(94);t.a=function(e,t,n){return Math.ceil((n-t)/(3.5*Object(a.a)(e)*Math.pow(e.length,-1/3)))}},function(e,t){'use strict';t.a=function(e,t){var a=e.length,n=-1,o,i;if(null==t){for(;++n<a;)if(null!=(o=e[n])&&o>=o)for(i=o;++n<a;)null!=(o=e[n])&&o>i&&(i=o);}else for(;++n<a;)if(null!=(o=t(e[n],n,e))&&o>=o)for(i=o;++n<a;)null!=(o=t(e[n],n,e))&&o>i&&(i=o);return i}},function(e,t,n){'use strict';var a=n(20);t.a=function(e,t){var o=e.length,n=o,r=-1,i=0,l;if(null==t)for(;++r<o;)isNaN(l=Object(a.a)(e[r]))?--n:i+=l;else for(;++r<o;)isNaN(l=Object(a.a)(t(e[r],r,e)))?--n:i+=l;return n?i/n:void 0}},function(e,t,n){'use strict';var a=n(17),o=n(20),r=n(47);t.a=function(e,t){var l=e.length,n=-1,i=[],d;if(null==t)for(;++n<l;)isNaN(d=Object(o.a)(e[n]))||i.push(d);else for(;++n<l;)isNaN(d=Object(o.a)(t(e[n],n,e)))||i.push(d);return Object(r.a)(i.sort(a.a),0.5)}},function(e,t){'use strict';t.a=function(e){for(var t=e.length,n=-1,a=0,o,i,r;++n<t;)a+=e[n].length;for(i=Array(a);0<=--t;)for(r=e[t],o=r.length;0<=--o;)i[--a]=r[o];return i}},function(e,t){'use strict';t.a=function(e,t){for(var n=t.length,a=Array(n);n--;)a[n]=e[t[n]];return a}},function(e,t,n){'use strict';var a=n(17);t.a=function(e,t){if(l=e.length){var o=0,i=0,r=e[i],l,n;for(null==t&&(t=a.a);++o<l;)(0>t(n=e[o],r)||0!==t(r,r))&&(r=n,i=o);if(0===t(r,r))return i}}},function(e,t){'use strict';t.a=function(e,n,a){for(var o=(null==a?e.length:a)-(n=null==n?0:+n),r,t;o;)t=0|Math.random()*o--,r=e[o+n],e[o+n]=e[t+n],e[t+n]=r;return e}},function(e,t){'use strict';t.a=function(e,t){var a=e.length,n=-1,o=0,i;if(null==t)for(;++n<a;)(i=+e[n])&&(o+=i);else for(;++n<a;)(i=+t(e[n],n,e))&&(o+=i);return o}},function(e,t,n){'use strict';var a=n(102);t.a=function(){return Object(a.a)(arguments)}},function(e,t,n){'use strict';function a(){return{}}function o(e,t,n){e[t]=n}function i(){return Object(l.a)()}function r(e,t,n){e.set(t,n)}var l=n(48);t.a=function(){function e(t,a,o,r){if(a>=s.length)return null!=d&&t.sort(d),null==c?t:c(t);for(var p=-1,i=t.length,n=s[a++],u=Object(l.a)(),g=o(),h,m,f;++p<i;)(f=u.get(h=n(m=t[p])+''))?f.push(m):u.set(h,[m]);return u.each(function(t,n){r(g,n,e(t,a,o,r))}),g}function t(e,a){if(++a>s.length)return e;var o=n[a-1],i;return null!=c&&a>=s.length?i=e.entries():(i=[],e.each(function(e,n){i.push({key:n,values:t(e,a)})})),null==o?i:i.sort(function(e,t){return o(e.key,t.key)})}var s=[],n=[],d,c,p;return p={object:function(t){return e(t,0,a,o)},map:function(t){return e(t,0,i,r)},entries:function(n){return t(e(n,0,i,r),0)},key:function(e){return s.push(e),p},sortKeys:function(e){return n[s.length-1]=e,p},sortValues:function(e){return d=e,p},rollup:function(e){return c=e,p}}}},function(e,t,n){'use strict';function a(){}function o(e,t){var o=new a;if(e instanceof a)e.each(function(e){o.add(e)});else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)o.add(e[r]);else for(;++r<i;)o.add(t(e[r],r,e))}return o}var i=n(48),r=i.a.prototype;a.prototype=o.prototype={constructor:a,has:r.has,add:function(e){return e+='',this[i.b+e]=e,this},remove:r.remove,clear:r.clear,values:r.keys,size:r.size,empty:r.empty,each:r.each},t.a=o},function(e,t){'use strict';t.a=function(e){var t=[];for(var n in e)t.push(n);return t}},function(e,t){'use strict';t.a=function(e){var t=[];for(var n in e)t.push(e[n]);return t}},function(e,t){'use strict';t.a=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t}},function(e,t,n){'use strict';function a(){function e(e){return+e}var t=[0,1];return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=o.a.call(n,r.a),e):t.slice()},e.copy=function(){return a().domain(t)},Object(i.b)(e)}t.a=a;var o=n(12),i=n(22),r=n(112)},function(e,t,n){'use strict';function i(e){if(e instanceof r)return new r(e.l,e.a,e.b,e.opacity);if(e instanceof u){var t=e.h*f.a;return new r(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof m.b||(e=Object(m.h)(e));var n=s(e.r),o=s(e.g),a=s(e.b),i=d((0.4124564*n+0.3575761*o+0.1804375*a)/_),l=d((0.2126729*n+0.7151522*o+0.072175*a)/w),c=d((0.0193339*n+0.119192*o+0.9503041*a)/v);return new r(116*l-16,500*(i-l),200*(l-c),e.opacity)}function a(e,t,n,a){return 1===arguments.length?i(e):new r(e,t,n,null==a?1:a)}function r(e,t,n,o){this.l=+e,this.a=+t,this.b=+n,this.opacity=+o}function d(e){return e>T?g(e,1/3):e/C+y}function o(e){return e>x?e*e*e:C*(e-y)}function l(e){return 255*(0.0031308>=e?12.92*e:1.055*g(e,1/2.4)-0.055)}function s(e){return 0.04045>=(e/=255)?e/12.92:g((e+0.055)/1.055,2.4)}function p(e){if(e instanceof u)return new u(e.h,e.c,e.l,e.opacity);e instanceof r||(e=i(e));var t=Math.atan2(e.b,e.a)*f.b;return new u(0>t?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function c(e,t,n,a){return 1===arguments.length?p(e):new u(e,t,n,null==a?1:a)}function u(e,t,n,a){this.h=+e,this.c=+t,this.l=+n,this.opacity=+a}var g=Math.pow;t.a=a,t.b=c;var h=n(51),m=n(50),f=n(104),b=18,_=0.95047,w=1,v=1.08883,y=4/29,x=6/29,C=3*x*x,T=x*x*x;Object(h.a)(r,a,Object(h.b)(m.a,{brighter:function(e){return new r(this.l+b*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new r(this.l-b*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return e=w*o(e),t=_*o(t),n=v*o(n),new m.b(l(3.2404542*t-1.5371385*e-0.4985314*n),l(-0.969266*t+1.8760108*e+0.041556*n),l(0.0556434*t-0.2040259*e+1.0572252*n),this.opacity)}})),Object(h.a)(u,c,Object(h.b)(m.a,{brighter:function(e){return new u(this.h,this.c,this.l+b*(null==e?1:e),this.opacity)},darker:function(e){return new u(this.h,this.c,this.l-b*(null==e?1:e),this.opacity)},rgb:function(){return i(this).rgb()}}))},function(e,t,n){'use strict';function a(e){if(e instanceof i)return new i(e.h,e.s,e.l,e.opacity);e instanceof d.b||(e=Object(d.h)(e));var t=e.r/255,n=e.g/255,a=e.b/255,o=(x*a+_*t-y*n)/(x+_-y),r=a-o,l=(f*(n-o)-u*r)/m,p=Math.sqrt(l*l+r*r)/(f*o*(1-o)),s=p?Math.atan2(l,r)*c.b-120:NaN;return new i(0>s?s+360:s,p,o,e.opacity)}function o(e,t,n,o){return 1===arguments.length?a(e):new i(e,t,n,null==o?1:o)}function i(e,t,n,a){this.h=+e,this.s=+t,this.l=+n,this.opacity=+a}var r=Math.pow;t.a=o;var l=n(51),d=n(50),c=n(104),s=-0.14861,p=+1.78277,u=-0.29227,m=-0.90649,f=+1.97294,_=f*m,y=f*p,x=p*u-m*s;Object(l.a)(i,o,Object(l.b)(d.a,{brighter:function(e){return e=null==e?d.c:r(d.c,e),new i(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?d.d:r(d.d,e),new i(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*c.a,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),a=Math.cos(e),o=Math.sin(e);return new d.b(255*(t+n*(s*a+p*o)),255*(t+n*(u*a+m*o)),255*(t+n*(f*a)),this.opacity)}}))},function(e,t){'use strict';t.a=function(e,n){return e=+e,n-=e,function(a){return Math.round(e+n*a)}}},function(e,t,n){'use strict';function a(e,t,n,i){function r(e){return e.length?e.pop()+' ':''}function l(e,a,r,l,d,s){if(e!==r||a!==l){var c=d.push('translate(',null,t,null,n);s.push({i:c-4,x:Object(o.a)(e,r)},{i:c-2,x:Object(o.a)(a,l)})}else(r||l)&&d.push('translate('+r+t+l+n)}function d(e,t,n,a){e===t?t&&n.push(r(n)+'rotate('+t+i):(180<e-t?t+=360:180<t-e&&(e+=360),a.push({i:n.push(r(n)+'rotate(',null,i)-2,x:Object(o.a)(e,t)}))}function c(e,t,n,a){e===t?t&&n.push(r(n)+'skewX('+t+i):a.push({i:n.push(r(n)+'skewX(',null,i)-2,x:Object(o.a)(e,t)})}function p(e,t,n,a,l,d){if(e!==n||t!==a){var s=l.push(r(l)+'scale(',null,',',null,')');d.push({i:s-4,x:Object(o.a)(e,n)},{i:s-2,x:Object(o.a)(t,a)})}else(1!==n||1!==a)&&l.push(r(l)+'scale('+n+','+a+')')}return function(t,n){var a=[],r=[];return t=e(t),n=e(n),l(t.translateX,t.translateY,n.translateX,n.translateY,a,r),d(t.rotate,n.rotate,a,r),c(t.skewX,n.skewX,a,r),p(t.scaleX,t.scaleY,n.scaleX,n.scaleY,a,r),t=n=null,function(e){for(var t=-1,i=r.length,n;++t<i;)a[(n=r[t]).i]=n.x(e);return a.join('')}}}n.d(t,'a',function(){return r}),n.d(t,'b',function(){return l});var o=n(33),i=n(202),r=a(i.a,'px, ','px)','deg)'),l=a(i.b,', ',')',')')},function(e,t,n){'use strict';t.a=function(e){return'none'===e?a.b:(o||(o=document.createElement('DIV'),i=document.documentElement,r=document.defaultView),o.style.transform=e,e=r.getComputedStyle(i.appendChild(o),null).getPropertyValue('transform'),i.removeChild(o),e=e.slice(7,-1).split(','),Object(a.a)(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},t.b=function(e){return null==e?a.b:(l||(l=document.createElementNS('http://www.w3.org/2000/svg','g')),l.setAttribute('transform',e),!(e=l.transform.baseVal.consolidate()))?a.b:(e=e.matrix,Object(a.a)(e.a,e.b,e.c,e.d,e.e,e.f))};var a=n(203),o,i,r,l},function(e,t,n){'use strict';var o=Math.sqrt;n.d(t,'b',function(){return a});var i=180/Math.PI,a={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};t.a=function(t,n,r,l,d,s){var c,p,u;return(c=o(t*t+n*n))&&(t/=c,n/=c),(u=t*r+n*l)&&(r-=t*u,l-=n*u),(p=o(r*r+l*l))&&(r/=p,l/=p,u/=p),t*l<n*r&&(t=-t,n=-n,u=-u,c=-c),{translateX:d,translateY:s,rotate:Math.atan2(n,t)*i,skewX:Math.atan(u)*i,scaleX:c,scaleY:p}}},function(e,t){'use strict';function n(e){return((e=i(e))+1/e)/2}function a(e){return((e=i(e))-1/e)/2}function o(e){return((e=i(2*e))-1)/(e+1)}var r=Math.sqrt,l=Math.log,i=Math.exp,d=Math.SQRT2,c=2,s=4;t.a=function(e,t){var p=e[0],g=e[1],h=e[2],u=t[0],m=t[1],f=t[2],b=u-p,_=m-g,y=b*b+_*_,x,w;if(y<1e-12)w=l(f/h)/d,x=function(e){return[p+e*b,g+e*_,h*i(d*e*w)]};else{var v=r(y),C=(f*f-h*h+s*y)/(2*h*c*v),T=(f*f-h*h-s*y)/(2*f*c*v),k=l(r(C*C+1)-C),S=l(r(T*T+1)-T);w=(S-k)/d,x=function(e){var t=e*w,i=n(k),r=h/(c*v)*(i*o(d*t+k)-a(k));return[p+r*b,g+r*_,h*i/n(d*t+k)]}}return x.duration=1e3*w,x}},function(e,t,n){'use strict';function a(e){return function(n,t){var a=e((n=Object(o.d)(n)).h,(t=Object(o.d)(t)).h),r=Object(i.a)(n.s,t.s),d=Object(i.a)(n.l,t.l),l=Object(i.a)(n.opacity,t.opacity);return function(e){return n.h=a(e),n.s=r(e),n.l=d(e),n.opacity=l(e),n+''}}}n.d(t,'b',function(){return r});var o=n(7),i=n(23);t.a=a(i.c);var r=a(i.a)},function(e,t,n){'use strict';t.a=function(e,t){var n=Object(i.a)((e=Object(o.e)(e)).l,(t=Object(o.e)(t)).l),r=Object(i.a)(e.a,t.a),a=Object(i.a)(e.b,t.b),l=Object(i.a)(e.opacity,t.opacity);return function(o){return e.l=n(o),e.a=r(o),e.b=a(o),e.opacity=l(o),e+''}};var o=n(7),i=n(23)},function(e,t,n){'use strict';function a(e){return function(n,t){var a=e((n=Object(o.c)(n)).h,(t=Object(o.c)(t)).h),r=Object(i.a)(n.c,t.c),d=Object(i.a)(n.l,t.l),l=Object(i.a)(n.opacity,t.opacity);return function(e){return n.h=a(e),n.c=r(e),n.l=d(e),n.opacity=l(e),n+''}}}n.d(t,'b',function(){return r});var o=n(7),i=n(23);t.a=a(i.c);var r=a(i.a)},function(e,t,n){'use strict';function a(e){return function t(n){function a(a,t){var r=e((a=Object(o.b)(a)).h,(t=Object(o.b)(t)).h),d=Object(i.a)(a.s,t.s),s=Object(i.a)(a.l,t.l),l=Object(i.a)(a.opacity,t.opacity);return function(e){return a.h=r(e),a.s=d(e),a.l=s(Math.pow(e,n)),a.opacity=l(e),a+''}}return n=+n,a.gamma=t,a}(1)}n.d(t,'a',function(){return r});var o=n(7),i=n(23);t.b=a(i.c);var r=a(i.a)},function(e,t){'use strict';t.a=function(e,t){for(var n=Array(t),a=0;a<t;++a)n[a]=e(a/(t-1));return n}},function(e,t,n){'use strict';var a=Math.max,o=Math.abs,i=n(2),r=n(54);t.a=function(e,t,n){var l=e[0],d=e[e.length-1],s=Object(i.tickStep)(l,d,null==t?10:t),c;switch(n=Object(r.e)(null==n?',f':n),n.type){case's':{var p=a(o(l),o(d));return null!=n.precision||isNaN(c=Object(r.g)(s,p))||(n.precision=c),Object(r.d)(n,p)}case'':case'e':case'g':case'p':case'r':{null!=n.precision||isNaN(c=Object(r.h)(s,a(o(l),o(d))))||(n.precision=c-('e'===n.type));break}case'f':case'%':{null!=n.precision||isNaN(c=Object(r.f)(s))||(n.precision=c-2*('%'===n.type));break}}return Object(r.a)(n)}},function(e,t,n){'use strict';function a(e){return i=Object(o.a)(e),r=i.format,l=i.formatPrefix,i}n.d(t,'b',function(){return r}),n.d(t,'c',function(){return l}),t.a=a;var o=n(113),i,r,l;a({decimal:'.',thousands:',',grouping:[3],currency:['$','']})},function(e,t){'use strict';t.a=function(e,n){return function(a,o){for(var r=a.length,i=[],t=0,l=e[0],d=0;0<r&&0<l&&(d+l+1>o&&(l=Math.max(1,o-d)),i.push(a.substring(r-=l,r+l)),!((d+=l+1)>o));)l=e[t=(t+1)%e.length];return i.reverse().join(n)}}},function(e,t){'use strict';t.a=function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}},function(e,t){'use strict';t.a=function(e,t){e=e.toPrecision(t);out:for(var a=e.length,n=1,o=-1,i;n<a;++n)switch(e[n]){case'.':o=i=n;break;case'0':0===o&&(o=n),i=n;break;case'e':break out;default:0<o&&(o=0);}return 0<o?e.slice(0,o)+e.slice(i+1):e}},function(e,t,n){'use strict';var a=n(55);t.a=function(e,t){var n=Object(a.a)(e,t);if(!n)return e+'';var o=n[0],i=n[1];return 0>i?'0.'+Array(-i).join('0')+o:o.length>i+1?o.slice(0,i+1)+'.'+o.slice(i+1):o+Array(i-o.length+2).join('0')}},function(e,t){'use strict';t.a=function(e){return e}},function(e,t,n){'use strict';var a=n(35);t.a=function(e){return Math.max(0,-Object(a.a)(Math.abs(e)))}},function(e,t,n){'use strict';var a=Math.max,o=n(35);t.a=function(e,t){return a(0,3*a(-8,Math.min(8,Math.floor(Object(o.a)(t)/3)))-Object(o.a)(Math.abs(e)))}},function(e,t,n){'use strict';var a=Math.abs,o=n(35);t.a=function(e,t){return e=a(e),t=a(t)-e,Math.max(0,Object(o.a)(t)-Object(o.a)(e))+1}},function(e,t,n){'use strict';function a(e,t){return(t=u(t/e))?function(n){return u(n/e)/t}:Object(f.a)(t)}function o(e,n){return 0>e?function(o){return-p(-n,o)*p(-e,1-o)}:function(a){return p(n,a)*p(e,1-a)}}function i(e){return isFinite(e)?+('1e'+e):0>e?0:e}function r(e){return 10===e?i:e===c?Math.exp:function(t){return p(e,t)}}function l(e){return e===c?u:10===e&&Math.log10||2===e&&Math.log2||(e=u(e),function(t){return u(t)/e})}function d(e){return function(t){return-e(-t)}}function s(){function e(){return y=l(f),w=r(f),0>c()[0]&&(y=d(y),w=d(w)),t}var t=Object(_.b)(a,o).domain([1,10]),c=t.domain,f=10,y=l(10),w=r(10);return t.base=function(t){return arguments.length?(f=+t,e()):f},t.domain=function(t){return arguments.length?(c(t),e()):c()},t.ticks=function(e){var a=c(),o=a[0],l=a[a.length-1],d;(d=l<o)&&(r=o,o=l,l=r);var r=y(o),i=y(l),s=null==e?10:+e,n=[],u,p,m;if(f%1||!(i-r<s))n=Object(h.ticks)(r,i,Math.min(i-r,s)).map(w);else if(r=g(r)-1,i=g(i)+1,0<o){for(;r<i;++r)for(p=1,u=w(r);p<f;++p)if(m=u*p,!(m<o)){if(m>l)break;n.push(m)}}else for(;r<i;++r)for(p=f-1,u=w(r);1<=p;--p)if(m=u*p,!(m<o)){if(m>l)break;n.push(m)}return d?n.reverse():n},t.tickFormat=function(e,n){if(null==n&&(n=10==f?'.0e':','),'function'!=typeof n&&(n=Object(m.a)(n)),e===Infinity)return n;null==e&&(e=10);var a=Math.max(1,f*e/t.ticks().length);return function(e){var t=e/w(g(y(e)));return t*f<f-0.5&&(t*=f),t<=a?n(e):''}},t.nice=function(){return c(Object(b.a)(c(),{floor:function(e){return w(Math.floor(y(e)))},ceil:function(e){return w(Math.ceil(y(e)))}}))},t.copy=function(){return Object(_.a)(t,s().base(f))},t}var c=Math.E,g=Math.round,p=Math.pow,u=Math.log;t.a=s;var h=n(2),m=n(54),f=n(53),b=n(117),_=n(34)},function(e,t,n){'use strict';function o(e,t){return 0>e?-i(-e,t):i(e,t)}function a(){var e=1,t=Object(d.b)(function(t,n){return(n=o(n,e)-(t=o(t,e)))?function(a){return(o(a,e)-t)/n}:Object(r.a)(n)},function(n,a){return a=o(a,e)-(n=o(n,e)),function(i){return o(n+a*i,1/e)}}),n=t.domain;return t.exponent=function(t){return arguments.length?(e=+t,n(n())):e},t.copy=function(){return Object(d.a)(t,a().exponent(e))},Object(l.b)(t)}var i=Math.pow;t.a=a,t.b=function(){return a().exponent(0.5)};var r=n(53),l=n(22),d=n(34)},function(e,t,n){'use strict';function a(){function e(){var e=0,a=Math.max(1,l.length);for(d=Array(a-1);++e<a;)d[e-1]=Object(o.quantile)(r,e/a);return t}function t(e){if(!isNaN(e=+e))return l[Object(o.bisect)(d,e)]}var r=[],l=[],d=[];return t.invertExtent=function(e){var t=l.indexOf(e);return 0>t?[NaN,NaN]:[0<t?d[t-1]:r[0],t<d.length?d[t]:r[r.length-1]]},t.domain=function(t){if(!arguments.length)return r.slice();r=[];for(var a=0,i=t.length,n;a<i;++a)(n=t[a],null!=n&&!isNaN(n=+n))&&r.push(n);return r.sort(o.ascending),e()},t.range=function(t){return arguments.length?(l=i.b.call(t),e()):l.slice()},t.quantiles=function(){return d.slice()},t.copy=function(){return a().domain(r).range(l)},t}t.a=a;var o=n(2),i=n(12)},function(e,t,n){'use strict';function a(){function e(e){if(e<=e)return c[Object(o.bisect)(n,e,0,s)]}function t(){var t=-1;for(n=Array(s);++t<s;)n[t]=((t+1)*d-(t-s)*l)/(s+1);return e}var l=0,d=1,s=1,n=[0.5],c=[0,1];return e.domain=function(e){return arguments.length?(l=+e[0],d=+e[1],t()):[l,d]},e.range=function(e){return arguments.length?(s=(c=i.b.call(e)).length-1,t()):c.slice()},e.invertExtent=function(e){var t=c.indexOf(e);return 0>t?[NaN,NaN]:1>t?[l,n[0]]:t>=s?[n[s-1],d]:[n[t-1],n[t]]},e.copy=function(){return a().domain([l,d]).range(c)},Object(r.b)(e)}t.a=a;var o=n(2),i=n(12),r=n(22)},function(e,t,n){'use strict';function a(){function e(e){if(e<=e)return l[Object(i.bisect)(t,e,0,d)]}var t=[0.5],l=[0,1],d=1;return e.domain=function(n){return arguments.length?(t=r.b.call(n),d=o(t.length,l.length-1),e):t.slice()},e.range=function(n){return arguments.length?(l=r.b.call(n),d=o(t.length,l.length-1),e):l.slice()},e.invertExtent=function(e){var n=l.indexOf(e);return[t[n-1],t[n]]},e.copy=function(){return a().domain(t).range(l)},e}var o=Math.min;t.a=a;var i=n(2),r=n(12)},function(e,t,n){'use strict';var a=Math.floor;n.d(t,'b',function(){return r});var o=n(3),i=Object(o.a)(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});i.every=function(e){return e=a(e),isFinite(e)&&0<e?1<e?Object(o.a)(function(t){t.setTime(a(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):i:null},t.a=i;var r=i.range},function(e,t,n){'use strict';n.d(t,'b',function(){return r});var a=n(3),o=n(8),i=Object(a.a)(function(e){e.setTime(Math.floor(e/o.d)*o.d)},function(e,t){e.setTime(+e+t*o.d)},function(e,t){return(t-e)/o.d},function(e){return e.getUTCSeconds()});t.a=i;var r=i.range},function(e,t,n){'use strict';n.d(t,'b',function(){return r});var a=n(3),o=n(8),i=Object(a.a)(function(e){e.setTime(Math.floor(e/o.c)*o.c)},function(e,t){e.setTime(+e+t*o.c)},function(e,t){return(t-e)/o.c},function(e){return e.getMinutes()});t.a=i;var r=i.range},function(e,t,n){'use strict';n.d(t,'b',function(){return r});var a=n(3),o=n(8),i=Object(a.a)(function(e){var t=e.getTimezoneOffset()*o.c%o.b;0>t&&(t+=o.b),e.setTime(Math.floor((+e-t)/o.b)*o.b+t)},function(e,t){e.setTime(+e+t*o.b)},function(e,t){return(t-e)/o.b},function(e){return e.getHours()});t.a=i;var r=i.range},function(e,t,n){'use strict';n.d(t,'a',function(){return r});var a=n(3),o=n(8),i=Object(a.a)(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*o.c)/o.a},function(e){return e.getDate()-1});t.b=i;var r=i.range},function(e,t,n){'use strict';function a(e){return Object(o.a)(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*i.c)/i.e})}n.d(t,'g',function(){return r}),n.d(t,'c',function(){return l}),n.d(t,'k',function(){return d}),n.d(t,'m',function(){return s}),n.d(t,'i',function(){return c}),n.d(t,'a',function(){return p}),n.d(t,'e',function(){return u}),n.d(t,'h',function(){return g}),n.d(t,'d',function(){return h}),n.d(t,'l',function(){return m}),n.d(t,'n',function(){return f}),n.d(t,'j',function(){return b}),n.d(t,'b',function(){return _}),n.d(t,'f',function(){return y});var o=n(3),i=n(8),r=a(0),l=a(1),d=a(2),s=a(3),c=a(4),p=a(5),u=a(6),g=r.range,h=l.range,m=d.range,f=s.range,b=c.range,_=p.range,y=u.range},function(e,t,n){'use strict';n.d(t,'b',function(){return i});var a=n(3),o=Object(a.a)(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()});t.a=o;var i=o.range},function(e,t,n){'use strict';var a=Math.floor;n.d(t,'b',function(){return r});var o=n(3),i=Object(o.a)(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()});i.every=function(e){return isFinite(e=a(e))&&0<e?Object(o.a)(function(t){t.setFullYear(a(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null},t.a=i;var r=i.range},function(e,t,n){'use strict';n.d(t,'b',function(){return r});var a=n(3),o=n(8),i=Object(a.a)(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*o.c)},function(e,t){return(t-e)/o.c},function(e){return e.getUTCMinutes()});t.a=i;var r=i.range},function(e,t,n){'use strict';n.d(t,'b',function(){return r});var a=n(3),o=n(8),i=Object(a.a)(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+t*o.b)},function(e,t){return(t-e)/o.b},function(e){return e.getUTCHours()});t.a=i;var r=i.range},function(e,t,n){'use strict';n.d(t,'b',function(){return r});var a=n(3),o=n(8),i=Object(a.a)(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/o.a},function(e){return e.getUTCDate()-1});t.a=i;var r=i.range},function(e,t,n){'use strict';function a(e){return Object(o.a)(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/i.e})}n.d(t,'g',function(){return r}),n.d(t,'c',function(){return l}),n.d(t,'k',function(){return d}),n.d(t,'m',function(){return s}),n.d(t,'i',function(){return c}),n.d(t,'a',function(){return p}),n.d(t,'e',function(){return u}),n.d(t,'h',function(){return g}),n.d(t,'d',function(){return h}),n.d(t,'l',function(){return m}),n.d(t,'n',function(){return f}),n.d(t,'j',function(){return b}),n.d(t,'b',function(){return _}),n.d(t,'f',function(){return y});var o=n(3),i=n(8),r=a(0),l=a(1),d=a(2),s=a(3),c=a(4),p=a(5),u=a(6),g=r.range,h=l.range,m=d.range,f=s.range,b=c.range,_=p.range,y=u.range},function(e,t,n){'use strict';n.d(t,'b',function(){return i});var a=n(3),o=Object(a.a)(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()});t.a=o;var i=o.range},function(e,t,n){'use strict';var a=Math.floor;n.d(t,'b',function(){return r});var o=n(3),i=Object(o.a)(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()});i.every=function(e){return isFinite(e=a(e))&&0<e?Object(o.a)(function(t){t.setUTCFullYear(a(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null},t.a=i;var r=i.range},function(e,t,n){'use strict';var a=n(120),o=n(57),i=+new Date('2000-01-01T00:00:00.000Z')?function(e){var t=new Date(e);return isNaN(t)?null:t}:Object(o.e)(a.b);t.a=i},function(e,t,n){'use strict';var a=n(118),o=n(56),i=n(36);t.a=function(){return Object(a.a)(i._7,i.R,i._5,i.F,i.J,i.N,i.V,i.L,o.g).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}},function(e,t,n){'use strict';var a=n(24);t.a=Object(a.a)('1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf')},function(e,t,n){'use strict';var a=n(24);t.a=Object(a.a)('393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6')},function(e,t,n){'use strict';var a=n(24);t.a=Object(a.a)('3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9')},function(e,t,n){'use strict';var a=n(24);t.a=Object(a.a)('1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5')},function(e,t,n){'use strict';var a=n(7),o=n(4);t.a=Object(o.f)(Object(a.b)(300,0.5,0),Object(a.b)(-240,0.5,1))},function(e,t,n){'use strict';n.d(t,'c',function(){return i}),n.d(t,'a',function(){return r});var a=n(7),o=n(4),i=Object(o.f)(Object(a.b)(-100,0.75,0.35),Object(a.b)(80,1.5,0.8)),r=Object(o.f)(Object(a.b)(260,0.75,0.35),Object(a.b)(80,1.5,0.8)),l=Object(a.b)();t.b=function(e){(0>e||1<e)&&(e-=Math.floor(e));var t=Math.abs(e-0.5);return l.h=360*e-100,l.s=1.5-1.5*t,l.l=0.8-0.9*t,l+''}},function(e,t,n){'use strict';function a(e){var a=e.length;return function(n){return e[Math.max(0,Math.min(a-1,Math.floor(n*a)))]}}n.d(t,'c',function(){return i}),n.d(t,'b',function(){return r}),n.d(t,'d',function(){return l});var o=n(24);t.a=a(Object(o.a)('44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725'));var i=a(Object(o.a)('00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf')),r=a(Object(o.a)('00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4')),l=a(Object(o.a)('0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921'))},function(e,t,n){'use strict';function a(e){function t(a){var o=(a-n)/(i-n);return e(r?Math.max(0,Math.min(1,o)):o)}var n=0,i=1,r=!1;return t.domain=function(e){return arguments.length?(n=+e[0],i=+e[1],t):[n,i]},t.clamp=function(e){return arguments.length?(r=!!e,t):r},t.interpolator=function(n){return arguments.length?(e=n,t):e},t.copy=function(){return a(e).domain([n,i]).clamp(r)},Object(o.b)(t)}t.a=a;var o=n(22)},function(e,t){'use strict';function n(){return new a}function a(){this._='@'+(++o).toString(36)}t.a=n;var o=0;a.prototype=n.prototype={constructor:a,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}}},function(e,t,n){'use strict';var a=n(61),o=n(63);t.a=function(e){var t=Object(a.a)();return t.changedTouches&&(t=t.changedTouches[0]),Object(o.a)(e,t)}},function(e,t,n){'use strict';var a=n(5);t.a=function(e){return'string'==typeof e?new a.a([[document.querySelector(e)]],[document.documentElement]):new a.a([[e]],a.c)}},function(e,t,n){'use strict';var a=n(5),o=n(64);t.a=function(e){'function'!=typeof e&&(e=Object(o.a)(e));for(var t=this._groups,r=t.length,l=Array(r),d=0;d<r;++d)for(var s=t[d],c=s.length,n=l[d]=Array(c),p=0,i,u;p<c;++p)(i=s[p])&&(u=e.call(i,i.__data__,p,s))&&('__data__'in i&&(u.__data__=i.__data__),n[p]=u);return new a.a(l,this._parents)}},function(e,t,n){'use strict';var a=n(5),o=n(122);t.a=function(e){'function'!=typeof e&&(e=Object(o.a)(e));for(var t=this._groups,r=t.length,l=[],d=[],s=0;s<r;++s)for(var c=t[s],p=c.length,n=0,i;n<p;++n)(i=c[n])&&(l.push(e.call(i,i.__data__,n,c)),d.push(i));return new a.a(l,d)}},function(e,t,n){'use strict';var a=n(5),o=n(121);t.a=function(e){'function'!=typeof e&&(e=Object(o.a)(e));for(var t=this._groups,r=t.length,l=Array(r),d=0;d<r;++d)for(var s=t[d],c=s.length,n=l[d]=[],p=0,i;p<c;++p)(i=s[p])&&e.call(i,i.__data__,p,s)&&n.push(i);return new a.a(l,this._parents)}},function(e,t,n){'use strict';function a(e,t,n,a,o,l){for(var d=0,i=t.length,s=l.length,c;d<s;++d)(c=t[d])?(c.__data__=l[d],a[d]=c):n[d]=new r.a(e,l[d]);for(;d<i;++d)(c=t[d])&&(o[d]=c)}function o(e,t,n,a,o,l,s){var c={},p=t.length,u=l.length,g=Array(p),h,i,m;for(h=0;h<p;++h)(i=t[h])&&(g[h]=m=d+s.call(i,i.__data__,h,t),m in c?o[h]=i:c[m]=i);for(h=0;h<u;++h)m=d+s.call(e,l[h],h,l),(i=c[m])?(a[h]=i,i.__data__=l[h],c[m]=null):n[h]=new r.a(e,l[h]);for(h=0;h<p;++h)(i=t[h])&&c[g[h]]===i&&(o[h]=i)}var i=n(5),r=n(123),l=n(256),d='$';t.a=function(e,t){if(!e)return b=Array(this.size()),g=-1,this.each(function(e){b[++g]=e}),b;var n=t?o:a,r=this._parents,d=this._groups;'function'!=typeof e&&(e=Object(l.a)(e));for(var s=d.length,c=Array(s),p=Array(s),u=Array(s),g=0;g<s;++g){var h=r[g],m=d[g],f=m.length,b=e.call(h,h&&h.__data__,g,r),_=b.length,y=p[g]=Array(_),x=c[g]=Array(_),w=u[g]=Array(f);n(h,m,y,x,w,b,t);for(var v=0,C=0,T,k;v<_;++v)if(T=y[v]){for(v>=C&&(C=v+1);!(k=x[C])&&++C<_;);T._next=k||null}}return c=new i.a(c,r),c._enter=p,c._exit=u,c}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t,n){'use strict';var a=n(124),o=n(5);t.a=function(){return new o.a(this._exit||this._groups.map(a.a),this._parents)}},function(e,t,n){'use strict';var a=n(5);t.a=function(e){for(var t=this._groups,o=e._groups,r=t.length,l=o.length,d=Math.min(r,l),s=Array(r),c=0;c<d;++c)for(var p=t[c],u=o[c],g=p.length,n=s[c]=Array(g),h=0,i;h<g;++h)(i=p[h]||u[h])&&(n[h]=i);for(;c<r;++c)s[c]=t[c];return new a.a(s,this._parents)}},function(e,t){'use strict';t.a=function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var a=e[t],o=a.length-1,i=a[o],r;0<=--o;)(r=a[o])&&(i&&i!==r.nextSibling&&i.parentNode.insertBefore(r,i),i=r);return this}},function(e,t,n){'use strict';function a(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var o=n(5);t.a=function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=a);for(var r=this._groups,l=r.length,d=Array(l),s=0;s<l;++s){for(var c=r[s],p=c.length,n=d[s]=Array(p),u=0,i;u<p;++u)(i=c[u])&&(n[u]=i);n.sort(t)}return new o.a(d,this._parents).order()}},function(e,t){'use strict';t.a=function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this}},function(e,t){'use strict';t.a=function(){var e=Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e}},function(e,t){'use strict';t.a=function(){for(var e=this._groups,t=0,a=e.length;t<a;++t)for(var o=e[t],r=0,i=o.length,n;r<i;++r)if(n=o[r],n)return n;return null}},function(e,t){'use strict';t.a=function(){var e=0;return this.each(function(){++e}),e}},function(e,t){'use strict';t.a=function(){return!this.node()}},function(e,t){'use strict';t.a=function(e){for(var t=this._groups,a=0,o=t.length;a<o;++a)for(var r=t[a],l=0,i=r.length,n;l<i;++l)(n=r[l])&&e.call(n,n.__data__,l,r);return this}},function(e,t,n){'use strict';function a(e){return function(){this.removeAttribute(e)}}function o(e){return function(){this.removeAttributeNS(e.space,e.local)}}function i(e,t){return function(){this.setAttribute(e,t)}}function r(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function l(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function d(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}var s=n(59);t.a=function(e,t){var n=Object(s.a)(e);if(2>arguments.length){var c=this.node();return n.local?c.getAttributeNS(n.space,n.local):c.getAttribute(n)}return this.each((null==t?n.local?o:a:'function'==typeof t?n.local?d:l:n.local?r:i)(n,t))}},function(e,t){'use strict';function n(e){return function(){delete this[e]}}function a(e,t){return function(){this[e]=t}}function o(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}t.a=function(e,t){return 1<arguments.length?this.each((null==t?n:'function'==typeof t?o:a)(e,t)):this.node()[e]}},function(e,t){'use strict';function a(e){return e.trim().split(/^|\s+/)}function o(e){return e.classList||new n(e)}function n(e){this._node=e,this._names=a(e.getAttribute('class')||'')}function i(e,t){for(var a=o(e),r=-1,i=t.length;++r<i;)a.add(t[r])}function r(e,t){for(var a=o(e),r=-1,i=t.length;++r<i;)a.remove(t[r])}function l(e){return function(){i(this,e)}}function d(e){return function(){r(this,e)}}function s(e,t){return function(){(t.apply(this,arguments)?i:r)(this,e)}}n.prototype={add:function(e){var t=this._names.indexOf(e);0>t&&(this._names.push(e),this._node.setAttribute('class',this._names.join(' ')))},remove:function(e){var t=this._names.indexOf(e);0<=t&&(this._names.splice(t,1),this._node.setAttribute('class',this._names.join(' ')))},contains:function(e){return 0<=this._names.indexOf(e)}},t.a=function(e,t){var r=a(e+'');if(2>arguments.length){for(var c=o(this.node()),p=-1,i=r.length;++p<i;)if(!c.contains(r[p]))return!1;return!0}return this.each(('function'==typeof t?s:t?l:d)(r,t))}},function(e,t){'use strict';function n(){this.textContent=''}function a(e){return function(){this.textContent=e}}function o(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?'':t}}t.a=function(e){return arguments.length?this.each(null==e?n:('function'==typeof e?o:a)(e)):this.node().textContent}},function(e,t){'use strict';function n(){this.innerHTML=''}function a(e){return function(){this.innerHTML=e}}function o(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?'':t}}t.a=function(e){return arguments.length?this.each(null==e?n:('function'==typeof e?o:a)(e)):this.node().innerHTML}},function(e,t){'use strict';function n(){this.nextSibling&&this.parentNode.appendChild(this)}t.a=function(){return this.each(n)}},function(e,t){'use strict';function n(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}t.a=function(){return this.each(n)}},function(e,t,n){'use strict';var a=n(58);t.a=function(e){var t='function'==typeof e?e:Object(a.a)(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})}},function(e,t,n){'use strict';function a(){return null}var o=n(58),i=n(64);t.a=function(e,t){var n='function'==typeof e?e:Object(o.a)(e),r=null==t?a:'function'==typeof t?t:Object(i.a)(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})}},function(e,t){'use strict';function n(){var e=this.parentNode;e&&e.removeChild(this)}t.a=function(){return this.each(n)}},function(e,t){'use strict';t.a=function(e){return arguments.length?this.property('__data__',e):this.node().__data__}},function(e,t,n){'use strict';function a(e,t,n){var a=Object(r.a)(e),o=a.CustomEvent;'function'==typeof o?o=new o(t,n):(o=a.document.createEvent('Event'),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}function o(e,t){return function(){return a(this,e,t)}}function i(e,t){return function(){return a(this,e,t.apply(this,arguments))}}var r=n(65);t.a=function(e,t){return this.each(('function'==typeof t?i:o)(e,t))}},function(e,t,n){'use strict';var a=n(5);t.a=function(e){return'string'==typeof e?new a.a([document.querySelectorAll(e)],[document.documentElement]):new a.a([null==e?[]:e],a.c)}},function(e,t,n){'use strict';var a=n(61),o=n(63);t.a=function(e,t,r){3>arguments.length&&(r=t,t=Object(a.a)().changedTouches);for(var l=0,i=t?t.length:0,n;l<i;++l)if((n=t[l]).identifier===r)return Object(o.a)(e,n);return null}},function(e,t,n){'use strict';var a=n(61),o=n(63);t.a=function(e,t){null==t&&(t=Object(a.a)().touches);for(var r=0,i=t?t.length:0,n=Array(i);r<i;++r)n[r]=Object(o.a)(e,t[r]);return n}},function(e,t,n){'use strict';function a(e){return'translate('+(e+0.5)+',0)'}function o(e){return'translate(0,'+(e+0.5)+')'}function i(e){return function(t){return+e(t)}}function r(e){var t=s(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}function l(){return!this.__axis}function d(e,t){function n(n){var a=null==b?t.ticks?t.ticks.apply(t,d):t.domain():b,o=null==y?t.tickFormat?t.tickFormat.apply(t,d):p.a:y,c=s(w,0)+C,k=t.range(),S=+k[0]+0.5,E=+k[k.length-1]+0.5,z=(t.bandwidth?r:i)(t.copy()),A=n.selection?n.selection():n,M=A.selectAll('.domain').data([null]),D=A.selectAll('.tick').data(a,t).order(),j=D.exit(),N=D.enter().append('g').attr('class','tick'),L=D.select('line'),P=D.select('text');M=M.merge(M.enter().insert('path','.tick').attr('class','domain').attr('stroke','#000')),D=D.merge(N),L=L.merge(N.append('line').attr('stroke','#000').attr(T+'2',_*w)),P=P.merge(N.append('text').attr('fill','#000').attr(T,_*c).attr('dy',e===u?'0em':e===h?'0.71em':'0.32em')),n!==A&&(M=M.transition(n),D=D.transition(n),L=L.transition(n),P=P.transition(n),j=j.transition(n).attr('opacity',f).attr('transform',function(e){return isFinite(e=z(e))?x(e):this.getAttribute('transform')}),N.attr('opacity',f).attr('transform',function(e){var t=this.parentNode.__axis;return x(t&&isFinite(t=t(e))?t:z(e))})),j.remove(),M.attr('d',e===m||e==g?'M'+_*v+','+S+'H0.5V'+E+'H'+_*v:'M'+S+','+_*v+'V0.5H'+E+'V'+_*v),D.attr('opacity',1).attr('transform',function(e){return x(z(e))}),L.attr(T+'2',_*w),P.attr(T,_*c).text(o),A.filter(l).attr('fill','none').attr('font-size',10).attr('font-family','sans-serif').attr('text-anchor',e===g?'start':e===m?'end':'middle'),A.each(function(){this.__axis=z})}var d=[],b=null,y=null,w=6,v=6,C=3,_=e===u||e===m?-1:1,T=e===m||e===g?'x':'y',x=e===u||e===h?a:o;return n.scale=function(e){return arguments.length?(t=e,n):t},n.ticks=function(){return d=c.a.call(arguments),n},n.tickArguments=function(e){return arguments.length?(d=null==e?[]:c.a.call(e),n):d.slice()},n.tickValues=function(e){return arguments.length?(b=null==e?null:c.a.call(e),n):b&&b.slice()},n.tickFormat=function(e){return arguments.length?(y=e,n):y},n.tickSize=function(e){return arguments.length?(w=v=+e,n):w},n.tickSizeInner=function(e){return arguments.length?(w=+e,n):w},n.tickSizeOuter=function(e){return arguments.length?(v=+e,n):v},n.tickPadding=function(e){return arguments.length?(C=+e,n):C},n}var s=Math.max;t.d=function(e){return d(u,e)},t.c=function(e){return d(g,e)},t.a=function(e){return d(h,e)},t.b=function(e){return d(m,e)};var c=n(283),p=n(284),u=1,g=2,h=3,m=4,f=1e-6},function(e,t,n){'use strict';n.d(t,'a',function(){return a});var a=Array.prototype.slice},function(e,t){'use strict';t.a=function(e){return e}},function(e,t,n){var a,o,i;(function(r,l){o=[n(286)],a=l,i='function'==typeof a?a.apply(t,o):a,!(void 0!==i&&(e.exports=i))})(this,function(e){return function(){function t(e){p=a(e),u=p.createSVGPoint(),document.body.appendChild(c)}function n(){var t=e.select(document.createElement('div'));return t.style('position','absolute').style('top',0).style('opacity',0).style('pointer-events','none').style('box-sizing','border-box'),t.node()}function a(e){return e=e.node(),'svg'===e.tagName.toLowerCase()?e:e.ownerSVGElement}function o(){return null===c&&(c=n(),document.body.appendChild(c)),e.select(c)}function i(){for(var t=g||e.event.target;'undefined'==typeof t.getScreenCTM&&'undefined'===t.parentNode;)t=t.parentNode;var n={},a=t.getScreenCTM(),o=t.getBBox(),i=o.width,r=o.height,l=o.x,d=o.y;return u.x=l,u.y=d,n.nw=u.matrixTransform(a),u.x+=i,n.ne=u.matrixTransform(a),u.y+=r,n.se=u.matrixTransform(a),u.x-=i,n.sw=u.matrixTransform(a),u.y-=r/2,n.w=u.matrixTransform(a),u.x+=i,n.e=u.matrixTransform(a),u.x-=i/2,u.y-=r/2,n.n=u.matrixTransform(a),u.y+=r,n.s=u.matrixTransform(a),n}function r(e){return'function'==typeof e?e:function(){return e}}var l=function(){return'n'},d=function(){return[0,0]},s=function(){return' '},c=n(),p=null,u=null,g=null;t.show=function(){var e=Array.prototype.slice.call(arguments);e[e.length-1]instanceof SVGElement&&(g=e.pop());var n=s.apply(this,e),a=d.apply(this,e),r=l.apply(this,e),c=o(),p=m.length,i=document.documentElement.scrollTop||document.body.scrollTop,u=document.documentElement.scrollLeft||document.body.scrollLeft,f;for(c.html(n).style('opacity',1).style('pointer-events','all');p--;)c.classed(m[p],!1);return f=h.get(r).apply(this),c.classed(r,!0).style('top',f.top+a[0]+i+'px').style('left',f.left+a[1]+u+'px'),t},t.hide=function(){var e=o();return e.style('opacity',0).style('pointer-events','none'),t},t.attr=function(a){if(2>arguments.length&&'string'==typeof a)return o().attr(a);var i=Array.prototype.slice.call(arguments);return e.selection.prototype.attr.apply(o(),i),t},t.style=function(a){if(2>arguments.length&&'string'==typeof a)return o().style(a);var i=Array.prototype.slice.call(arguments);return e.selection.prototype.style.apply(o(),i),t},t.direction=function(e){return arguments.length?(l=null==e?e:r(e),t):l},t.offset=function(e){return arguments.length?(d=null==e?e:r(e),t):d},t.html=function(e){return arguments.length?(s=null==e?e:r(e),t):s},t.destroy=function(){return c&&(o().remove(),c=null),t};var h=e.map({n:function(){var e=i();return{top:e.n.y-c.offsetHeight,left:e.n.x-c.offsetWidth/2}},s:function(){var e=i();return{top:e.s.y,left:e.s.x-c.offsetWidth/2}},e:function(){var e=i();return{top:e.e.y-c.offsetHeight/2,left:e.e.x}},w:function(){var e=i();return{top:e.w.y-c.offsetHeight/2,left:e.w.x-c.offsetWidth}},nw:function(){var e=i();return{top:e.nw.y-c.offsetHeight,left:e.nw.x-c.offsetWidth}},ne:function(){var e=i();return{top:e.ne.y-c.offsetHeight,left:e.ne.x}},sw:function(){var e=i();return{top:e.sw.y,left:e.sw.x-c.offsetWidth}},se:function(){var e=i();return{top:e.se.y,left:e.e.x}}}),m=h.keys();return t}})},function(e,t,n){'use strict';Object.defineProperty(t,'__esModule',{value:!0});var a=n(287);n.d(t,'version',function(){return a.a});var o=n(2);n.d(t,'bisect',function(){return o.bisect}),n.d(t,'bisectRight',function(){return o.bisectRight}),n.d(t,'bisectLeft',function(){return o.bisectLeft}),n.d(t,'ascending',function(){return o.ascending}),n.d(t,'bisector',function(){return o.bisector}),n.d(t,'cross',function(){return o.cross}),n.d(t,'descending',function(){return o.descending}),n.d(t,'deviation',function(){return o.deviation}),n.d(t,'extent',function(){return o.extent}),n.d(t,'histogram',function(){return o.histogram}),n.d(t,'thresholdFreedmanDiaconis',function(){return o.thresholdFreedmanDiaconis}),n.d(t,'thresholdScott',function(){return o.thresholdScott}),n.d(t,'thresholdSturges',function(){return o.thresholdSturges}),n.d(t,'max',function(){return o.max}),n.d(t,'mean',function(){return o.mean}),n.d(t,'median',function(){return o.median}),n.d(t,'merge',function(){return o.merge}),n.d(t,'min',function(){return o.min}),n.d(t,'pairs',function(){return o.pairs}),n.d(t,'permute',function(){return o.permute}),n.d(t,'quantile',function(){return o.quantile}),n.d(t,'range',function(){return o.range}),n.d(t,'scan',function(){return o.scan}),n.d(t,'shuffle',function(){return o.shuffle}),n.d(t,'sum',function(){return o.sum}),n.d(t,'ticks',function(){return o.ticks}),n.d(t,'tickIncrement',function(){return o.tickIncrement}),n.d(t,'tickStep',function(){return o.tickStep}),n.d(t,'transpose',function(){return o.transpose}),n.d(t,'variance',function(){return o.variance}),n.d(t,'zip',function(){return o.zip});var i=n(126);n.d(t,'axisTop',function(){return i.axisTop}),n.d(t,'axisRight',function(){return i.axisRight}),n.d(t,'axisBottom',function(){return i.axisBottom}),n.d(t,'axisLeft',function(){return i.axisLeft});var r=n(288);n.d(t,'brush',function(){return r.a}),n.d(t,'brushX',function(){return r.c}),n.d(t,'brushY',function(){return r.d}),n.d(t,'brushSelection',function(){return r.b});var l=n(329);n.d(t,'chord',function(){return l.a}),n.d(t,'ribbon',function(){return l.b});var d=n(21);n.d(t,'nest',function(){return d.d}),n.d(t,'set',function(){return d.e}),n.d(t,'map',function(){return d.c}),n.d(t,'keys',function(){return d.b}),n.d(t,'values',function(){return d.f}),n.d(t,'entries',function(){return d.a});var s=n(7);n.d(t,'color',function(){return s.a}),n.d(t,'rgb',function(){return s.f}),n.d(t,'hsl',function(){return s.d}),n.d(t,'lab',function(){return s.e}),n.d(t,'hcl',function(){return s.c}),n.d(t,'cubehelix',function(){return s.b});var c=n(13);n.d(t,'dispatch',function(){return c.a});var p=n(66);n.d(t,'drag',function(){return p.a}),n.d(t,'dragDisable',function(){return p.b}),n.d(t,'dragEnable',function(){return p.c});var u=n(69);n.d(t,'dsvFormat',function(){return u.e}),n.d(t,'csvParse',function(){return u.c}),n.d(t,'csvParseRows',function(){return u.d}),n.d(t,'csvFormat',function(){return u.a}),n.d(t,'csvFormatRows',function(){return u.b}),n.d(t,'tsvParse',function(){return u.h}),n.d(t,'tsvParseRows',function(){return u.i}),n.d(t,'tsvFormat',function(){return u.f}),n.d(t,'tsvFormatRows',function(){return u.g});var g=n(131);n.d(t,'easeLinear',function(){return g.y}),n.d(t,'easeQuad',function(){return g.D}),n.d(t,'easeQuadIn',function(){return g.E}),n.d(t,'easeQuadOut',function(){return g.G}),n.d(t,'easeQuadInOut',function(){return g.F}),n.d(t,'easeCubic',function(){return g.m}),n.d(t,'easeCubicIn',function(){return g.n}),n.d(t,'easeCubicOut',function(){return g.p}),n.d(t,'easeCubicInOut',function(){return g.o}),n.d(t,'easePoly',function(){return g.z}),n.d(t,'easePolyIn',function(){return g.A}),n.d(t,'easePolyOut',function(){return g.C}),n.d(t,'easePolyInOut',function(){return g.B}),n.d(t,'easeSin',function(){return g.H}),n.d(t,'easeSinIn',function(){return g.I}),n.d(t,'easeSinOut',function(){return g.K}),n.d(t,'easeSinInOut',function(){return g.J}),n.d(t,'easeExp',function(){return g.u}),n.d(t,'easeExpIn',function(){return g.v}),n.d(t,'easeExpOut',function(){return g.x}),n.d(t,'easeExpInOut',function(){return g.w}),n.d(t,'easeCircle',function(){return g.i}),n.d(t,'easeCircleIn',function(){return g.j}),n.d(t,'easeCircleOut',function(){return g.l}),n.d(t,'easeCircleInOut',function(){return g.k}),n.d(t,'easeBounce',function(){return g.e}),n.d(t,'easeBounceIn',function(){return g.f}),n.d(t,'easeBounceOut',function(){return g.h}),n.d(t,'easeBounceInOut',function(){return g.g}),n.d(t,'easeBack',function(){return g.a}),n.d(t,'easeBackIn',function(){return g.b}),n.d(t,'easeBackOut',function(){return g.d}),n.d(t,'easeBackInOut',function(){return g.c}),n.d(t,'easeElastic',function(){return g.q}),n.d(t,'easeElasticIn',function(){return g.r}),n.d(t,'easeElasticOut',function(){return g.t}),n.d(t,'easeElasticInOut',function(){return g.s});var h=n(337);n.d(t,'forceCenter',function(){return h.a}),n.d(t,'forceCollide',function(){return h.b}),n.d(t,'forceLink',function(){return h.c}),n.d(t,'forceManyBody',function(){return h.d}),n.d(t,'forceSimulation',function(){return h.e}),n.d(t,'forceX',function(){return h.f}),n.d(t,'forceY',function(){return h.g});var m=n(54);n.d(t,'formatDefaultLocale',function(){return m.b}),n.d(t,'format',function(){return m.a}),n.d(t,'formatPrefix',function(){return m.d}),n.d(t,'formatLocale',function(){return m.c}),n.d(t,'formatSpecifier',function(){return m.e}),n.d(t,'precisionFixed',function(){return m.f}),n.d(t,'precisionPrefix',function(){return m.g}),n.d(t,'precisionRound',function(){return m.h});var f=n(357);n.d(t,'geoArea',function(){return f.c}),n.d(t,'geoBounds',function(){return f.h}),n.d(t,'geoCentroid',function(){return f.i}),n.d(t,'geoCircle',function(){return f.j}),n.d(t,'geoClipExtent',function(){return f.k}),n.d(t,'geoContains',function(){return f.r}),n.d(t,'geoDistance',function(){return f.s}),n.d(t,'geoGraticule',function(){return f.x}),n.d(t,'geoGraticule10',function(){return f.y}),n.d(t,'geoInterpolate',function(){return f.A}),n.d(t,'geoLength',function(){return f.B}),n.d(t,'geoPath',function(){return f.G}),n.d(t,'geoAlbers',function(){return f.a}),n.d(t,'geoAlbersUsa',function(){return f.b}),n.d(t,'geoAzimuthalEqualArea',function(){return f.d}),n.d(t,'geoAzimuthalEqualAreaRaw',function(){return f.e}),n.d(t,'geoAzimuthalEquidistant',function(){return f.f}),n.d(t,'geoAzimuthalEquidistantRaw',function(){return f.g}),n.d(t,'geoConicConformal',function(){return f.l}),n.d(t,'geoConicConformalRaw',function(){return f.m}),n.d(t,'geoConicEqualArea',function(){return f.n}),n.d(t,'geoConicEqualAreaRaw',function(){return f.o}),n.d(t,'geoConicEquidistant',function(){return f.p}),n.d(t,'geoConicEquidistantRaw',function(){return f.q}),n.d(t,'geoEquirectangular',function(){return f.t}),n.d(t,'geoEquirectangularRaw',function(){return f.u}),n.d(t,'geoGnomonic',function(){return f.v}),n.d(t,'geoGnomonicRaw',function(){return f.w}),n.d(t,'geoIdentity',function(){return f.z}),n.d(t,'geoProjection',function(){return f.H}),n.d(t,'geoProjectionMutator',function(){return f.I}),n.d(t,'geoMercator',function(){return f.C}),n.d(t,'geoMercatorRaw',function(){return f.D}),n.d(t,'geoOrthographic',function(){return f.E}),n.d(t,'geoOrthographicRaw',function(){return f.F}),n.d(t,'geoStereographic',function(){return f.K}),n.d(t,'geoStereographicRaw',function(){return f.L}),n.d(t,'geoTransverseMercator',function(){return f.O}),n.d(t,'geoTransverseMercatorRaw',function(){return f.P}),n.d(t,'geoRotation',function(){return f.J}),n.d(t,'geoStream',function(){return f.M}),n.d(t,'geoTransform',function(){return f.N});var b=n(385);n.d(t,'cluster',function(){return b.a}),n.d(t,'hierarchy',function(){return b.b}),n.d(t,'pack',function(){return b.c}),n.d(t,'packSiblings',function(){return b.e}),n.d(t,'packEnclose',function(){return b.d}),n.d(t,'partition',function(){return b.f}),n.d(t,'stratify',function(){return b.g}),n.d(t,'tree',function(){return b.h}),n.d(t,'treemap',function(){return b.i}),n.d(t,'treemapBinary',function(){return b.j}),n.d(t,'treemapDice',function(){return b.k}),n.d(t,'treemapSlice',function(){return b.m}),n.d(t,'treemapSliceDice',function(){return b.n}),n.d(t,'treemapSquarify',function(){return b.o}),n.d(t,'treemapResquarify',function(){return b.l});var _=n(4);n.d(t,'interpolate',function(){return _.a}),n.d(t,'interpolateArray',function(){return _.b}),n.d(t,'interpolateBasis',function(){return _.c}),n.d(t,'interpolateBasisClosed',function(){return _.d}),n.d(t,'interpolateDate',function(){return _.g}),n.d(t,'interpolateNumber',function(){return _.m}),n.d(t,'interpolateObject',function(){return _.n}),n.d(t,'interpolateRound',function(){return _.r}),n.d(t,'interpolateString',function(){return _.s}),n.d(t,'interpolateTransformCss',function(){return _.t}),n.d(t,'interpolateTransformSvg',function(){return _.u}),n.d(t,'interpolateZoom',function(){return _.v}),n.d(t,'interpolateRgb',function(){return _.o}),n.d(t,'interpolateRgbBasis',function(){return _.p}),n.d(t,'interpolateRgbBasisClosed',function(){return _.q}),n.d(t,'interpolateHsl',function(){return _.j}),n.d(t,'interpolateHslLong',function(){return _.k}),n.d(t,'interpolateLab',function(){return _.l}),n.d(t,'interpolateHcl',function(){return _.h}),n.d(t,'interpolateHclLong',function(){return _.i}),n.d(t,'interpolateCubehelix',function(){return _.e}),n.d(t,'interpolateCubehelixLong',function(){return _.f}),n.d(t,'quantize',function(){return _.w});var y=n(14);n.d(t,'path',function(){return y.a});var x=n(407);n.d(t,'polygonArea',function(){return x.a}),n.d(t,'polygonCentroid',function(){return x.b}),n.d(t,'polygonHull',function(){return x.d}),n.d(t,'polygonContains',function(){return x.c}),n.d(t,'polygonLength',function(){return x.e});var w=n(72);n.d(t,'quadtree',function(){return w.a});var v=n(414);n.d(t,'queue',function(){return v.a});var C=n(417);n.d(t,'randomUniform',function(){return C.f}),n.d(t,'randomNormal',function(){return C.e}),n.d(t,'randomLogNormal',function(){return C.d}),n.d(t,'randomBates',function(){return C.a}),n.d(t,'randomIrwinHall',function(){return C.c}),n.d(t,'randomExponential',function(){return C.b});var T=n(422);n.d(t,'request',function(){return T.d}),n.d(t,'html',function(){return T.b}),n.d(t,'json',function(){return T.c}),n.d(t,'text',function(){return T.e}),n.d(t,'xml',function(){return T.g}),n.d(t,'csv',function(){return T.a}),n.d(t,'tsv',function(){return T.f});var k=n(90);n.d(t,'scaleBand',function(){return k.scaleBand}),n.d(t,'scalePoint',function(){return k.scalePoint}),n.d(t,'scaleIdentity',function(){return k.scaleIdentity}),n.d(t,'scaleLinear',function(){return k.scaleLinear}),n.d(t,'scaleLog',function(){return k.scaleLog}),n.d(t,'scaleOrdinal',function(){return k.scaleOrdinal}),n.d(t,'scaleImplicit',function(){return k.scaleImplicit}),n.d(t,'scalePow',function(){return k.scalePow}),n.d(t,'scaleSqrt',function(){return k.scaleSqrt}),n.d(t,'scaleQuantile',function(){return k.scaleQuantile}),n.d(t,'scaleQuantize',function(){return k.scaleQuantize}),n.d(t,'scaleThreshold',function(){return k.scaleThreshold}),n.d(t,'scaleTime',function(){return k.scaleTime}),n.d(t,'scaleUtc',function(){return k.scaleUtc}),n.d(t,'schemeCategory10',function(){return k.schemeCategory10}),n.d(t,'schemeCategory20b',function(){return k.schemeCategory20b}),n.d(t,'schemeCategory20c',function(){return k.schemeCategory20c}),n.d(t,'schemeCategory20',function(){return k.schemeCategory20}),n.d(t,'interpolateCubehelixDefault',function(){return k.interpolateCubehelixDefault}),n.d(t,'interpolateRainbow',function(){return k.interpolateRainbow}),n.d(t,'interpolateWarm',function(){return k.interpolateWarm}),n.d(t,'interpolateCool',function(){return k.interpolateCool}),n.d(t,'interpolateViridis',function(){return k.interpolateViridis}),n.d(t,'interpolateMagma',function(){return k.interpolateMagma}),n.d(t,'interpolateInferno',function(){return k.interpolateInferno}),n.d(t,'interpolatePlasma',function(){return k.interpolatePlasma}),n.d(t,'scaleSequential',function(){return k.scaleSequential});var S=n(1);n.d(t,'creator',function(){return S.creator}),n.d(t,'local',function(){return S.local}),n.d(t,'matcher',function(){return S.matcher}),n.d(t,'mouse',function(){return S.mouse}),n.d(t,'namespace',function(){return S.namespace}),n.d(t,'namespaces',function(){return S.namespaces}),n.d(t,'select',function(){return S.select}),n.d(t,'selectAll',function(){return S.selectAll}),n.d(t,'selection',function(){return S.selection}),n.d(t,'selector',function(){return S.selector}),n.d(t,'selectorAll',function(){return S.selectorAll}),n.d(t,'style',function(){return S.style}),n.d(t,'touch',function(){return S.touch}),n.d(t,'touches',function(){return S.touches}),n.d(t,'window',function(){return S.window}),n.d(t,'event',function(){return S.event}),n.d(t,'customEvent',function(){return S.customEvent});var E=n(429);n.d(t,'arc',function(){return E.a}),n.d(t,'area',function(){return E.b}),n.d(t,'line',function(){return E.v}),n.d(t,'pie',function(){return E.A}),n.d(t,'areaRadial',function(){return E.c}),n.d(t,'radialArea',function(){return E.C}),n.d(t,'lineRadial',function(){return E.w}),n.d(t,'radialLine',function(){return E.D}),n.d(t,'pointRadial',function(){return E.B}),n.d(t,'linkHorizontal',function(){return E.x}),n.d(t,'linkVertical',function(){return E.z}),n.d(t,'linkRadial',function(){return E.y}),n.d(t,'symbol',function(){return E.P}),n.d(t,'symbols',function(){return E.X}),n.d(t,'symbolCircle',function(){return E.Q}),n.d(t,'symbolCross',function(){return E.R}),n.d(t,'symbolDiamond',function(){return E.S}),n.d(t,'symbolSquare',function(){return E.T}),n.d(t,'symbolStar',function(){return E.U}),n.d(t,'symbolTriangle',function(){return E.V}),n.d(t,'symbolWye',function(){return E.W}),n.d(t,'curveBasisClosed',function(){return E.e}),n.d(t,'curveBasisOpen',function(){return E.f}),n.d(t,'curveBasis',function(){return E.d}),n.d(t,'curveBundle',function(){return E.g}),n.d(t,'curveCardinalClosed',function(){return E.i}),n.d(t,'curveCardinalOpen',function(){return E.j}),n.d(t,'curveCardinal',function(){return E.h}),n.d(t,'curveCatmullRomClosed',function(){return E.l}),n.d(t,'curveCatmullRomOpen',function(){return E.m}),n.d(t,'curveCatmullRom',function(){return E.k}),n.d(t,'curveLinearClosed',function(){return E.o}),n.d(t,'curveLinear',function(){return E.n}),n.d(t,'curveMonotoneX',function(){return E.p}),n.d(t,'curveMonotoneY',function(){return E.q}),n.d(t,'curveNatural',function(){return E.r}),n.d(t,'curveStep',function(){return E.s}),n.d(t,'curveStepAfter',function(){return E.t}),n.d(t,'curveStepBefore',function(){return E.u}),n.d(t,'stack',function(){return E.E}),n.d(t,'stackOffsetExpand',function(){return E.G}),n.d(t,'stackOffsetDiverging',function(){return E.F}),n.d(t,'stackOffsetNone',function(){return E.H}),n.d(t,'stackOffsetSilhouette',function(){return E.I}),n.d(t,'stackOffsetWiggle',function(){return E.J}),n.d(t,'stackOrderAscending',function(){return E.K}),n.d(t,'stackOrderDescending',function(){return E.L}),n.d(t,'stackOrderInsideOut',function(){return E.M}),n.d(t,'stackOrderNone',function(){return E.N}),n.d(t,'stackOrderReverse',function(){return E.O});var z=n(36);n.d(t,'timeInterval',function(){return z.g}),n.d(t,'timeMillisecond',function(){return z.h}),n.d(t,'timeMilliseconds',function(){return z.i}),n.d(t,'utcMillisecond',function(){return z.L}),n.d(t,'utcMilliseconds',function(){return z.M}),n.d(t,'timeSecond',function(){return z.r}),n.d(t,'timeSeconds',function(){return z.s}),n.d(t,'utcSecond',function(){return z.V}),n.d(t,'utcSeconds',function(){return z.W}),n.d(t,'timeMinute',function(){return z.j}),n.d(t,'timeMinutes',function(){return z.k}),n.d(t,'timeHour',function(){return z.e}),n.d(t,'timeHours',function(){return z.f}),n.d(t,'timeDay',function(){return z.a}),n.d(t,'timeDays',function(){return z.b}),n.d(t,'timeWeek',function(){return z.B}),n.d(t,'timeWeeks',function(){return z.C}),n.d(t,'timeSunday',function(){return z.t}),n.d(t,'timeSundays',function(){return z.u}),n.d(t,'timeMonday',function(){return z.l}),n.d(t,'timeMondays',function(){return z.m}),n.d(t,'timeTuesday',function(){return z.x}),n.d(t,'timeTuesdays',function(){return z.y}),n.d(t,'timeWednesday',function(){return z.z}),n.d(t,'timeWednesdays',function(){return z.A}),n.d(t,'timeThursday',function(){return z.v}),n.d(t,'timeThursdays',function(){return z.w}),n.d(t,'timeFriday',function(){return z.c}),n.d(t,'timeFridays',function(){return z.d}),n.d(t,'timeSaturday',function(){return z.p}),n.d(t,'timeSaturdays',function(){return z.q}),n.d(t,'timeMonth',function(){return z.n}),n.d(t,'timeMonths',function(){return z.o}),n.d(t,'timeYear',function(){return z.D}),n.d(t,'timeYears',function(){return z.E}),n.d(t,'utcMinute',function(){return z.N}),n.d(t,'utcMinutes',function(){return z.O}),n.d(t,'utcHour',function(){return z.J}),n.d(t,'utcHours',function(){return z.K}),n.d(t,'utcDay',function(){return z.F}),n.d(t,'utcDays',function(){return z.G}),n.d(t,'utcWeek',function(){return z._5}),n.d(t,'utcWeeks',function(){return z._6}),n.d(t,'utcSunday',function(){return z.X}),n.d(t,'utcSundays',function(){return z.Y}),n.d(t,'utcMonday',function(){return z.P}),n.d(t,'utcMondays',function(){return z.Q}),n.d(t,'utcTuesday',function(){return z._1}),n.d(t,'utcTuesdays',function(){return z._2}),n.d(t,'utcWednesday',function(){return z._3}),n.d(t,'utcWednesdays',function(){return z._4}),n.d(t,'utcThursday',function(){return z.Z}),n.d(t,'utcThursdays',function(){return z._0}),n.d(t,'utcFriday',function(){return z.H}),n.d(t,'utcFridays',function(){return z.I}),n.d(t,'utcSaturday',function(){return z.T}),n.d(t,'utcSaturdays',function(){return z.U}),n.d(t,'utcMonth',function(){return z.R}),n.d(t,'utcMonths',function(){return z.S}),n.d(t,'utcYear',function(){return z._7}),n.d(t,'utcYears',function(){return z._8});var A=n(56);n.d(t,'timeFormatDefaultLocale',function(){return A.d}),n.d(t,'timeFormat',function(){return A.c}),n.d(t,'timeParse',function(){return A.f}),n.d(t,'utcFormat',function(){return A.g}),n.d(t,'utcParse',function(){return A.h}),n.d(t,'timeFormatLocale',function(){return A.e}),n.d(t,'isoFormat',function(){return A.a}),n.d(t,'isoParse',function(){return A.b});var M=n(37);n.d(t,'now',function(){return M.b}),n.d(t,'timer',function(){return M.d}),n.d(t,'timerFlush',function(){return M.e}),n.d(t,'timeout',function(){return M.c}),n.d(t,'interval',function(){return M.a});var D=n(67);n.d(t,'transition',function(){return D.c}),n.d(t,'active',function(){return D.a}),n.d(t,'interrupt',function(){return D.b});var j=n(454);n.d(t,'voronoi',function(){return j.a});var N=n(459);n.d(t,'zoom',function(){return N.a}),n.d(t,'zoomTransform',function(){return N.c}),n.d(t,'zoomIdentity',function(){return N.b})},function(e,t,n){'use strict';n.d(t,'a',function(){return a});var a='4.10.2',e='index'},function(e,t,n){'use strict';var a=n(289);n.d(t,'a',function(){return a.d}),n.d(t,'c',function(){return a.b}),n.d(t,'d',function(){return a.c}),n.d(t,'b',function(){return a.a})},function(e,t,n){'use strict';function a(e){return{type:e}}function o(){return!m.event.button}function i(){var e=this.ownerSVGElement||this;return[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function r(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function l(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function d(e){function t(t){var o=t.property('__brush',N).selectAll('.overlay').data([a('overlay')]);o.enter().append('rect').attr('class','overlay').attr('pointer-events','all').attr('cursor',z.overlay).merge(o).each(function(){var e=r(this).extent;Object(m.select)(this).attr('x',e[0][0]).attr('y',e[0][1]).attr('width',e[1][0]-e[0][0]).attr('height',e[1][1]-e[0][1])}),t.selectAll('.selection').data([a('selection')]).enter().append('rect').attr('class','selection').attr('cursor',z.selection).attr('fill','#777').attr('fill-opacity',0.3).attr('stroke','#fff').attr('shape-rendering','crispEdges');var i=t.selectAll('.handle').data(e.handles,function(e){return e.type});i.exit().remove(),i.enter().append('rect').attr('class',function(e){return'handle handle--'+e.type}).attr('cursor',function(e){return z[e.type]}),t.each(n).attr('fill','none').attr('pointer-events','all').style('-webkit-tap-highlight-color','rgba(0,0,0,0)').on('mousedown.brush touchstart.brush',E)}function n(){var e=Object(m.select)(this),t=r(this).selection;t?(e.selectAll('.selection').style('display',null).attr('x',t[0][0]).attr('y',t[0][1]).attr('width',t[1][0]-t[0][0]).attr('height',t[1][1]-t[0][1]),e.selectAll('.handle').style('display',null).attr('x',function(e){return'e'===e.type[e.type.length-1]?t[1][0]-q/2:t[0][0]-q/2}).attr('y',function(e){return's'===e.type[0]?t[1][1]-q/2:t[0][1]-q/2}).attr('width',function(e){return'n'===e.type||'s'===e.type?t[1][0]-t[0][0]+q:q}).attr('height',function(e){return'e'===e.type||'w'===e.type?t[1][1]-t[0][1]+q:q})):e.selectAll('.selection,.handle').style('display','none').attr('x',null).attr('y',null).attr('width',null).attr('height',null)}function d(e,t){return e.__brush.emitter||new S(e,t)}function S(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function E(){function t(){var e=Object(m.mouse)(h);!S||ae||oe||(p(e[0]-W[0])>p(e[1]-W[1])?oe=!0:ae=!0),W=e,ne=!0,Object(y.a)(),a()}function a(){var e;switch(ee=W[0]-F[0],te=W[1]-F[1],_){case w:case x:{L&&(ee=c(O-X,s(N-G,ee)),$=X+ee,Z=G+ee),R&&(te=c(U-V,s(E-Q,te)),K=V+te,J=Q+te);break}case v:{0>L?(ee=c(O-X,s(N-X,ee)),$=X+ee,Z=G):0<L&&(ee=c(O-G,s(N-G,ee)),$=X,Z=G+ee),0>R?(te=c(U-V,s(E-V,te)),K=V+te,J=Q):0<R&&(te=c(U-Q,s(E-Q,te)),K=V,J=Q+te);break}case C:{L&&($=c(O,s(N,X-ee*L)),Z=c(O,s(N,G+ee*L))),R&&(K=c(U,s(E,V-te*R)),J=c(U,s(E,Q+te*R)));break}}Z<$&&(L*=-1,e=X,X=G,G=e,e=$,$=Z,Z=e,b in A&&re.attr('cursor',z[b=A[b]])),J<K&&(R*=-1,e=V,V=Q,Q=e,e=K,K=J,J=e,b in M&&re.attr('cursor',z[b=M[b]])),q.selection&&(B=q.selection),ae&&($=B[0][0],Z=B[1][0]),oe&&(K=B[0][1],J=B[1][1]),(B[0][0]!==$||B[0][1]!==K||B[1][0]!==Z||B[1][1]!==J)&&(q.selection=[[$,K],[Z,J]],n.call(h),Y.brush())}function o(){if(Object(y.b)(),m.event.touches){if(m.event.touches.length)return;I&&clearTimeout(I),I=setTimeout(function(){I=null},500),ie.on('touchmove.brush touchend.brush touchcancel.brush',null)}else Object(g.c)(m.event.view,ne),le.on('keydown.brush keyup.brush mousemove.brush mouseup.brush',null);ie.attr('pointer-events','all'),re.attr('cursor',z.overlay),q.selection&&(B=q.selection),l(B)&&(q.selection=null,n.call(h)),Y.end()}function i(){switch(m.event.keyCode){case 16:{S=L&&R;break}case 18:{_===v&&(L&&(G=Z-ee*L,X=$+ee*L),R&&(Q=J-te*R,V=K+te*R),_=C,a());break}case 32:{(_===v||_===C)&&(0>L?G=Z-ee:0<L&&(X=$-ee),0>R?Q=J-te:0<R&&(V=K-te),_=w,re.attr('cursor',z.selection),a());break}default:return;}Object(y.a)()}function u(){switch(m.event.keyCode){case 16:{S&&(ae=oe=S=!1,a());break}case 18:{_===C&&(0>L?G=Z:0<L&&(X=$),0>R?Q=J:0<R&&(V=K),_=v,a());break}case 32:{_===w&&(m.event.altKey?(L&&(G=Z-ee*L,X=$+ee*L),R&&(Q=J-te*R,V=K+te*R),_=C):(0>L?G=Z:0<L&&(X=$),0>R?Q=J:0<R&&(V=K),_=v),re.attr('cursor',z[b]),a());break}default:return;}Object(y.a)()}if(m.event.touches){if(m.event.changedTouches.length<m.event.touches.length)return Object(y.a)();}else if(I)return;if(P.apply(this,arguments)){var h=this,b=m.event.target.__data__.type,_='selection'===(m.event.metaKey?b='overlay':b)?x:m.event.altKey?C:v,L=e===k?null:D[b],R=e===T?null:j[b],q=r(h),H=q.extent,B=q.selection,O=H[0][0],U=H[0][1],N=H[1][0],E=H[1][1],S=L&&R&&m.event.shiftKey,F=Object(m.mouse)(h),W=F,Y=d(h,arguments).beforestart(),X,$,V,K,G,Z,Q,J,ee,te,ne,ae,oe;'overlay'===b?q.selection=B=[[X=e===k?O:F[0],V=e===T?U:F[1]],[G=e===k?N:X,Q=e===T?E:V]]:(X=B[0][0],V=B[0][1],G=B[1][0],Q=B[1][1]),$=X,K=V,Z=G,J=Q;var ie=Object(m.select)(h).attr('pointer-events','none'),re=ie.selectAll('.overlay').attr('cursor',z[b]);if(m.event.touches)ie.on('touchmove.brush',t,!0).on('touchend.brush touchcancel.brush',o,!0);else{var le=Object(m.select)(m.event.view).on('keydown.brush',i,!0).on('keyup.brush',u,!0).on('mousemove.brush',t,!0).on('mouseup.brush',o,!0);Object(g.b)(m.event.view)}Object(y.b)(),Object(f.b)(h),n.call(h),Y.start()}}function N(){var t=this.__brush||{selection:null};return t.extent=L.apply(this,arguments),t.dim=e,t}var L=i,P=o,R=Object(u.a)(t,'start','brush','end'),q=6,I;return t.move=function(t,a){t.selection?t.on('start.brush',function(){d(this,arguments).beforestart().start()}).on('interrupt.brush end.brush',function(){d(this,arguments).end()}).tween('brush',function(){function t(e){r.selection=1===e&&l(p)?null:u(e),n.call(o),s.brush()}var o=this,r=o.__brush,s=d(o,arguments),c=r.selection,p=e.input('function'==typeof a?a.apply(this,arguments):a,r.extent),u=Object(h.a)(c,p);return c&&p?t:t(1)}):t.each(function(){var t=this,o=arguments,i=t.__brush,r=e.input('function'==typeof a?a.apply(t,o):a,i.extent),s=d(t,o).beforestart();Object(f.b)(t),i.selection=null==r||l(r)?null:r,n.call(t),s.start().brush().end()})},S.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit('start')),this},brush:function(){return this.emit('brush'),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit('end')),this},emit:function(n){Object(m.customEvent)(new _.a(t,n,e.output(this.state.selection)),R.apply,R,[n,this.that,this.args])}},t.extent=function(e){return arguments.length?(L='function'==typeof e?e:Object(b.a)([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),t):L},t.filter=function(e){return arguments.length?(P='function'==typeof e?e:Object(b.a)(!!e),t):P},t.handleSize=function(e){return arguments.length?(q=+e,t):q},t.on=function(){var e=R.on.apply(R,arguments);return e===R?t:e},t}var s=Math.min,c=Math.max,p=Math.abs;t.a=function(e){var t=e.__brush;return t?t.dim.output(t.selection):null},t.b=function(){return d(T)},t.c=function(){return d(k)};var u=n(13),g=n(66),h=n(4),m=n(1),f=n(67),b=n(326),_=n(327),y=n(328),x={name:'drag'},w={name:'space'},v={name:'handle'},C={name:'center'},T={name:'x',handles:['e','w'].map(a),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},k={name:'y',handles:['n','s'].map(a),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},S={name:'xy',handles:['n','e','s','w','nw','ne','se','sw'].map(a),input:function(e){return e},output:function(e){return e}},z={overlay:'crosshair',selection:'move',n:'ns-resize',e:'ew-resize',s:'ns-resize',w:'ew-resize',nw:'nwse-resize',ne:'nesw-resize',se:'nwse-resize',sw:'nesw-resize'},A={e:'w',w:'e',nw:'ne',ne:'nw',se:'sw',sw:'se'},M={n:'s',s:'n',nw:'sw',ne:'se',se:'ne',sw:'nw'},D={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},j={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};t.d=function(){return d(S)}},function(e,t){'use strict';function n(){for(var e=0,o=arguments.length,n={},i;e<o;++e){if(!(i=arguments[e]+'')||i in n)throw new Error('illegal type: '+i);n[i]=[]}return new a(n)}function a(e){this._=e}function o(e,n){return e.trim().split(/^|\s+/).map(function(e){var a='',o=e.indexOf('.');if(0<=o&&(a=e.slice(o+1),e=e.slice(0,o)),e&&!n.hasOwnProperty(e))throw new Error('unknown type: '+e);return{type:e,name:a}})}function r(e,t){for(var a=0,o=e.length,n;a<o;++a)if((n=e[a]).name===t)return n.value}function l(e,t,a){for(var o=0,i=e.length;o<i;++o)if(e[o].name===t){e[o]=d,e=e.slice(0,o).concat(e.slice(o+1));break}return null!=a&&e.push({name:t,value:a}),e}var d={value:function(){}};a.prototype=n.prototype={constructor:a,on:function(e,a){var d=this._,s=o(e+'',d),c=-1,i=s.length,n;if(2>arguments.length){for(;++c<i;)if((n=(e=s[c]).type)&&(n=r(d[n],e.name)))return n;return}if(null!=a&&'function'!=typeof a)throw new Error('invalid callback: '+a);for(;++c<i;)if(n=(e=s[c]).type)d[n]=l(d[n],e.name,a);else if(null==a)for(n in d)d[n]=l(d[n],e.name,null);return this},copy:function(){var e={},n=this._;for(var o in n)e[o]=n[o].slice();return new a(e)},call:function(e,a){if(0<(i=arguments.length-2))for(var o=Array(i),r=0,i,n;r<i;++r)o[r]=arguments[r+2];if(!this._.hasOwnProperty(e))throw new Error('unknown type: '+e);for(n=this._[e],r=0,i=n.length;r<i;++r)n[r].value.apply(a,o)},apply:function(e,a,o){if(!this._.hasOwnProperty(e))throw new Error('unknown type: '+e);for(var r=this._[e],t=0,i=r.length;t<i;++t)r[t].value.apply(a,o)}},t.a=n},function(e,t,n){'use strict';function a(){return!u.event.button}function o(){return this.parentNode}function i(e){return null==e?{x:u.event.x,y:u.event.y}:e}function r(){return'ontouchstart'in this}var l=n(13),u=n(1),d=n(127),s=n(128),c=n(292),g=n(293);t.a=function(){function e(e){e.on('mousedown.drag',t).filter(r).on('touchstart.drag',h).on('touchmove.drag',m).on('touchend.drag touchcancel.drag',f).style('touch-action','none').style('-webkit-tap-highlight-color','rgba(0,0,0,0)')}function t(){if(!z&&y.apply(this,arguments)){var e=b('mouse',x.apply(this,arguments),u.mouse,this,arguments);e&&(Object(u.select)(u.event.view).on('mousemove.drag',n,!0).on('mouseup.drag',p,!0),Object(d.a)(u.event.view),Object(s.b)(),E=!1,k=u.event.clientX,S=u.event.clientY,e('start'))}}function n(){if(Object(s.a)(),!E){var e=u.event.clientX-k,t=u.event.clientY-S;E=e*e+t*t>T}_.mouse('drag')}function p(){Object(u.select)(u.event.view).on('mousemove.drag mouseup.drag',null),Object(d.b)(u.event.view,E),Object(s.a)(),_.mouse('end')}function h(){if(y.apply(this,arguments)){var e=u.event.changedTouches,t=x.apply(this,arguments),a=e.length,n,o;for(n=0;n<a;++n)(o=b(e[n].identifier,t,u.touch,this,arguments))&&(Object(s.b)(),o('start'))}}function m(){var e=u.event.changedTouches,t=e.length,n,a;for(n=0;n<t;++n)(a=_[e[n].identifier])&&(Object(s.a)(),a('drag'))}function f(){var e=u.event.changedTouches,t=e.length,n,a;for(z&&clearTimeout(z),z=setTimeout(function(){z=null},500),n=0;n<t;++n)(a=_[e[n].identifier])&&(Object(s.b)(),a('end'))}function b(t,a,o,i,r){var l=o(a,t),d=v.copy(),c,s,p;return Object(u.customEvent)(new g.a(e,'beforestart',c,t,C,l[0],l[1],0,0,d),function(){return null!=(u.event.subject=c=w.apply(i,r))&&(s=c.x-l[0]||0,p=c.y-l[1]||0,!0)})?function h(m){var f=l,b;switch(m){case'start':_[t]=h,b=C++;break;case'end':delete _[t],--C;case'drag':l=o(a,t),b=C;}Object(u.customEvent)(new g.a(e,m,c,t,b,l[0]+s,l[1]+p,l[0]-f[0],l[1]-f[1],d),d.apply,d,[m,i,r])}:void 0}var y=a,x=o,w=i,_={},v=Object(l.a)('start','drag','end'),C=0,T=0,k,S,E,z;return e.filter=function(t){return arguments.length?(y='function'==typeof t?t:Object(c.a)(!!t),e):y},e.container=function(t){return arguments.length?(x='function'==typeof t?t:Object(c.a)(t),e):x},e.subject=function(t){return arguments.length?(w='function'==typeof t?t:Object(c.a)(t),e):w},e.on=function(){var t=v.on.apply(v,arguments);return t===v?e:t},e.clickDistance=function(t){return arguments.length?(T=(t=+t)*t,e):Math.sqrt(T)},e}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';function n(e,t,n,a,o,i,r,l,d,s){this.target=e,this.type=t,this.subject=n,this.identifier=a,this.active=o,this.x=i,this.y=r,this.dx=l,this.dy=d,this._=s}t.a=n,n.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e}},function(e,t,n){'use strict';var a=n(1),o=n(295),i=n(298);a.selection.prototype.interrupt=o.a,a.selection.prototype.transition=i.a},function(e,t,n){'use strict';var a=n(129);t.a=function(e){return this.each(function(){Object(a.a)(this,e)})}},function(e,t,n){'use strict';var a=n(68);t.a=function(e,n,o){var i=new a.a;return n=null==n?0:+n,i.restart(function(t){i.stop(),e(t+n)},n,o),i}},function(e,t,n){'use strict';var a=n(68);t.a=function(e,n,o){var i=new a.a,t=n;return null==n?(i.restart(e,n,o),i):(n=+n,o=null==o?Object(a.b)():+o,i.restart(function a(r){r+=t,i.restart(a,t+=n,o),e(r)},n,o),i)}},function(e,t,n){'use strict';function a(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return d.time=Object(l.b)(),d;return n}var o=n(10),r=n(6),i=n(131),l=n(37),d={time:null,delay:0,duration:250,ease:i.o};t.a=function(e){var t,s;e instanceof o.a?(t=e._id,e=e._name):(t=Object(o.c)(),(s=d).time=Object(l.b)(),e=null==e?null:e+'');for(var c=this._groups,p=c.length,u=0;u<p;++u)for(var g=c[u],h=g.length,n=0,i;n<h;++n)(i=g[n])&&Object(r.e)(i,e,t,n,g,s||a(i,t));return new o.a(c,this._parents,e,t)}},function(e,t,n){'use strict';function a(e){return function(){this.removeAttribute(e)}}function o(e){return function(){this.removeAttributeNS(e.space,e.local)}}function r(e,t,n){var a,o;return function(){var i=this.getAttribute(e);return i===n?null:i===a?o:o=t(a=i,n)}}function l(e,t,n){var a,o;return function(){var i=this.getAttributeNS(e.space,e.local);return i===n?null:i===a?o:o=t(a=i,n)}}function d(e,t,n){var a,o,i;return function(){var r=n(this),l;return null==r?void this.removeAttribute(e):(l=this.getAttribute(e),l===r?null:l===a&&r===o?i:i=t(a=l,o=r))}}function s(e,t,n){var a,o,i;return function(){var r=n(this),l;return null==r?void this.removeAttributeNS(e.space,e.local):(l=this.getAttributeNS(e.space,e.local),l===r?null:l===a&&r===o?i:i=t(a=l,o=r))}}var c=n(4),p=n(1),u=n(38),g=n(130);t.a=function(e,t){var n=Object(p.namespace)(e),h='transform'===n?c.u:g.a;return this.attrTween(e,'function'==typeof t?(n.local?s:d)(n,h,Object(u.b)(this,'attr.'+e,t)):null==t?(n.local?o:a)(n):(n.local?l:r)(n,h,t+''))}},function(e,t,n){'use strict';function a(e,t){function n(){var n=this,a=t.apply(n,arguments);return a&&function(o){n.setAttributeNS(e.space,e.local,a(o))}}return n._value=t,n}function o(e,t){function n(){var n=this,a=t.apply(n,arguments);return a&&function(o){n.setAttribute(e,a(o))}}return n._value=t,n}var i=n(1);t.a=function(e,t){var n='attr.'+e;if(2>arguments.length)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if('function'!=typeof t)throw new Error;var r=Object(i.namespace)(e);return this.tween(n,(r.local?a:o)(r,t))}},function(e,t,n){'use strict';function a(e,t){return function(){Object(i.g)(this,e).delay=+t.apply(this,arguments)}}function o(e,t){return t=+t,function(){Object(i.g)(this,e).delay=t}}var i=n(6);t.a=function(e){var t=this._id;return arguments.length?this.each(('function'==typeof e?a:o)(t,e)):Object(i.f)(this.node(),t).delay}},function(e,t,n){'use strict';function a(e,t){return function(){Object(i.h)(this,e).duration=+t.apply(this,arguments)}}function o(e,t){return t=+t,function(){Object(i.h)(this,e).duration=t}}var i=n(6);t.a=function(e){var t=this._id;return arguments.length?this.each(('function'==typeof e?a:o)(t,e)):Object(i.f)(this.node(),t).duration}},function(e,t,n){'use strict';function a(e,t){if('function'!=typeof t)throw new Error;return function(){Object(o.h)(this,e).ease=t}}var o=n(6);t.a=function(e){var t=this._id;return arguments.length?this.each(a(t,e)):Object(o.f)(this.node(),t).ease}},function(e,t,n){'use strict';var a=n(1),o=n(10);t.a=function(e){'function'!=typeof e&&(e=Object(a.matcher)(e));for(var t=this._groups,r=t.length,l=Array(r),d=0;d<r;++d)for(var s=t[d],c=s.length,n=l[d]=[],p=0,i;p<c;++p)(i=s[p])&&e.call(i,i.__data__,p,s)&&n.push(i);return new o.a(l,this._parents,this._name,this._id)}},function(e,t,n){'use strict';var a=n(10);t.a=function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,o=e._groups,r=t.length,l=o.length,d=Math.min(r,l),s=Array(r),c=0;c<d;++c)for(var p=t[c],u=o[c],g=p.length,n=s[c]=Array(g),h=0,i;h<g;++h)(i=p[h]||u[h])&&(n[h]=i);for(;c<r;++c)s[c]=t[c];return new a.a(s,this._parents,this._name,this._id)}},function(e,t,n){'use strict';function a(e){return(e+'').trim().split(/^|\s+/).every(function(e){var n=e.indexOf('.');return 0<=n&&(e=e.slice(0,n)),!e||'start'===e})}function o(e,t,n){var o=a(t)?i.g:i.h,r,l;return function(){var a=o(this,e),i=a.on;i!==r&&(l=(r=i).copy()).on(t,n),a.on=l}}var i=n(6);t.a=function(e,t){var n=this._id;return 2>arguments.length?Object(i.f)(this.node(),n).on.on(e):this.each(o(n,e,t))}},function(e,t){'use strict';function n(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}t.a=function(){return this.on('end.remove',n(this._id))}},function(e,t,n){'use strict';var a=n(1),o=n(10),r=n(6);t.a=function(e){var t=this._name,l=this._id;'function'!=typeof e&&(e=Object(a.selector)(e));for(var d=this._groups,s=d.length,c=Array(s),p=0;p<s;++p)for(var u=d[p],g=u.length,n=c[p]=Array(g),h=0,i,m;h<g;++h)(i=u[h])&&(m=e.call(i,i.__data__,h,u))&&('__data__'in i&&(m.__data__=i.__data__),n[h]=m,Object(r.e)(n[h],t,l,h,n,Object(r.f)(i,l)));return new o.a(c,this._parents,t,l)}},function(e,t,n){'use strict';var a=n(1),o=n(10),r=n(6);t.a=function(e){var t=this._name,d=this._id;'function'!=typeof e&&(e=Object(a.selectorAll)(e));for(var s=this._groups,c=s.length,p=[],u=[],g=0;g<c;++g)for(var h=s[g],m=h.length,n=0,i;n<m;++n)if(i=h[n]){for(var f=e.call(i,i.__data__,n,h),b=Object(r.f)(i,d),_=0,y=f.length,l;_<y;++_)(l=f[_])&&Object(r.e)(l,t,d,_,f,b);p.push(f),u.push(i)}return new o.a(p,u,t,d)}},function(e,t,n){'use strict';var a=n(1),o=a.selection.prototype.constructor;t.a=function(){return new o(this._groups,this._parents)}},function(e,t,n){'use strict';function a(e,t){var n,a,o;return function(){var r=Object(i.style)(this,e),l=(this.style.removeProperty(e),Object(i.style)(this,e));return r===l?null:r===n&&l===a?o:o=t(n=r,a=l)}}function o(e){return function(){this.style.removeProperty(e)}}function r(e,t,n){var a,o;return function(){var r=Object(i.style)(this,e);return r===n?null:r===a?o:o=t(a=r,n)}}function l(e,t,n){var a,o,r;return function(){var l=Object(i.style)(this,e),d=n(this);return null==d&&(d=(this.style.removeProperty(e),Object(i.style)(this,e))),l===d?null:l===a&&d===o?r:r=t(a=l,o=d)}}var d=n(4),i=n(1),s=n(38),c=n(130);t.a=function(e,t,n){var p='transform'==(e+='')?d.t:c.a;return null==t?this.styleTween(e,a(e,p)).on('end.style.'+e,o(e)):this.styleTween(e,'function'==typeof t?l(e,p,Object(s.b)(this,'style.'+e,t)):r(e,p,t+''),n)}},function(e,t){'use strict';function n(e,t,n){function a(){var a=this,o=t.apply(a,arguments);return o&&function(i){a.style.setProperty(e,o(i),n)}}return a._value=t,a}t.a=function(e,t,a){var o='style.'+(e+='');if(2>arguments.length)return(o=this.tween(o))&&o._value;if(null==t)return this.tween(o,null);if('function'!=typeof t)throw new Error;return this.tween(o,n(e,t,null==a?'':a))}},function(e,t,n){'use strict';function a(e){return function(){this.textContent=e}}function o(e){return function(){var t=e(this);this.textContent=null==t?'':t}}var i=n(38);t.a=function(e){return this.tween('text','function'==typeof e?o(Object(i.b)(this,'text',e)):a(null==e?'':e+''))}},function(e,t,n){'use strict';var a=n(10),o=n(6);t.a=function(){for(var e=this._name,t=this._id,r=Object(a.c)(),l=this._groups,d=l.length,s=0;s<d;++s)for(var c=l[s],p=c.length,n=0,i;n<p;++n)if(i=c[n]){var u=Object(o.f)(i,t);Object(o.e)(i,e,r,n,c,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new a.a(l,this._parents,e,r)}},function(e,t){'use strict';t.a=function(e){return+e}},function(e,t){'use strict';t.a=function(e){return e*e},t.c=function(e){return e*(2-e)},t.b=function(e){return(1>=(e*=2)?e*e:--e*(2-e)+1)/2}},function(e,t){'use strict';t.a=function(e){return e*e*e},t.c=function(e){return--e*e*e+1},t.b=function(e){return(1>=(e*=2)?e*e*e:(e-=2)*e*e+2)/2}},function(e,t,n){'use strict';var a=Math.pow;n.d(t,'a',function(){return i}),n.d(t,'c',function(){return r}),n.d(t,'b',function(){return l});var o=3,i=function t(n){function o(e){return a(e,n)}return n=+n,o.exponent=t,o}(o),r=function t(n){function o(e){return 1-a(1-e,n)}return n=+n,o.exponent=t,o}(o),l=function t(n){function o(e){return(1>=(e*=2)?a(e,n):2-a(2-e,n))/2}return n=+n,o.exponent=t,o}(o)},function(e,t){'use strict';var n=Math.cos;t.a=function(e){return 1-n(e*o)},t.c=function(e){return Math.sin(e*o)},t.b=function(e){return(1-n(a*e))/2};var a=Math.PI,o=a/2},function(e,t){'use strict';var n=Math.pow;t.a=function(e){return n(2,10*e-10)},t.c=function(e){return 1-n(2,-10*e)},t.b=function(e){return(1>=(e*=2)?n(2,10*e-10):2-n(2,10-10*e))/2}},function(e,t){'use strict';var n=Math.sqrt;t.a=function(e){return 1-n(1-e*e)},t.c=function(e){return n(1- --e*e)},t.b=function(e){return(1>=(e*=2)?1-n(1-e*e):n(1-(e-=2)*e)+1)/2}},function(e,t){'use strict';function n(e){return(e=+e)<a?u*e*e:e<i?u*(e-=o)*e+r:e<d?u*(e-=l)*e+s:u*(e-=c)*e+p}t.a=function(e){return 1-n(1-e)},t.c=n,t.b=function(e){return(1>=(e*=2)?1-n(1-e):n(e-1)+1)/2};var a=4/11,o=6/11,i=8/11,r=3/4,l=9/11,d=10/11,s=15/16,c=21/22,p=63/64,u=1/a/a},function(e,t,n){'use strict';n.d(t,'a',function(){return o}),n.d(t,'c',function(){return i}),n.d(t,'b',function(){return r});var a=1.70158,o=function e(n){function t(e){return e*e*((n+1)*e-n)}return n=+n,t.overshoot=e,t}(a),i=function e(n){function t(e){return--e*e*((n+1)*e+n)+1}return n=+n,t.overshoot=e,t}(a),r=function e(n){function t(e){return(1>(e*=2)?e*e*((n+1)*e-n):(e-=2)*e*((n+1)*e+n)+2)/2}return n=+n,t.overshoot=e,t}(a)},function(e,t,n){'use strict';var o=Math.max,i=Math.asin,r=Math.sin,l=Math.pow;n.d(t,'a',function(){return c}),n.d(t,'c',function(){return p}),n.d(t,'b',function(){return u});var d=2*Math.PI,a=1,s=0.3,c=function e(n,c){function t(e){return n*l(2,10*--e)*r((a-e)/c)}var a=i(1/(n=o(1,n)))*(c/=d);return t.amplitude=function(t){return e(t,c*d)},t.period=function(t){return e(n,t)},t}(a,s),p=function e(n,c){function t(e){return 1-n*l(2,-10*(e=+e))*r((e+a)/c)}var a=i(1/(n=o(1,n)))*(c/=d);return t.amplitude=function(t){return e(t,c*d)},t.period=function(t){return e(n,t)},t}(a,s),u=function e(n,c){function t(e){return(0>(e=2*e-1)?n*l(2,10*e)*r((a-e)/c):2-n*l(2,-10*e)*r((a+e)/c))/2}var a=i(1/(n=o(1,n)))*(c/=d);return t.amplitude=function(t){return e(t,c*d)},t.period=function(t){return e(n,t)},t}(a,s)},function(e,t,n){'use strict';var a=n(10),o=n(6),r=[null];t.a=function(e,t){var n=e.__transition,l,d;if(n)for(d in t=null==t?null:t+'',n)if((l=n[d]).state>o.c&&l.name===t)return new a.a([[e]],r,t,+d);return null}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';t.a=function(e,t,n){this.target=e,this.type=t,this.selection=n}},function(e,t,n){'use strict';t.b=function(){a.event.stopImmediatePropagation()};var a=n(1);t.a=function(){a.event.preventDefault(),a.event.stopImmediatePropagation()}},function(e,t,n){'use strict';var a=n(330);n.d(t,'a',function(){return a.a});var o=n(331);n.d(t,'b',function(){return o.a})},function(e,t,n){'use strict';function a(e){return function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)}}var o=n(2),r=n(132);t.a=function(){function e(e){var a=e.length,n=[],c=Object(o.range)(a),p=[],u=[],g=u.groups=Array(a),h=Array(a*a),m,f,b,_,y,i;for(m=0,y=-1;++y<a;){for(f=0,i=-1;++i<a;)f+=e[y][i];n.push(f),p.push(Object(o.range)(a)),m+=f}for(l&&c.sort(function(e,t){return l(n[e],n[t])}),d&&p.forEach(function(t,n){t.sort(function(t,a){return d(e[n][t],e[n][a])})}),m=Object(r.c)(0,r.e-t*a)/m,_=m?t:r.e/a,f=0,y=-1;++y<a;){for(b=f,i=-1;++i<a;){var w=c[y],C=p[w][i],T=e[w][C],k=f,S=f+=T*m;h[C*a+w]={index:w,subindex:C,startAngle:k,endAngle:S,value:T}}g[w]={index:w,startAngle:b,endAngle:f,value:n[w]},f+=_}for(y=-1;++y<a;)for(i=y-1;++i<a;){var E=h[i*a+y],z=h[y*a+i];(E.value||z.value)&&u.push(E.value<z.value?{source:z,target:E}:{source:E,target:z})}return s?u.sort(s):u}var t=0,l=null,d=null,s=null;return e.padAngle=function(n){return arguments.length?(t=Object(r.c)(0,n),e):t},e.sortGroups=function(t){return arguments.length?(l=t,e):l},e.sortSubgroups=function(t){return arguments.length?(d=t,e):d},e.sortChords=function(t){return arguments.length?(null==t?s=null:(s=a(t))._=t,e):s&&s._},e}},function(e,t,n){'use strict';function a(e){return e.source}function o(e){return e.target}function i(e){return e.radius}function r(e){return e.startAngle}function l(e){return e.endAngle}var d=n(332),s=n(333),c=n(132),p=n(14);t.a=function(){function e(){var e=d.a.call(arguments),a=n.apply(this,e),o=u.apply(this,e),t=+g.apply(this,(e[0]=a,e)),i=h.apply(this,e)-c.b,r=m.apply(this,e)-c.b,l=t*Object(c.a)(i),s=t*Object(c.d)(i),b=+g.apply(this,(e[0]=o,e)),_=h.apply(this,e)-c.b,y=m.apply(this,e)-c.b,x;if(f||(f=x=Object(p.a)()),f.moveTo(l,s),f.arc(0,0,t,i,r),(i!=_||r!=y)&&(f.quadraticCurveTo(0,0,b*Object(c.a)(_),b*Object(c.d)(_)),f.arc(0,0,b,_,y)),f.quadraticCurveTo(0,0,l,s),f.closePath(),x)return f=null,x+''||null}var n=a,u=o,g=i,h=r,m=l,f=null;return e.radius=function(t){return arguments.length?(g='function'==typeof t?t:Object(s.a)(+t),e):g},e.startAngle=function(t){return arguments.length?(h='function'==typeof t?t:Object(s.a)(+t),e):h},e.endAngle=function(t){return arguments.length?(m='function'==typeof t?t:Object(s.a)(+t),e):m},e.source=function(t){return arguments.length?(n=t,e):n},e.target=function(t){return arguments.length?(u=t,e):u},e.context=function(t){return arguments.length?(f=null==t?null:t,e):f},e}},function(e,t,n){'use strict';n.d(t,'a',function(){return a});var a=Array.prototype.slice},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';function n(){this._x0=this._y0=this._x1=this._y1=null,this._=''}function a(){return new n}var o=Math.sqrt,i=Math.sin,l=Math.cos,d=Math.abs,s=Math.PI,c=2*s,p=1e-6;n.prototype=a.prototype={constructor:n,moveTo:function(e,t){this._+='M'+(this._x0=this._x1=+e)+','+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+='Z')},lineTo:function(e,t){this._+='L'+(this._x1=+e)+','+(this._y1=+t)},quadraticCurveTo:function(e,t,n,a){this._+='Q'+ +e+','+ +t+','+(this._x1=+n)+','+(this._y1=+a)},bezierCurveTo:function(e,t,n,a,o,i){this._+='C'+ +e+','+ +t+','+ +n+','+ +a+','+(this._x1=+o)+','+(this._y1=+i)},arcTo:function(e,t,n,a,i){e=+e,t=+t,n=+n,a=+a,i=+i;var c=this._x1,u=this._y1,g=n-e,h=a-t,m=c-e,f=u-t,b=m*m+f*f;if(0>i)throw new Error('negative radius: '+i);if(null===this._x1)this._+='M'+(this._x1=e)+','+(this._y1=t);else if(!(b>p));else if(!(d(f*g-h*m)>p)||!i)this._+='L'+(this._x1=e)+','+(this._y1=t);else{var _=n-c,y=a-u,x=g*g+h*h,w=o(x),v=o(b),C=i*Math.tan((s-Math.acos((x+b-(_*_+y*y))/(2*w*v)))/2),l=C/v,T=C/w;d(l-1)>p&&(this._+='L'+(e+l*m)+','+(t+l*f)),this._+='A'+i+','+i+',0,0,'+ +(f*_>m*y)+','+(this._x1=e+T*g)+','+(this._y1=t+T*h)}},arc:function(e,t,n,a,o,u){e=+e,t=+t,n=+n;var g=n*l(a),h=n*i(a),m=e+g,f=t+h,b=1^u,_=u?a-o:o-a;if(0>n)throw new Error('negative radius: '+n);null===this._x1?this._+='M'+m+','+f:(d(this._x1-m)>p||d(this._y1-f)>p)&&(this._+='L'+m+','+f);n&&(0>_&&(_=_%c+c),_>c-p?this._+='A'+n+','+n+',0,1,'+b+','+(e-g)+','+(t-h)+'A'+n+','+n+',0,1,'+b+','+(this._x1=m)+','+(this._y1=f):_>p&&(this._+='A'+n+','+n+',0,'+ +(_>=s)+','+b+','+(this._x1=e+n*l(o))+','+(this._y1=t+n*i(o))))},rect:function(e,t,n,a){this._+='M'+(this._x0=this._x1=+e)+','+(this._y0=this._y1=+t)+'h'+ +n+'v'+ +a+'h'+-n+'Z'},toString:function(){return this._}},t.a=a},function(e,t,n){'use strict';n.d(t,'c',function(){return i}),n.d(t,'d',function(){return r}),n.d(t,'a',function(){return l}),n.d(t,'b',function(){return d});var a=n(70),o=Object(a.a)(','),i=o.parse,r=o.parseRows,l=o.format,d=o.formatRows},function(e,t,n){'use strict';n.d(t,'c',function(){return i}),n.d(t,'d',function(){return r}),n.d(t,'a',function(){return l}),n.d(t,'b',function(){return d});var a=n(70),o=Object(a.a)('\t'),i=o.parse,r=o.parseRows,l=o.format,d=o.formatRows},function(e,t,n){'use strict';var a=n(338);n.d(t,'a',function(){return a.a});var o=n(339);n.d(t,'b',function(){return o.a});var i=n(353);n.d(t,'c',function(){return i.a});var r=n(354);n.d(t,'d',function(){return r.a});var l=n(133);n.d(t,'e',function(){return l.a});var d=n(355);n.d(t,'f',function(){return d.a});var s=n(356);n.d(t,'g',function(){return s.a})},function(e,t){'use strict';t.a=function(e,t){function n(){var o=a.length,n=0,r=0,l,i;for(l=0;l<o;++l)i=a[l],n+=i.x,r+=i.y;for(n=n/o-e,r=r/o-t,l=0;l<o;++l)i=a[l],i.x-=n,i.y-=r}var a;return null==e&&(e=0),null==t&&(t=0),n.initialize=function(e){a=e},n.x=function(t){return arguments.length?(e=+t,n):e},n.y=function(e){return arguments.length?(t=+e,n):t},n}},function(e,t,n){'use strict';function a(e){return e.x+e.vx}function o(e){return e.y+e.vy}var i=n(25),d=n(71),r=n(72);t.a=function(e){function t(){function e(e,t,n,a,o){var i=e.data,c=e.r,p=b+c;if(i){if(i.index>h.index){var r=m-i.x-i.vx,u=f-i.y-i.vy,g=r*r+u*u;g<p*p&&(0==r&&(r=Object(d.a)(),g+=r*r),0==u&&(u=Object(d.a)(),g+=u*u),g=(p-(g=Math.sqrt(g)))/g*s,h.vx+=(r*=g)*(p=(c*=c)/(_+c)),h.vy+=(u*=g)*p,i.vx-=r*(p=1-p),i.vy-=u*p)}return}return t>m+p||a<m-p||n>f+p||o<f-p}for(var t=p.length,n=0,g,i,h,m,f,b,_;n<c;++n)for(i=Object(r.a)(p,a,o).visitAfter(l),g=0;g<t;++g)h=p[g],b=u[h.index],_=b*b,m=h.x+h.vx,f=h.y+h.vy,i.visit(e)}function l(e){if(e.data)return e.r=u[e.data.index];for(var t=e.r=0;4>t;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function n(){if(p){var t=p.length,n,a;for(u=Array(t),n=0;n<t;++n)a=p[n],u[a.index]=+e(a,n,p)}}var s=1,c=1,p,u;return'function'!=typeof e&&(e=Object(i.a)(null==e?1:+e)),t.initialize=function(e){p=e,n()},t.iterations=function(e){return arguments.length?(c=+e,t):c},t.strength=function(e){return arguments.length?(s=+e,t):s},t.radius=function(a){return arguments.length?(e='function'==typeof a?a:Object(i.a)(+a),n(),t):e},t}},function(e,t,n){'use strict';function a(e,t,n){var a=new o(null==t?f.b:t,null==n?b.b:n,NaN,NaN,NaN,NaN);return null==e?a:a.addAll(e)}function o(e,t,n,a,o,i){this._x=e,this._y=t,this._x0=n,this._y0=a,this._x1=o,this._y1=i,this._root=void 0}function r(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}t.a=a;var i=n(341),l=n(342),d=n(343),s=n(344),c=n(345),p=n(346),u=n(347),g=n(348),h=n(349),m=n(350),f=n(351),b=n(352),_=a.prototype=o.prototype;_.copy=function(){var e=new o(this._x,this._y,this._x0,this._y0,this._x1,this._y1),t=this._root,n,a;if(!t)return e;if(!t.length)return e._root=r(t),e;for(n=[{source:t,target:e._root=[,,,,]}];t=n.pop();)for(var l=0;4>l;++l)(a=t.source[l])&&(a.length?n.push({source:a,target:t.target[l]=[,,,,]}):t.target[l]=r(a));return e},_.add=i.b,_.addAll=i.a,_.cover=l.a,_.data=d.a,_.extent=s.a,_.find=c.a,_.remove=p.a,_.removeAll=p.b,_.root=u.a,_.size=g.a,_.visit=h.a,_.visitAfter=m.a,_.x=f.a,_.y=b.a},function(e,t){'use strict';function a(e,t,n,a){if(isNaN(t)||isNaN(n))return e;var o=e._root,r={data:a},l=e._x0,s=e._y0,c=e._x1,p=e._y1,u,g,h,m,f,b,_,y,i;if(!o)return e._root=r,e;for(;o.length;)if((b=t>=(g=(l+c)/2))?l=g:c=g,(_=n>=(h=(s+p)/2))?s=h:p=h,(u=o,!(o=o[y=_<<1|b])))return u[y]=r,e;if(m=+e._x.call(null,o.data),f=+e._y.call(null,o.data),t===m&&n===f)return r.next=o,u?u[y]=r:e._root=r,e;do u=u?u[y]=[,,,,]:e._root=[,,,,],(b=t>=(g=(l+c)/2))?l=g:c=g,(_=n>=(h=(s+p)/2))?s=h:p=h;while((y=_<<1|b)==(i=(f>=h)<<1|m>=g));return u[i]=o,u[y]=r,e}t.a=function(e){var t=e.length,n=Array(t),o=Array(t),r=Infinity,l=Infinity,s=-Infinity,c=-Infinity,p,d,i,u;for(d=0;d<t;++d)isNaN(i=+this._x.call(null,p=e[d]))||isNaN(u=+this._y.call(null,p))||(n[d]=i,o[d]=u,i<r&&(r=i),i>s&&(s=i),u<l&&(l=u),u>c&&(c=u));for(s<r&&(r=this._x0,s=this._x1),c<l&&(l=this._y0,c=this._y1),this.cover(r,l).cover(s,c),d=0;d<t;++d)a(this,n[d],o[d],e[d]);return this},t.b=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return a(this.cover(t,n),t,n,e)}},function(e,t){'use strict';var n=Math.floor;t.a=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var a=this._x0,o=this._y0,r=this._x1,l=this._y1;if(isNaN(a))r=(a=n(e))+1,l=(o=n(t))+1;else if(a>e||e>r||o>t||t>l){var d=r-a,s=this._root,c,p;switch(p=(t<(o+l)/2)<<1|e<(a+r)/2){case 0:{do c=[,,,,],c[p]=s,s=c;while((d*=2,r=a+d,l=o+d,e>r||t>l));break}case 1:{do c=[,,,,],c[p]=s,s=c;while((d*=2,a=r-d,l=o+d,a>e||t>l));break}case 2:{do c=[,,,,],c[p]=s,s=c;while((d*=2,r=a+d,o=l-d,e>r||o>t));break}case 3:{do c=[,,,,],c[p]=s,s=c;while((d*=2,a=r-d,o=l-d,a>e||o>t));break}}this._root&&this._root.length&&(this._root=s)}else return this;return this._x0=a,this._y0=o,this._x1=r,this._y1=l,this}},function(e,t){'use strict';t.a=function(){var e=[];return this.visit(function(t){if(!t.length)do e.push(t.data);while(t=t.next)}),e}},function(e,t){'use strict';t.a=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]}},function(e,t,n){'use strict';var a=n(73);t.a=function(e,t,n){var o=this._x0,r=this._y0,l=this._x1,s=this._y1,c=[],p=this._root,u,g,h,m,f,b,_;for(p&&c.push(new a.a(p,o,r,l,s)),null==n?n=Infinity:(o=e-n,r=t-n,l=e+n,s=t+n,n*=n);b=c.pop();)if(!(!(p=b.node)||(g=b.x0)>l||(h=b.y0)>s||(m=b.x1)<o||(f=b.y1)<r))if(p.length){var i=(g+m)/2,y=(h+f)/2;c.push(new a.a(p[3],i,y,m,f),new a.a(p[2],g,y,i,f),new a.a(p[1],i,h,m,y),new a.a(p[0],g,h,i,y)),(_=(t>=y)<<1|e>=i)&&(b=c[c.length-1],c[c.length-1]=c[c.length-1-_],c[c.length-1-_]=b)}else{var x=e-+this._x.call(null,p.data),w=t-+this._y.call(null,p.data),v=x*x+w*w;if(v<n){var C=Math.sqrt(n=v);o=e-C,r=t-C,l=e+C,s=t+C,u=p.data}}return u}},function(e,t){'use strict';t.b=function(e){for(var t=0,a=e.length;t<a;++t)this.remove(e[t]);return this},t.a=function(e){if(isNaN(p=+this._x.call(null,e))||isNaN(u=+this._y.call(null,e)))return this;var t=this._root,n=this._x0,a=this._y0,o=this._x1,r=this._y1,l,d,s,c,p,u,g,h,m,f,b,i;if(!t)return this;if(t.length)for(;;){if((m=p>=(g=(n+o)/2))?n=g:o=g,(f=u>=(h=(a+r)/2))?a=h:r=h,(l=t,!(t=t[b=f<<1|m])))return this;if(!t.length)break;(l[3&b+1]||l[3&b+2]||l[3&b+3])&&(d=l,i=b)}for(;t.data!==e;)if(s=t,!(t=t.next))return this;return((c=t.next)&&delete t.next,s)?(c?s.next=c:delete s.next,this):l?(c?l[b]=c:delete l[b],(t=l[0]||l[1]||l[2]||l[3])&&t===(l[3]||l[2]||l[1]||l[0])&&!t.length&&(d?d[i]=t:this._root=t),this):(this._root=c,this)}},function(e,t){'use strict';t.a=function(){return this._root}},function(e,t){'use strict';t.a=function(){var e=0;return this.visit(function(t){if(!t.length)do++e;while(t=t.next)}),e}},function(e,t,n){'use strict';var a=n(73);t.a=function(e){var t=[],n=this._root,o,i,r,l,d,s;for(n&&t.push(new a.a(n,this._x0,this._y0,this._x1,this._y1));o=t.pop();)if(!e(n=o.node,r=o.x0,l=o.y0,d=o.x1,s=o.y1)&&n.length){var c=(r+d)/2,p=(l+s)/2;(i=n[3])&&t.push(new a.a(i,c,p,d,s)),(i=n[2])&&t.push(new a.a(i,r,p,c,s)),(i=n[1])&&t.push(new a.a(i,c,l,d,p)),(i=n[0])&&t.push(new a.a(i,r,l,c,p))}return this}},function(e,t,n){'use strict';var a=n(73);t.a=function(e){var t=[],n=[],o;for(this._root&&t.push(new a.a(this._root,this._x0,this._y0,this._x1,this._y1));o=t.pop();){var i=o.node;if(i.length){var r=o.x0,l=o.y0,d=o.x1,s=o.y1,c=(r+d)/2,p=(l+s)/2,u;(u=i[0])&&t.push(new a.a(u,r,l,c,p)),(u=i[1])&&t.push(new a.a(u,c,l,d,p)),(u=i[2])&&t.push(new a.a(u,r,p,c,s)),(u=i[3])&&t.push(new a.a(u,c,p,d,s))}n.push(o)}for(;o=n.pop();)e(o.node,o.x0,o.y0,o.x1,o.y1);return this}},function(e,t){'use strict';t.b=function(e){return e[0]},t.a=function(e){return arguments.length?(this._x=e,this):this._x}},function(e,t){'use strict';t.b=function(e){return e[1]},t.a=function(e){return arguments.length?(this._y=e,this):this._y}},function(e,t,n){'use strict';function a(e){return e.index}function o(e,t){var n=e.get(t);if(!n)throw new Error('missing: '+t);return n}var i=n(25),r=n(71),l=n(21);t.a=function(e){function t(t){for(var a=0,o=e.length;a<g;++a)for(var n=0,i,d,s,c,p,u,l;n<o;++n)i=e[n],d=i.source,s=i.target,c=s.x+s.vx-d.x-d.vx||Object(r.a)(),p=s.y+s.vy-d.y-d.vy||Object(r.a)(),u=Math.sqrt(c*c+p*p),u=(u-f[n])/u*t*h[n],c*=u,p*=u,s.vx-=c*(l=w[n]),s.vy-=p*l,d.vx+=c*(l=1-l),d.vy+=p*l}function n(){if(b){var t=b.length,n=e.length,a=Object(l.c)(b,c),r,i;for(r=0,_=Array(t);r<n;++r)i=e[r],i.index=r,'object'!=typeof i.source&&(i.source=o(a,i.source)),'object'!=typeof i.target&&(i.target=o(a,i.target)),_[i.source.index]=(_[i.source.index]||0)+1,_[i.target.index]=(_[i.target.index]||0)+1;for(r=0,w=Array(n);r<n;++r)i=e[r],w[r]=_[i.source.index]/(_[i.source.index]+_[i.target.index]);h=Array(n),d(),f=Array(n),s()}}function d(){if(b)for(var t=0,a=e.length;t<a;++t)h[t]=+p(e[t],t,e)}function s(){if(b)for(var t=0,a=e.length;t<a;++t)f[t]=+u(e[t],t,e)}var c=a,p=function(e){return 1/Math.min(_[e.source.index],_[e.target.index])},u=Object(i.a)(30),g=1,h,f,b,_,w;return null==e&&(e=[]),t.initialize=function(e){b=e,n()},t.links=function(a){return arguments.length?(e=a,n(),t):e},t.id=function(e){return arguments.length?(c=e,t):c},t.iterations=function(e){return arguments.length?(g=+e,t):g},t.strength=function(e){return arguments.length?(p='function'==typeof e?e:Object(i.a)(+e),d(),t):p},t.distance=function(e){return arguments.length?(u='function'==typeof e?e:Object(i.a)(+e),s(),t):u},t}},function(e,t,n){'use strict';var a=Math.sqrt,o=n(25),i=n(71),r=n(72),l=n(133);t.a=function(){function e(e){var t=g.length,n=Object(r.a)(g,l.b,l.c).visitAfter(d),a;for(m=e,a=0;a<t;++a)h=g[a],n.visit(s)}function t(){if(g){var e=g.length,t,n;for(f=Array(e),t=0;t<e;++t)n=g[t],f[n.index]=+c(n,t,g)}}function d(e){var t=0,n,a,o,r,l;if(e.length){for(o=r=l=0;4>l;++l)(n=e[l])&&(a=n.value)&&(t+=a,o+=a*n.x,r+=a*n.y);e.x=o/t,e.y=r/t}else{n=e,n.x=n.data.x,n.y=n.data.y;do t+=f[n.data.index];while(n=n.next)}e.value=t}function s(e,t,o,r){if(!e.value)return!0;var d=e.x-h.x,s=e.y-h.y,c=r-t,g=d*d+s*s;if(c*c/u<g)return g<p&&(0==d&&(d=Object(i.a)(),g+=d*d),0==s&&(s=Object(i.a)(),g+=s*s),g<n&&(g=a(n*g)),h.vx+=d*e.value*m/g,h.vy+=s*e.value*m/g),!0;if(!(e.length||g>=p)){(e.data!==h||e.next)&&(0===d&&(d=Object(i.a)(),g+=d*d),0===s&&(s=Object(i.a)(),g+=s*s),g<n&&(g=a(n*g)));do e.data!==h&&(c=f[e.data.index]*m/g,h.vx+=d*c,h.vy+=s*c);while(e=e.next)}}var c=Object(o.a)(-30),n=1,p=Infinity,u=0.81,g,h,m,f;return e.initialize=function(e){g=e,t()},e.strength=function(n){return arguments.length?(c='function'==typeof n?n:Object(o.a)(+n),t(),e):c},e.distanceMin=function(t){return arguments.length?(n=t*t,e):a(n)},e.distanceMax=function(t){return arguments.length?(p=t*t,e):a(p)},e.theta=function(t){return arguments.length?(u=t*t,e):a(u)},e}},function(e,t,n){'use strict';var a=n(25);t.a=function(e){function t(e){for(var t=0,a=r.length,n;t<a;++t)n=r[t],n.vx+=(d[t]-n.x)*l[t]*e}function n(){if(r){var t=r.length,n;for(l=Array(t),d=Array(t),n=0;n<t;++n)l[n]=isNaN(d[n]=+e(r[n],n,r))?0:+o(r[n],n,r)}}var o=Object(a.a)(0.1),r,l,d;return'function'!=typeof e&&(e=Object(a.a)(null==e?0:+e)),t.initialize=function(e){r=e,n()},t.strength=function(e){return arguments.length?(o='function'==typeof e?e:Object(a.a)(+e),n(),t):o},t.x=function(o){return arguments.length?(e='function'==typeof o?o:Object(a.a)(+o),n(),t):e},t}},function(e,t,n){'use strict';var a=n(25);t.a=function(e){function t(e){for(var t=0,a=r.length,n;t<a;++t)n=r[t],n.vy+=(d[t]-n.y)*l[t]*e}function n(){if(r){var t=r.length,n;for(l=Array(t),d=Array(t),n=0;n<t;++n)l[n]=isNaN(d[n]=+e(r[n],n,r))?0:+o(r[n],n,r)}}var o=Object(a.a)(0.1),r,l,d;return'function'!=typeof e&&(e=Object(a.a)(null==e?0:+e)),t.initialize=function(e){r=e,n()},t.strength=function(e){return arguments.length?(o='function'==typeof e?e:Object(a.a)(+e),n(),t):o},t.y=function(o){return arguments.length?(e='function'==typeof o?o:Object(a.a)(+o),n(),t):e},t}},function(e,t,n){'use strict';var a=n(134);n.d(t,'c',function(){return a.c});var o=n(358);n.d(t,'h',function(){return o.a});var i=n(359);n.d(t,'i',function(){return i.a});var r=n(135);n.d(t,'j',function(){return r.b});var l=n(74);n.d(t,'k',function(){return l.b});var d=n(362);n.d(t,'r',function(){return d.a});var s=n(141);n.d(t,'s',function(){return s.a});var c=n(363);n.d(t,'x',function(){return c.a}),n.d(t,'y',function(){return c.b});var p=n(364);n.d(t,'A',function(){return p.a});var u=n(142);n.d(t,'B',function(){return u.a});var g=n(365);n.d(t,'G',function(){return g.a});var h=n(144);n.d(t,'a',function(){return h.a});var m=n(375);n.d(t,'b',function(){return m.a});var f=n(376);n.d(t,'d',function(){return f.b}),n.d(t,'e',function(){return f.a});var b=n(377);n.d(t,'f',function(){return b.b}),n.d(t,'g',function(){return b.a});var _=n(378);n.d(t,'l',function(){return _.b}),n.d(t,'m',function(){return _.a});var y=n(76);n.d(t,'n',function(){return y.b}),n.d(t,'o',function(){return y.a});var x=n(379);n.d(t,'p',function(){return x.b}),n.d(t,'q',function(){return x.a});var w=n(146);n.d(t,'t',function(){return w.a}),n.d(t,'u',function(){return w.b});var v=n(380);n.d(t,'v',function(){return v.a}),n.d(t,'w',function(){return v.b});var C=n(381);n.d(t,'z',function(){return C.a});var T=n(9);n.d(t,'H',function(){return T.a}),n.d(t,'I',function(){return T.b});var k=n(79);n.d(t,'C',function(){return k.a}),n.d(t,'D',function(){return k.c});var S=n(382);n.d(t,'E',function(){return S.a}),n.d(t,'F',function(){return S.b});var E=n(383);n.d(t,'K',function(){return E.a}),n.d(t,'L',function(){return E.b});var z=n(384);n.d(t,'O',function(){return z.a}),n.d(t,'P',function(){return z.b});var A=n(39);n.d(t,'J',function(){return A.a});var M=n(15);n.d(t,'M',function(){return M.a});var D=n(40);n.d(t,'N',function(){return D.a})},function(e,t,n){'use strict';function a(e,t){z.push(A=[x=e,v=e]),t<w&&(w=t),t>C&&(C=t)}function o(e,t){var n=Object(m.a)([e*f.r,t*f.r]);if(E){var a=Object(m.c)(E,n),o=[a[1],-a[0],0],i=Object(m.c)(o,a);Object(m.e)(i),i=Object(m.g)(i);var r=e-T,l=0<r?1:-1,d=i[0]*f.h*l,s=180<Object(f.a)(r),p;s^(l*T<d&&d<l*e)?(p=i[1]*f.h,p>C&&(C=p)):(d=(d+360)%360-180,s^(l*T<d&&d<l*e))?(p=-i[1]*f.h,p<w&&(w=p)):(t<w&&(w=t),t>C&&(C=t)),s?e<T?c(x,e)>c(x,v)&&(v=e):c(e,v)>c(x,v)&&(x=e):v>=x?(e<x&&(x=e),e>v&&(v=e)):e>T?c(x,e)>c(x,v)&&(v=e):c(e,v)>c(x,v)&&(x=e)}else z.push(A=[x=e,v=e]);t<w&&(w=t),t>C&&(C=t),E=n,T=e}function i(){y.point=o}function r(){A[0]=x,A[1]=v,y.point=a,E=null}function l(e,t){if(E){var n=e-T;b.add(180<Object(f.a)(n)?n+(0<n?360:-360):n)}else k=e,S=t;h.b.point(e,t),o(e,t)}function d(){h.b.lineStart()}function s(){l(k,S),h.b.lineEnd(),Object(f.a)(b)>f.i&&(x=-(v=180)),A[0]=x,A[1]=v,E=null}function c(e,t){return 0>(t-=e)?t+360:t}function p(e,t){return e[0]-t[0]}function u(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var g=n(18),h=n(134),m=n(26),f=n(0),_=n(15),b=Object(g.a)(),y={point:a,lineStart:i,lineEnd:r,polygonStart:function(){y.point=l,y.lineStart=d,y.lineEnd=s,b.reset(),h.b.polygonStart()},polygonEnd:function(){h.b.polygonEnd(),y.point=a,y.lineStart=i,y.lineEnd=r,0>h.a?(x=-(v=180),w=-(C=90)):b>f.i?C=90:b<-f.i&&(w=-90),A[0]=x,A[1]=v}},x,w,v,C,T,k,S,E,z,A;t.a=function(e){var t,o,n,a,i,r,l;if(C=v=-(x=w=Infinity),z=[],Object(_.a)(e,y),o=z.length){for(z.sort(p),t=1,n=z[0],i=[n];t<o;++t)a=z[t],u(n,a[0])||u(n,a[1])?(c(n[0],a[1])>c(n[0],n[1])&&(n[1]=a[1]),c(a[0],n[1])>c(n[0],n[1])&&(n[0]=a[0])):i.push(n=a);for(r=-Infinity,o=i.length-1,t=0,n=i[o];t<=o;n=a,++t)a=i[t],(l=c(n[1],a[0]))>r&&(r=l,x=a[0],v=n[1])}return z=A=null,x===Infinity||w===Infinity?[[NaN,NaN],[NaN,NaN]]:[[x,w],[v,C]]}},function(e,t,n){'use strict';function a(e,t){e*=g.r,t*=g.r;var n=Object(g.g)(t);o(n*Object(g.g)(e),n*Object(g.t)(e),Object(g.t)(t))}function o(e,t,n){++_,w+=(e-w)/_,v+=(t-v)/_,T+=(n-T)/_}function i(){b.point=r}function r(e,t){e*=g.r,t*=g.r;var n=Object(g.g)(t);j=n*Object(g.g)(e),N=n*Object(g.t)(e),L=Object(g.t)(t),b.point=l,o(j,N,L)}function l(e,t){e*=g.r,t*=g.r;var n=Object(g.g)(t),a=n*Object(g.g)(e),i=n*Object(g.t)(e),r=Object(g.t)(t),l=Object(g.e)(Object(g.u)((l=N*r-L*i)*l+(l=L*a-j*r)*l+(l=j*i-N*a)*l),j*a+N*i+L*r);C+=l,k+=l*(j+(j=a)),S+=l*(N+(N=i)),E+=l*(L+(L=r)),o(j,N,L)}function d(){b.point=a}function s(){b.point=p}function c(){u(m,y),b.point=a}function p(e,t){m=e,y=t,e*=g.r,t*=g.r,b.point=u;var n=Object(g.g)(t);j=n*Object(g.g)(e),N=n*Object(g.t)(e),L=Object(g.t)(t),o(j,N,L)}function u(e,t){e*=g.r,t*=g.r;var n=Object(g.g)(t),a=n*Object(g.g)(e),i=n*Object(g.t)(e),r=Object(g.t)(t),l=N*r-L*i,d=L*a-j*r,s=j*i-N*a,c=Object(g.u)(l*l+d*d+s*s),p=Object(g.c)(c),u=c&&-p/c;A+=u*l,M+=u*d,D+=u*s,C+=p,k+=p*(j+(j=a)),S+=p*(N+(N=i)),E+=p*(L+(L=r)),o(j,N,L)}var g=n(0),h=n(11),f=n(15),b={sphere:h.a,point:a,lineStart:i,lineEnd:d,polygonStart:function(){b.lineStart=s,b.lineEnd=c},polygonEnd:function(){b.lineStart=i,b.lineEnd=d}},_,C,w,v,T,k,S,E,A,M,D,m,y,j,N,L;t.a=function(e){_=C=w=v=T=k=S=E=A=M=D=0,Object(f.a)(e,b);var t=A,n=M,a=D,o=t*t+n*n+a*a;return o<g.j&&(t=k,n=S,a=E,C<g.i&&(t=w,n=v,a=T),o=t*t+n*n+a*a,o<g.j)?[NaN,NaN]:[Object(g.e)(n,t)*g.h,Object(g.c)(a/Object(g.u)(o))*g.h]}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';t.a=function(e,t,n,a,o,i){var l=e[0],d=e[1],s=t[0],c=t[1],p=0,u=1,g=s-l,h=c-d,m;if(m=n-l,g||!(0<m)){if(m/=g,0>g){if(m<p)return;m<u&&(u=m)}else if(0<g){if(m>u)return;m>p&&(p=m)}if(m=o-l,g||!(0>m)){if(m/=g,0>g){if(m>u)return;m>p&&(p=m)}else if(0<g){if(m<p)return;m<u&&(u=m)}if(m=a-d,h||!(0<m)){if(m/=h,0>h){if(m<p)return;m<u&&(u=m)}else if(0<h){if(m>u)return;m>p&&(p=m)}if(m=i-d,h||!(0>m)){if(m/=h,0>h){if(m>u)return;m>p&&(p=m)}else if(0<h){if(m<p)return;m<u&&(u=m)}return 0<p&&(e[0]=l+p*g,e[1]=d+p*h),1>u&&(t[0]=l+u*g,t[1]=d+u*h),!0}}}}}},function(e,t,n){'use strict';function a(e,t){return e&&g.hasOwnProperty(e.type)&&g[e.type](e,t)}function o(e,t){return 0===Object(c.a)(e,t)}function r(e,t){var n=Object(c.a)(e[0],e[1]),a=Object(c.a)(e[0],t),o=Object(c.a)(t,e[1]);return a+o<=n+p.i}function l(e,t){return!!Object(s.a)(e.map(i),d(t))}function i(e){return e=e.map(d),e.pop(),e}function d(e){return[e[0]*p.r,e[1]*p.r]}var s=n(140),c=n(141),p=n(0),u={Feature:function(e,t){return a(e.geometry,t)},FeatureCollection:function(e,t){for(var o=e.features,r=-1,i=o.length;++r<i;)if(a(o[r].geometry,t))return!0;return!1}},g={Sphere:function(){return!0},Point:function(e,t){return o(e.coordinates,t)},MultiPoint:function(e,t){for(var a=e.coordinates,r=-1,i=a.length;++r<i;)if(o(a[r],t))return!0;return!1},LineString:function(e,t){return r(e.coordinates,t)},MultiLineString:function(e,t){for(var a=e.coordinates,o=-1,i=a.length;++o<i;)if(r(a[o],t))return!0;return!1},Polygon:function(e,t){return l(e.coordinates,t)},MultiPolygon:function(e,t){for(var a=e.coordinates,o=-1,i=a.length;++o<i;)if(l(a[o],t))return!0;return!1},GeometryCollection:function(e,t){for(var o=e.geometries,r=-1,i=o.length;++r<i;)if(a(o[r],t))return!0;return!1}};t.a=function(e,t){return(e&&u.hasOwnProperty(e.type)?u[e.type]:a)(e,t)}},function(e,t,n){'use strict';function a(e,t,n){var a=Object(r.range)(e,t-l.i,n).concat(t);return function(e){return a.map(function(t){return[e,t]})}}function o(e,t,n){var a=Object(r.range)(e,t-l.i,n).concat(t);return function(e){return a.map(function(t){return[t,e]})}}function i(){function e(){return{type:'MultiLineString',coordinates:t()}}function t(){return Object(r.range)(Object(l.f)(h/d)*d,g,d).map(y).concat(Object(r.range)(Object(l.f)(w/s)*s,b,s).map(C)).concat(Object(r.range)(Object(l.f)(u/n)*n,p,n).filter(function(e){return Object(l.a)(e%d)>l.i}).map(v)).concat(Object(r.range)(Object(l.f)(f/i)*i,m,i).filter(function(e){return Object(l.a)(e%s)>l.i}).map(x))}var n=10,i=n,d=90,s=360,c=2.5,p,u,g,h,m,f,b,w,v,x,y,C;return e.lines=function(){return t().map(function(e){return{type:'LineString',coordinates:e}})},e.outline=function(){return{type:'Polygon',coordinates:[y(h).concat(C(b).slice(1),y(g).reverse().slice(1),C(w).reverse().slice(1))]}},e.extent=function(t){return arguments.length?e.extentMajor(t).extentMinor(t):e.extentMinor()},e.extentMajor=function(t){return arguments.length?(h=+t[0][0],g=+t[1][0],w=+t[0][1],b=+t[1][1],h>g&&(t=h,h=g,g=t),w>b&&(t=w,w=b,b=t),e.precision(c)):[[h,w],[g,b]]},e.extentMinor=function(t){return arguments.length?(u=+t[0][0],p=+t[1][0],f=+t[0][1],m=+t[1][1],u>p&&(t=u,u=p,p=t),f>m&&(t=f,f=m,m=t),e.precision(c)):[[u,f],[p,m]]},e.step=function(t){return arguments.length?e.stepMajor(t).stepMinor(t):e.stepMinor()},e.stepMajor=function(t){return arguments.length?(d=+t[0],s=+t[1],e):[d,s]},e.stepMinor=function(t){return arguments.length?(n=+t[0],i=+t[1],e):[n,i]},e.precision=function(t){return arguments.length?(c=+t,v=a(f,m,90),x=o(u,p,c),y=a(w,b,90),C=o(h,g,c),e):c},e.extentMajor([[-180,-90+l.i],[180,90-l.i]]).extentMinor([[-180,-80-l.i],[180,80+l.i]])}t.a=i,t.b=function(){return i()()};var r=n(2),l=n(0)},function(e,t,n){'use strict';var o=n(0);t.a=function(e,t){var n=e[0]*o.r,a=e[1]*o.r,i=t[0]*o.r,r=t[1]*o.r,l=Object(o.g)(a),s=Object(o.t)(a),c=Object(o.g)(r),p=Object(o.t)(r),u=l*Object(o.g)(n),g=l*Object(o.t)(n),h=c*Object(o.g)(i),m=c*Object(o.t)(i),f=2*Object(o.c)(Object(o.u)(Object(o.m)(r-a)+l*c*Object(o.m)(i-n))),d=Object(o.t)(f),b=f?function(e){var t=Object(o.t)(e*=f)/d,n=Object(o.t)(f-e)/d,a=n*u+t*h,i=n*g+t*m;return[Object(o.e)(i,a)*o.h,Object(o.e)(n*s+t*p,Object(o.u)(a*a+i*i))*o.h]}:function(){return[n*o.h,a*o.h]};return b.distance=f,b}},function(e,t,n){'use strict';var a=n(75),o=n(15),i=n(366),r=n(143),l=n(367),d=n(368),s=n(369),c=n(370);t.a=function(e,t){function n(e){return e&&('function'==typeof p&&g.pointRadius(+p.apply(this,arguments)),Object(o.a)(e,u(g))),g.result()}var p=4.5,u,g;return n.area=function(e){return Object(o.a)(e,u(i.a)),i.a.result()},n.measure=function(e){return Object(o.a)(e,u(s.a)),s.a.result()},n.bounds=function(e){return Object(o.a)(e,u(r.a)),r.a.result()},n.centroid=function(e){return Object(o.a)(e,u(l.a)),l.a.result()},n.projection=function(t){return arguments.length?(u=null==t?(e=null,a.a):(e=t).stream,n):e},n.context=function(e){return arguments.length?(g=null==e?(t=null,new c.a):new d.a(t=e),'function'!=typeof p&&g.pointRadius(p),n):t},n.pointRadius=function(e){return arguments.length?(p='function'==typeof e?e:(g.pointRadius(+e),+e),n):p},n.projection(e).context(t)}},function(e,t,n){'use strict';function a(){u.point=o}function o(e,t){u.point=i,g=m=e,h=f=t}function i(e,t){p.add(f*e-m*t),m=e,f=t}function r(){i(g,h)}var l=n(18),d=n(0),s=n(11),c=Object(l.a)(),p=Object(l.a)(),u={point:s.a,lineStart:s.a,lineEnd:s.a,polygonStart:function(){u.lineStart=a,u.lineEnd=r},polygonEnd:function(){u.lineStart=u.lineEnd=u.point=s.a,c.add(Object(d.a)(p)),p.reset()},result:function(){return c.reset(),c/2}},g,h,m,f;t.a=u},function(e,t,n){'use strict';function a(e,t){g+=e,h+=t,++m}function o(){T.point=i}function i(e,t){T.point=r,a(E=e,A=t)}function r(e,t){var n=e-E,o=t-A,i=Object(u.u)(n*n+o*o);f+=i*(E+e)/2,b+=i*(A+t)/2,_+=i,a(E=e,A=t)}function l(){T.point=a}function d(){T.point=c}function s(){p(k,S)}function c(e,t){T.point=p,a(k=E=e,S=A=t)}function p(e,t){var n=e-E,o=t-A,i=Object(u.u)(n*n+o*o);f+=i*(E+e)/2,b+=i*(A+t)/2,_+=i,i=A*e-E*t,w+=i*(E+e),v+=i*(A+t),C+=3*i,a(E=e,A=t)}var u=n(0),g=0,h=0,m=0,f=0,b=0,_=0,w=0,v=0,C=0,T={point:a,lineStart:o,lineEnd:l,polygonStart:function(){T.lineStart=d,T.lineEnd=s},polygonEnd:function(){T.point=a,T.lineStart=o,T.lineEnd=l},result:function(){var e=C?[w/C,v/C]:_?[f/_,b/_]:m?[g/m,h/m]:[NaN,NaN];return g=h=m=f=b=_=w=v=C=0,e}},k,S,E,A;t.a=T},function(e,t,n){'use strict';function a(e){this._context=e}t.a=a;var o=n(0),i=n(11);a.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:{this._context.moveTo(e,t),this._point=1;break}case 1:{this._context.lineTo(e,t);break}default:{this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,o.w);break}}},result:i.a}},function(e,t,n){'use strict';function a(e,t){s.point=o,p=g=e,u=h=t}function o(e,t){g-=e,h-=t,d.add(Object(r.u)(g*g+h*h)),g=e,h=t}var i=n(18),r=n(0),l=n(11),d=Object(i.a)(),s={point:l.a,lineStart:function(){s.point=a},lineEnd:function(){c&&o(p,u),s.point=l.a},polygonStart:function(){c=!0},polygonEnd:function(){c=null},result:function(){return d.reset(),+d}},c,p,u,g,h;t.a=s},function(e,t){'use strict';function n(){this._string=[]}function a(e){return'm0,'+e+'a'+e+','+e+' 0 1,1 0,'+-2*e+'a'+e+','+e+' 0 1,1 0,'+2*e+'z'}t.a=n,n.prototype={_radius:4.5,_circle:a(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push('Z'),this._point=NaN},point:function(e,t){switch(this._point){case 0:{this._string.push('M',e,',',t),this._point=1;break}case 1:{this._string.push('L',e,',',t);break}default:{null==this._circle&&(this._circle=a(this._radius)),this._string.push('M',e,',',t,this._circle);break}}},result:function(){if(this._string.length){var e=this._string.join('');return this._string=[],e}return null}}},function(e,t,n){'use strict';function a(e,t,n,a){var o=Object(i.t)(e-n),r,l;return Object(i.a)(o)>i.i?Object(i.d)((Object(i.t)(t)*(l=Object(i.g)(a))*Object(i.t)(n)-Object(i.t)(a)*(r=Object(i.g)(t))*Object(i.t)(e))/(r*l*o)):(t+a)/2}var o=n(145),i=n(0);t.a=Object(o.a)(function(){return!0},function(e){var t=NaN,n=NaN,o=NaN,r;return{lineStart:function(){e.lineStart(),r=1},point:function(l,d){var s=0<l?i.o:-i.o,c=Object(i.a)(l-t);Object(i.a)(c-i.o)<i.i?(e.point(t,n=0<(n+d)/2?i.l:-i.l),e.point(o,n),e.lineEnd(),e.lineStart(),e.point(s,n),e.point(l,n),r=0):o!==s&&c>=i.o&&(Object(i.a)(t-o)<i.i&&(t-=o*i.i),Object(i.a)(l-s)<i.i&&(l-=s*i.i),n=a(t,n,l,d),e.point(o,n),e.lineEnd(),e.lineStart(),e.point(s,n),r=0),e.point(t=l,n=d),o=s},lineEnd:function(){e.lineEnd(),t=n=NaN},clean:function(){return 2-r}}},function(e,t,n,a){var o;if(null==e)o=n*i.l,a.point(-i.o,o),a.point(0,o),a.point(i.o,o),a.point(i.o,0),a.point(i.o,-o),a.point(0,-o),a.point(-i.o,-o),a.point(-i.o,0),a.point(-i.o,o);else if(Object(i.a)(e[0]-t[0])>i.i){var r=e[0]<t[0]?i.o:-i.o;o=n*r/2,a.point(-r,o),a.point(0,o),a.point(r,o)}else a.point(t[0],t[1])},[-i.o,-i.l])},function(e,t,n){'use strict';var o=n(26),a=n(135),i=n(0),r=n(139),l=n(145);t.a=function(e,t){function n(e,t){return Object(i.g)(e)*Object(i.g)(t)>c}function d(e,n,a){var r=Object(o.a)(e),l=Object(o.a)(n),d=[1,0,0],s=Object(o.c)(r,l),p=Object(o.d)(s,s),g=s[0],h=p-g*g;if(!h)return!a&&e;var m=Object(o.c)(d,s),f=Object(o.f)(d,c*p/h),b=Object(o.f)(s,-c*g/h);Object(o.b)(f,b);var _=m,u=Object(o.d)(f,_),y=Object(o.d)(_,_),x=u*u-y*(Object(o.d)(f,f)-1);if(!(0>x)){var v=Object(i.u)(x),t=Object(o.f)(_,(-u-v)/y);if(Object(o.b)(t,f),t=Object(o.g)(t),!a)return t;var C=e[0],T=n[0],k=e[1],S=n[1],E;T<C&&(E=C,C=T,T=E);var z=T-C,A=Object(i.a)(z-i.o)<i.i,M=A||z<i.i;if(!A&&S<k&&(E=k,k=S,S=E),M?A?0<k+S^t[1]<(Object(i.a)(t[0]-C)<i.i?k:S):k<=t[1]&&t[1]<=S:z>i.o^(C<=t[0]&&t[0]<=T)){var D=Object(o.f)(_,(-u+v)/y);return Object(o.b)(D,f),[t,Object(o.g)(D)]}}}function s(t,n){var a=p?e:i.o-e,o=0;return t<-a?o|=1:t>a&&(o|=2),n<-a?o|=4:n>a&&(o|=8),o}var c=Object(i.g)(e),p=0<c,u=Object(i.a)(c)>i.i;return Object(l.a)(n,function(e){var a,o,l,g,h;return{lineStart:function(){g=l=!1,h=1},point:function(m,f){var b=[m,f],_=n(m,f),y=p?_?0:s(m,f):_?s(m+(0>m?i.o:-i.o),f):0,c;if(!a&&(g=l=_)&&e.lineStart(),_!==l&&(c=d(a,b),(!c||Object(r.a)(a,c)||Object(r.a)(b,c))&&(b[0]+=i.i,b[1]+=i.i,_=n(b[0],b[1]))),_!==l)h=0,_?(e.lineStart(),c=d(b,a),e.point(c[0],c[1])):(c=d(a,b),e.point(c[0],c[1]),e.lineEnd()),a=c;else if(u&&a&&p^_){var x;!(y&o)&&(x=d(b,a,!0))&&(h=0,p?(e.lineStart(),e.point(x[0][0],x[0][1]),e.point(x[1][0],x[1][1]),e.lineEnd()):(e.point(x[1][0],x[1][1]),e.lineEnd(),e.lineStart(),e.point(x[0][0],x[0][1])))}!_||a&&Object(r.a)(a,b)||e.point(b[0],b[1]),a=b,l=_,o=y},lineEnd:function(){l&&e.lineEnd(),a=null},clean:function(){return h|(g&&l)<<1}}},function(n,o,i,r){Object(a.a)(r,e,t,i,n,o)},p?[0,-e]:[-i.o,e-i.o])}},function(e,t,n){'use strict';function a(e){return Object(l.b)({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}function o(e,t){function n(o,i,l,d,u,g,h,f,_,y,x,w,v,C){var T=h-o,k=f-i,S=T*T+k*k;if(S>4*t&&v--){var E=d+y,a=u+x,b=g+w,c=Object(r.u)(E*E+a*a+b*b),m=Object(r.c)(b/=c),z=Object(r.a)(Object(r.a)(b)-1)<r.i||Object(r.a)(l-_)<r.i?(l+_)/2:Object(r.e)(a,E),A=e(z,m),p=A[0],M=A[1],D=p-o,j=M-i,N=k*D-T*j;(N*N/S>t||0.3<Object(r.a)((T*D+k*j)/S-0.5)||d*y+u*x+g*w<s)&&(n(o,i,l,d,u,g,p,M,z,E/=c,a/=c,b,v,C),C.point(p,M),n(p,M,z,E,a,b,h,f,_,y,x,w,v,C))}}return function(t){function a(n,a){n=e(n,a),t.point(n[0],n[1])}function o(){x=NaN,u.point=r,t.lineStart()}function r(a,o){var r=Object(i.a)([a,o]),l=e(a,o);n(x,w,y,v,C,T,x=l[0],w=l[1],y=a,v=r[0],C=r[1],T=r[2],d,t),t.point(x,w)}function l(){u.point=a,t.lineEnd()}function s(){o(),u.point=c,u.lineEnd=p}function c(e,t){r(g=e,t),h=x,m=w,f=v,b=C,_=T,u.point=r}function p(){n(x,w,y,v,C,T,h,m,g,f,b,_,d,t),u.lineEnd=l,l()}var u={point:a,lineStart:o,lineEnd:l,polygonStart:function(){t.polygonStart(),u.lineStart=s},polygonEnd:function(){t.polygonEnd(),u.lineStart=o}},g,h,m,f,b,_,y,x,w,v,C,T;return u}}var i=n(26),r=n(0),l=n(40),d=16,s=Object(r.g)(30*r.r);t.a=function(e,t){return+t?o(e,t):a(e)}},function(e,t,n){'use strict';t.a=function(e){function t(e,t){return[e*n,Object(a.t)(t)/n]}var n=Object(a.g)(e);return t.invert=function(e,t){return[e/n,Object(a.c)(t*n)]},t};var a=n(0)},function(e,t,n){'use strict';function a(e){var t=e.length;return{point:function(n,a){for(var o=-1;++o<t;)e[o].point(n,a)},sphere:function(){for(var n=-1;++n<t;)e[n].sphere()},lineStart:function(){for(var n=-1;++n<t;)e[n].lineStart()},lineEnd:function(){for(var n=-1;++n<t;)e[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<t;)e[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<t;)e[n].polygonEnd()}}}var o=n(0),i=n(144),r=n(76),l=n(78);t.a=function(){function e(e){var t=e[0],n=e[1];return f=null,(g.point(t,n),f)||(h.point(t,n),f)||(m.point(t,n),f)}function t(){return p=u=null,e}var n=Object(i.a)(),d=Object(r.b)().rotate([154,0]).center([-2,58.5]).parallels([55,65]),s=Object(r.b)().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(e,t){f=[e,t]}},p,u,g,h,m,f;return e.invert=function(e){var a=n.scale(),o=n.translate(),t=(e[0]-o[0])/a,i=(e[1]-o[1])/a;return(0.12<=i&&0.234>i&&-0.425<=t&&-0.214>t?d:0.166<=i&&0.234>i&&-0.214<=t&&-0.115>t?s:n).invert(e)},e.stream=function(e){return p&&u===e?p:p=a([n.stream(u=e),d.stream(e),s.stream(e)])},e.precision=function(e){return arguments.length?(n.precision(e),d.precision(e),s.precision(e),t()):n.precision()},e.scale=function(t){return arguments.length?(n.scale(t),d.scale(0.35*t),s.scale(t),e.translate(n.translate())):n.scale()},e.translate=function(e){if(!arguments.length)return n.translate();var a=n.scale(),i=+e[0],r=+e[1];return g=n.translate(e).clipExtent([[i-0.455*a,r-0.238*a],[i+0.455*a,r+0.238*a]]).stream(c),h=d.translate([i-0.307*a,r+0.201*a]).clipExtent([[i-0.425*a+o.i,r+0.12*a+o.i],[i-0.214*a-o.i,r+0.234*a-o.i]]).stream(c),m=s.translate([i-0.205*a,r+0.212*a]).clipExtent([[i-0.214*a+o.i,r+0.166*a+o.i],[i-0.115*a-o.i,r+0.234*a-o.i]]).stream(c),t()},e.fitExtent=function(t,n){return Object(l.a)(e,t,n)},e.fitSize=function(t,n){return Object(l.b)(e,t,n)},e.scale(1070)}},function(e,t,n){'use strict';n.d(t,'a',function(){return r});var a=n(0),o=n(27),i=n(9),r=Object(o.b)(function(e){return Object(a.u)(2/(1+e))});r.invert=Object(o.a)(function(e){return 2*Object(a.c)(e/2)}),t.b=function(){return Object(i.a)(r).scale(124.75).clipAngle(180-1e-3)}},function(e,t,n){'use strict';n.d(t,'a',function(){return r});var a=n(0),o=n(27),i=n(9),r=Object(o.b)(function(e){return(e=Object(a.b)(e))&&e/Object(a.t)(e)});r.invert=Object(o.a)(function(e){return e}),t.b=function(){return Object(i.a)(r).scale(79.4188).clipAngle(180-1e-3)}},function(e,t,n){'use strict';function a(e){return Object(i.v)((i.l+e)/2)}function o(e,t){function o(e,t){0<n?t<-i.l+i.i&&(t=-i.l+i.i):t>i.l-i.i&&(t=i.l-i.i);var o=n/Object(i.p)(a(t),d);return[o*Object(i.t)(d*e),n-o*Object(i.g)(d*e)]}var r=Object(i.g)(e),d=e===t?Object(i.t)(e):Object(i.n)(r/Object(i.g)(t))/Object(i.n)(a(t)/a(e)),n=r*Object(i.p)(a(e),d)/d;return d?(o.invert=function(e,t){var a=n-t,o=Object(i.s)(d)*Object(i.u)(e*e+a*a);return[Object(i.e)(e,Object(i.a)(a))/d*Object(i.s)(a),2*Object(i.d)(Object(i.p)(n/o,1/d))-i.l]},o):l.c}t.a=o;var i=n(0),r=n(77),l=n(79);t.b=function(){return Object(r.a)(o).scale(109.5).parallels([30,30])}},function(e,t,n){'use strict';function a(e,t){function a(e,t){var a=n-t,i=l*e;return[a*Object(o.t)(i),n-a*Object(o.g)(i)]}var i=Object(o.g)(e),l=e===t?Object(o.t)(e):(i-Object(o.g)(t))/(t-e),n=i/l+e;return Object(o.a)(l)<o.i?r.b:(a.invert=function(e,t){var a=n-t;return[Object(o.e)(e,Object(o.a)(a))/l*Object(o.s)(a),n-Object(o.s)(l)*Object(o.u)(e*e+a*a)]},a)}t.a=a;var o=n(0),i=n(77),r=n(146);t.b=function(){return Object(i.a)(a).scale(131.154).center([0,13.9389])}},function(e,t,n){'use strict';function a(e,t){var n=Object(o.g)(t),a=Object(o.g)(e)*n;return[n*Object(o.t)(e)/a,Object(o.t)(t)/a]}t.b=a;var o=n(0),i=n(27),r=n(9);a.invert=Object(i.a)(o.d),t.a=function(){return Object(r.a)(a).scale(144.049).clipAngle(60)}},function(e,t,n){'use strict';function a(e,t,n,a){return 1===e&&1===t&&0===n&&0===a?i.a:Object(r.b)({point:function(o,i){this.stream.point(o*e+n,i*t+a)}})}var o=n(74),i=n(75),r=n(40),l=n(78);t.a=function(){function e(){return f=b=null,_}var t=1,n=0,r=0,d=1,s=1,c=i.a,p=null,u=i.a,g,h,m,f,b,_;return _={stream:function(e){return f&&b===e?f:f=c(u(b=e))},clipExtent:function(t){return arguments.length?(u=null==t?(p=g=h=m=null,i.a):Object(o.a)(p=+t[0][0],g=+t[0][1],h=+t[1][0],m=+t[1][1]),e()):null==p?null:[[p,g],[h,m]]},scale:function(o){return arguments.length?(c=a((t=+o)*d,t*s,n,r),e()):t},translate:function(o){return arguments.length?(c=a(t*d,t*s,n=+o[0],r=+o[1]),e()):[n,r]},reflectX:function(o){return arguments.length?(c=a(t*(d=o?-1:1),t*s,n,r),e()):0>d},reflectY:function(o){return arguments.length?(c=a(t*d,t*(s=o?-1:1),n,r),e()):0>s},fitExtent:function(e,t){return Object(l.a)(_,e,t)},fitSize:function(e,t){return Object(l.b)(_,e,t)}}}},function(e,t,n){'use strict';function a(e,t){return[Object(o.g)(t)*Object(o.t)(e),Object(o.t)(t)]}t.b=a;var o=n(0),i=n(27),r=n(9);a.invert=Object(i.a)(o.c),t.a=function(){return Object(r.a)(a).scale(249.5).clipAngle(90+o.i)}},function(e,t,n){'use strict';function a(e,t){var n=Object(o.g)(t),a=1+Object(o.g)(e)*n;return[n*Object(o.t)(e)/a,Object(o.t)(t)/a]}t.b=a;var o=n(0),i=n(27),r=n(9);a.invert=Object(i.a)(function(e){return 2*Object(o.d)(e)}),t.a=function(){return Object(r.a)(a).scale(250).clipAngle(142)}},function(e,t,n){'use strict';function a(e,t){return[Object(o.n)(Object(o.v)((o.l+t)/2)),-e]}t.b=a;var o=n(0),i=n(79);a.invert=function(e,t){return[-t,2*Object(o.d)(Object(o.k)(e))-o.l]},t.a=function(){var e=Object(i.b)(a),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):(e=t(),[e[1],-e[0]])},e.rotate=function(e){return arguments.length?n([e[0],e[1],2<e.length?e[2]+90:90]):(e=n(),[e[0],e[1],e[2]-90])},n([0,0,90]).scale(159.155)}},function(e,t,n){'use strict';var a=n(386);n.d(t,'a',function(){return a.a});var o=n(80);n.d(t,'b',function(){return o.c});var i=n(398);n.d(t,'c',function(){return i.a});var r=n(147);n.d(t,'e',function(){return r.a});var l=n(148);n.d(t,'d',function(){return l.a});var d=n(400);n.d(t,'f',function(){return d.a});var s=n(401);n.d(t,'g',function(){return s.a});var c=n(402);n.d(t,'h',function(){return c.a});var p=n(403);n.d(t,'i',function(){return p.a});var u=n(404);n.d(t,'j',function(){return u.a});var g=n(28);n.d(t,'k',function(){return g.a});var h=n(41);n.d(t,'m',function(){return h.a});var m=n(405);n.d(t,'n',function(){return m.a});var f=n(82);n.d(t,'o',function(){return f.a});var b=n(406);n.d(t,'l',function(){return b.a})},function(e,t){'use strict';function n(e,t){return e.parent===t.parent?1:2}function a(e){return e.reduce(o,0)/e.length}function o(e,t){return e+t.x}function i(e){return 1+e.reduce(r,0)}function r(e,t){return Math.max(e,t.y)}function l(e){for(var t;t=e.children;)e=t[0];return e}function d(e){for(var t;t=e.children;)e=t[t.length-1];return e}t.a=function(){function e(e){var n=0,c;e.eachAfter(function(e){var o=e.children;o?(e.x=a(o),e.y=i(o)):(e.x=c?n+=t(e,c):0,e.y=0,c=e)});var p=l(e),u=d(e),g=p.x-t(p,u)/2,h=u.x+t(u,p)/2;return e.eachAfter(s?function(t){t.x=(t.x-e.x)*o,t.y=(e.y-t.y)*r}:function(t){t.x=(t.x-g)/(h-g)*o,t.y=(1-(e.y?t.y/e.y:1))*r})}var t=n,o=1,r=1,s=!1;return e.separation=function(n){return arguments.length?(t=n,e):t},e.size=function(t){return arguments.length?(s=!1,o=+t[0],r=+t[1],e):s?null:[o,r]},e.nodeSize=function(t){return arguments.length?(s=!0,o=+t[0],r=+t[1],e):s?[o,r]:null},e}},function(e,t){'use strict';function n(e){var t=0,n=e.children,a=n&&n.length;if(!a)t=1;else for(;0<=--a;)t+=n[a].value;e.value=t}t.a=function(){return this.eachAfter(n)}},function(e,t){'use strict';t.a=function(e){var t=this,a=[t],o,r,l,i;do for(o=a.reverse(),a=[];t=o.pop();)if(e(t),r=t.children,r)for(l=0,i=r.length;l<i;++l)a.push(r[l]);while(a.length);return this}},function(e,t){'use strict';t.a=function(e){for(var t=this,n=[t],a,o;t=n.pop();)if(e(t),a=t.children,a)for(o=a.length-1;0<=o;--o)n.push(a[o]);return this}},function(e,t){'use strict';t.a=function(e){for(var t=this,a=[t],o=[],r,l,i;t=a.pop();)if(o.push(t),r=t.children,r)for(l=0,i=r.length;l<i;++l)a.push(r[l]);for(;t=o.pop();)e(t);return this}},function(e,t){'use strict';t.a=function(e){return this.eachAfter(function(t){for(var n=+e(t.data)||0,a=t.children,o=a&&a.length;0<=--o;)n+=a[o].value;t.value=n})}},function(e,t){'use strict';t.a=function(e){return this.eachBefore(function(t){t.children&&t.children.sort(e)})}},function(e,t){'use strict';function n(e,t){if(e===t)return e;var n=e.ancestors(),a=t.ancestors(),o=null;for(e=n.pop(),t=a.pop();e===t;)o=e,e=n.pop(),t=a.pop();return o}t.a=function(e){for(var t=this,a=n(t,e),o=[t];t!==a;)t=t.parent,o.push(t);for(var i=o.length;e!==a;)o.splice(i,0,e),e=e.parent;return o}},function(e,t){'use strict';t.a=function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t}},function(e,t){'use strict';t.a=function(){var e=[];return this.each(function(t){e.push(t)}),e}},function(e,t){'use strict';t.a=function(){var e=[];return this.eachBefore(function(t){t.children||e.push(t)}),e}},function(e,t){'use strict';t.a=function(){var e=this,t=[];return e.each(function(n){n!==e&&t.push({source:n.parent,target:n})}),t}},function(e,t,n){'use strict';function a(e){return Math.sqrt(e.value)}function o(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function i(t,a){return function(o){if(r=o.children){var l=r.length,n=t(o)*a||0,r,s,i;if(n)for(s=0;s<l;++s)r[s].r+=n;if(i=Object(d.b)(r),n)for(s=0;s<l;++s)r[s].r-=n;o.r=i+n}}}function r(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}var l=Math.min,d=n(147),s=n(81),c=n(149);t.a=function(){function e(e){return e.x=n/2,e.y=d/2,t?e.eachBefore(o(t)).eachAfter(i(p,0.5)).eachBefore(r(1)):e.eachBefore(o(a)).eachAfter(i(c.a,1)).eachAfter(i(p,e.r/l(n,d))).eachBefore(r(l(n,d)/(2*e.r))),e}var t=null,n=1,d=1,p=c.a;return e.radius=function(n){return arguments.length?(t=Object(s.a)(n),e):t},e.size=function(t){return arguments.length?(n=+t[0],d=+t[1],e):[n,d]},e.padding=function(t){return arguments.length?(p='function'==typeof t?t:Object(c.b)(+t),e):p},e}},function(e,t,n){'use strict';n.d(t,'b',function(){return a}),t.a=function(e){for(var n=e.length,a,t;n;)t=0|Math.random()*n--,a=e[n],e[n]=e[t],e[t]=a;return e};var a=Array.prototype.slice},function(e,t,n){'use strict';var a=n(150),o=n(28);t.a=function(){function e(e){var o=e.height+1;return e.x0=e.y0=l,e.x1=i,e.y1=r/o,e.eachBefore(t(r,o)),d&&e.eachBefore(a.a),e}function t(e,t){return function(n){n.children&&Object(o.a)(n,n.x0,e*(n.depth+1)/t,n.x1,e*(n.depth+2)/t);var a=n.x0,i=n.y0,r=n.x1-l,d=n.y1-l;r<a&&(a=r=(a+r)/2),d<i&&(i=d=(i+d)/2),n.x0=a,n.y0=i,n.x1=r,n.y1=d}}var i=1,r=1,l=0,d=!1;return e.round=function(t){return arguments.length?(d=!!t,e):d},e.size=function(t){return arguments.length?(i=+t[0],r=+t[1],e):[i,r]},e.padding=function(t){return arguments.length?(l=+t,e):l},e}},function(e,t,n){'use strict';function a(e){return e.id}function o(e){return e.parentId}var i=n(81),r=n(80),l='$',s={depth:-1},c={};t.a=function(){function e(e){var a=e.length,n=Array(a),o={},p,u,i,g,h,m,f;for(u=0;u<a;++u)p=e[u],h=n[u]=new r.a(p),null!=(m=t(p,u,e))&&(m+='')&&(f=l+(h.id=m),o[f]=f in o?c:h);for(u=0;u<a;++u)if(h=n[u],m=d(e[u],u,e),null==m||!(m+='')){if(i)throw new Error('multiple roots');i=h}else{if(g=o[l+m],!g)throw new Error('missing: '+m);if(g===c)throw new Error('ambiguous: '+m);g.children?g.children.push(h):g.children=[h],h.parent=g}if(!i)throw new Error('no root');if(i.parent=s,i.eachBefore(function(e){e.depth=e.parent.depth+1,--a}).eachBefore(r.b),i.parent=null,0<a)throw new Error('cycle');return i}var t=a,d=o;return e.id=function(n){return arguments.length?(t=Object(i.b)(n),e):t},e.parentId=function(t){return arguments.length?(d=Object(i.b)(t),e):d},e}},function(e,t,n){'use strict';function a(e,t){return e.parent===t.parent?1:2}function o(e){var t=e.children;return t?t[0]:e.t}function i(e){var t=e.children;return t?t[t.length-1]:e.t}function r(e,t,n){var a=n/(t.i-e.i);t.c-=a,t.s+=n,e.c+=a,t.z+=n,t.m+=n}function l(e){for(var t=0,n=0,a=e.children,o=a.length,i;0<=--o;)i=a[o],i.z+=t,i.m+=t,t+=i.s+(n+=i.c)}function d(e,t,n){return e.a.parent===t.parent?e.a:n}function s(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}function c(e){for(var t=new s(e,0),a=[t],o,r,l,d,i;o=a.pop();)if(l=o._.children)for(o.children=Array(i=l.length),d=i-1;0<=d;--d)a.push(r=o.children[d]=new s(l[d],d)),r.parent=o;return(t.parent=new s(null,0)).children=[t],t}var p=n(80);s.prototype=Object.create(p.a.prototype),t.a=function(){function e(e){var a=c(e);if(a.eachAfter(n),a.parent.m=-a.z,a.eachBefore(p),f)e.eachBefore(u);else{var t=e,o=e,i=e;e.eachBefore(function(e){e.x<t.x&&(t=e),e.x>o.x&&(o=e),e.depth>i.depth&&(i=e)});var r=t===o?1:g(t,o)/2,l=r-t.x,d=h/(o.x+r+l),s=m/(i.depth||1);e.eachBefore(function(e){e.x=(e.x+l)*d,e.y=e.depth*s})}return e}function n(e){var n=e.children,a=e.parent.children,o=e.i?a[e.i-1]:null;if(n){l(e);var i=(n[0].z+n[n.length-1].z)/2;o?(e.z=o.z+g(e._,o._),e.m=e.z-i):e.z=i}else o&&(e.z=o.z+g(e._,o._));e.parent.A=t(e,o,e.parent.A||a[0])}function p(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function t(e,t,n){if(t){for(var a=e,l=e,s=t,c=a.parent.children[0],p=a.m,u=l.m,h=s.m,m=c.m,f;s=i(s),a=o(a),s&&a;)c=o(c),l=i(l),l.a=e,f=s.z+h-a.z-p+g(s._,a._),0<f&&(r(d(s,e,n),e,f),p+=f,u+=f),h+=s.m,p+=a.m,m+=c.m,u+=l.m;s&&!i(l)&&(l.t=s,l.m+=h-u),a&&!o(c)&&(c.t=a,c.m+=p-m,n=e)}return n}function u(e){e.x*=h,e.y=e.depth*m}var g=a,h=1,m=1,f=null;return e.separation=function(t){return arguments.length?(g=t,e):g},e.size=function(t){return arguments.length?(f=!1,h=+t[0],m=+t[1],e):f?null:[h,m]},e.nodeSize=function(t){return arguments.length?(f=!0,h=+t[0],m=+t[1],e):f?[h,m]:null},e}},function(e,t,n){'use strict';var a=n(150),o=n(82),i=n(81),r=n(149);t.a=function(){function e(e){return e.x0=e.y0=0,e.x1=d,e.y1=s,e.eachBefore(t),c=[0],l&&e.eachBefore(a.a),e}function t(e){var t=c[e.depth],a=e.x0+t,o=e.y0+t,i=e.x1-t,r=e.y1-t;i<a&&(a=i=(a+i)/2),r<o&&(o=r=(o+r)/2),e.x0=a,e.y0=o,e.x1=i,e.y1=r,e.children&&(t=c[e.depth+1]=u(e)/2,a+=f(e)-t,o+=g(e)-t,i-=h(e)-t,r-=m(e)-t,i<a&&(a=i=(a+i)/2),r<o&&(o=r=(o+r)/2),n(e,a,o,i,r))}var n=o.a,l=!1,d=1,s=1,c=[0],u=r.a,g=r.a,h=r.a,m=r.a,f=r.a;return e.round=function(t){return arguments.length?(l=!!t,e):l},e.size=function(t){return arguments.length?(d=+t[0],s=+t[1],e):[d,s]},e.tile=function(t){return arguments.length?(n=Object(i.b)(t),e):n},e.padding=function(t){return arguments.length?e.paddingInner(t).paddingOuter(t):e.paddingInner()},e.paddingInner=function(t){return arguments.length?(u='function'==typeof t?t:Object(r.b)(+t),e):u},e.paddingOuter=function(t){return arguments.length?e.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):e.paddingTop()},e.paddingTop=function(t){return arguments.length?(g='function'==typeof t?t:Object(r.b)(+t),e):g},e.paddingRight=function(t){return arguments.length?(h='function'==typeof t?t:Object(r.b)(+t),e):h},e.paddingBottom=function(t){return arguments.length?(m='function'==typeof t?t:Object(r.b)(+t),e):m},e.paddingLeft=function(t){return arguments.length?(f='function'==typeof t?t:Object(r.b)(+t),e):f},e}},function(e,t){'use strict';t.a=function(e,t,a,o,r){function l(e,t,a,o,i,r,s){if(e>=t-1){var c=d[e];return c.x0=o,c.y0=i,c.x1=r,void(c.y1=s)}for(var p=n[e],u=a/2+p,g=e+1,h=t-1;g<h;){var m=g+h>>>1;n[m]<u?g=m+1:h=m}u-n[g-1]<n[g]-u&&e+1<g&&--g;var f=n[g]-p,b=a-f;if(r-o>s-i){var _=(o*b+r*f)/a;l(e,g,f,o,i,_,s),l(g,t,b,_,i,r,s)}else{var y=(i*b+s*f)/a;l(e,g,f,o,i,r,y),l(g,t,b,o,y,r,s)}}var d=e.children,s=d.length,n=Array(s+1),c,i;for(n[0]=i=c=0;c<s;++c)n[c+1]=i+=d[c].value;l(0,s,e.value,t,a,o,r)}},function(e,t,n){'use strict';var a=n(28),o=n(41);t.a=function(e,t,n,i,r){(1&e.depth?o.a:a.a)(e,t,n,i,r)}},function(e,t,n){'use strict';var a=n(28),o=n(41),r=n(82);t.a=function e(t){function n(e,l,d,s,c){if((h=e._squarify)&&h.ratio===t)for(var p=-1,u=h.length,g=e.value,h,m,f,b,i;++p<u;){for(m=h[p],f=m.children,(b=m.value=0,i=f.length);b<i;++b)m.value+=f[b].value;m.dice?Object(a.a)(m,l,d,s,d+=(c-d)*m.value/g):Object(o.a)(m,l,d,l+=(s-l)*m.value/g,c),g-=m.value}else e._squarify=h=Object(r.c)(t,e,l,d,s,c),h.ratio=t}return n.ratio=function(t){return e(1<(t=+t)?t:1)},n}(r.b)},function(e,t,n){'use strict';var a=n(408);n.d(t,'a',function(){return a.a});var o=n(409);n.d(t,'b',function(){return o.a});var i=n(410);n.d(t,'d',function(){return i.a});var r=n(412);n.d(t,'c',function(){return r.a});var l=n(413);n.d(t,'e',function(){return l.a})},function(e,t){'use strict';t.a=function(e){for(var t=-1,o=e.length,n=e[o-1],i=0,r;++t<o;)r=n,n=e[t],i+=r[1]*n[0]-r[0]*n[1];return i/2}},function(e,t){'use strict';t.a=function(e){for(var t=-1,o=e.length,n=0,i=0,r=e[o-1],l=0,d,a;++t<o;)d=r,r=e[t],l+=a=d[0]*r[1]-r[0]*d[1],n+=(d[0]+r[0])*a,i+=(d[1]+r[1])*a;return l*=3,[n/l,i/l]}},function(e,t,n){'use strict';function a(e,t){return e[0]-t[0]||e[1]-t[1]}function o(e){for(var t=e.length,n=[0,1],a=2,o=2;o<t;++o){for(;1<a&&0>=Object(r.a)(e[n[a-2]],e[n[a-1]],e[o]);)--a;n[a++]=o}return n.slice(0,a)}var r=n(411);t.a=function(e){if(3>(i=e.length))return null;var t=Array(i),r=Array(i),l,i;for(l=0;l<i;++l)t[l]=[+e[l][0],+e[l][1],l];for(t.sort(a),l=0;l<i;++l)r[l]=[t[l][0],-t[l][1]];var n=o(t),d=o(r),s=d[0]===n[0],c=d[d.length-1]===n[n.length-1],p=[];for(l=n.length-1;0<=l;--l)p.push(e[t[n[l]][2]]);for(l=+s;l<d.length-c;++l)p.push(e[t[d[l]][2]]);return p}},function(e,t){'use strict';t.a=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])}},function(e,t){'use strict';t.a=function(e,t){for(var a=e.length,n=e[a-1],o=t[0],r=t[1],l=n[0],d=n[1],s=!1,c=0,i,p;c<a;++c)n=e[c],i=n[0],p=n[1],p>r!=d>r&&o<(l-i)*(r-p)/(d-p)+i&&(s=!s),l=i,d=p;return s}},function(e,t){'use strict';t.a=function(e){for(var t=-1,a=e.length,n=e[a-1],o=n[0],i=n[1],r=0,l,d;++t<a;)l=o,d=i,n=e[t],o=n[0],i=n[1],l-=o,d-=i,r+=Math.sqrt(l*l+d*d);return r}},function(e,t,n){'use strict';var a=n(415);n.d(t,'a',function(){return a.a})},function(e,t,n){'use strict';function a(e){this._size=e,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function o(t){if(!t._start)try{i(t)}catch(n){if(t._tasks[t._ended+t._active-1])l(t,n);else if(!t._data)throw n}}function i(e){for(;e._start=e._waiting&&e._active<e._size;){var n=e._ended+e._active,a=e._tasks[n],t=a.length-1,o=a[t];a[t]=r(e,n),--e._waiting,++e._active,a=o.apply(null,a),e._tasks[n]&&(e._tasks[n]=a||p)}}function r(t,n){return function(a,e){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null!=t._error||(null==a?(t._data[n]=e,t._waiting?o(t):d(t)):l(t,a)))}}function l(n,a){var e=n._tasks.length,o;for(n._error=a,n._data=void 0,n._waiting=NaN;0<=--e;)if((o=n._tasks[e])&&(n._tasks[e]=null,o.abort))try{o.abort()}catch(t){}n._active=NaN,d(n)}function d(e){if(!e._active&&e._call){var t=e._data;e._data=void 0,e._call(e._error,t)}}function s(e){if(null==e)e=Infinity;else if(!(1<=(e=+e)))throw new Error('invalid concurrency');return new a(e)}t.a=s;var c=n(416),p={};a.prototype=s.prototype={constructor:a,defer:function(e){if('function'!=typeof e)throw new Error('invalid callback');if(this._call)throw new Error('defer after await');if(null!=this._error)return this;var n=c.a.call(arguments,1);return n.push(e),++this._waiting,this._tasks.push(n),o(this),this},abort:function(){return null==this._error&&l(this,new Error('abort')),this},await:function(e){if('function'!=typeof e)throw new Error('invalid callback');if(this._call)throw new Error('multiple await');return this._call=function(t,n){e.apply(null,[t].concat(n))},d(this),this},awaitAll:function(e){if('function'!=typeof e)throw new Error('invalid callback');if(this._call)throw new Error('multiple await');return this._call=e,d(this),this}}},function(e,t,n){'use strict';n.d(t,'a',function(){return a});var a=[].slice},function(e,t,n){'use strict';var a=n(418);n.d(t,'f',function(){return a.a});var o=n(151);n.d(t,'e',function(){return o.a});var i=n(419);n.d(t,'d',function(){return i.a});var r=n(420);n.d(t,'a',function(){return r.a});var l=n(152);n.d(t,'c',function(){return l.a});var d=n(421);n.d(t,'b',function(){return d.a})},function(e,t,n){'use strict';var a=n(19);t.a=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(a.a)},function(e,t,n){'use strict';var a=n(19),o=n(151);t.a=function e(t){function n(){var e=o.a.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(a.a)},function(e,t,n){'use strict';var a=n(19),o=n(152);t.a=function e(t){function n(e){var n=o.a.source(t)(e);return function(){return n()/e}}return n.source=e,n}(a.a)},function(e,t,n){'use strict';var a=n(19);t.a=function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(a.a)},function(e,t,n){'use strict';var a=n(83);n.d(t,'d',function(){return a.a});var o=n(423);n.d(t,'b',function(){return o.a});var i=n(424);n.d(t,'c',function(){return i.a});var r=n(425);n.d(t,'e',function(){return r.a});var l=n(426);n.d(t,'g',function(){return l.a});var d=n(427);n.d(t,'a',function(){return d.a});var s=n(428);n.d(t,'f',function(){return s.a})},function(e,t,n){'use strict';var a=n(42);t.a=Object(a.a)('text/html',function(e){return document.createRange().createContextualFragment(e.responseText)})},function(e,t,n){'use strict';var a=n(42);t.a=Object(a.a)('application/json',function(e){return JSON.parse(e.responseText)})},function(e,t,n){'use strict';var a=n(42);t.a=Object(a.a)('text/plain',function(e){return e.responseText})},function(e,t,n){'use strict';var a=n(42);t.a=Object(a.a)('application/xml',function(e){var t=e.responseXML;if(!t)throw new Error('parse error');return t})},function(e,t,n){'use strict';var a=n(69),o=n(153);t.a=Object(o.a)('text/csv',a.c)},function(e,t,n){'use strict';var a=n(69),o=n(153);t.a=Object(o.a)('text/tab-separated-values',a.h)},function(e,t,n){'use strict';var a=n(430);n.d(t,'a',function(){return a.a});var o=n(154);n.d(t,'b',function(){return o.a});var i=n(84);n.d(t,'v',function(){return i.a});var r=n(431);n.d(t,'A',function(){return r.a});var l=n(434);n.d(t,'c',function(){return l.a}),n.d(t,'C',function(){return l.a});var d=n(156);n.d(t,'w',function(){return d.a}),n.d(t,'D',function(){return d.a});var s=n(157);n.d(t,'B',function(){return s.a});var c=n(435);n.d(t,'x',function(){return c.a}),n.d(t,'z',function(){return c.c}),n.d(t,'y',function(){return c.b});var p=n(436);n.d(t,'P',function(){return p.a}),n.d(t,'X',function(){return p.b});var u=n(159);n.d(t,'Q',function(){return u.a});var g=n(160);n.d(t,'R',function(){return g.a});var h=n(161);n.d(t,'S',function(){return h.a});var m=n(163);n.d(t,'T',function(){return m.a});var f=n(162);n.d(t,'U',function(){return f.a});var b=n(164);n.d(t,'V',function(){return b.a});var _=n(165);n.d(t,'W',function(){return _.a});var y=n(437);n.d(t,'e',function(){return y.a});var x=n(438);n.d(t,'f',function(){return x.a});var w=n(45);n.d(t,'d',function(){return w.b});var v=n(439);n.d(t,'g',function(){return v.a});var C=n(166);n.d(t,'i',function(){return C.b});var T=n(167);n.d(t,'j',function(){return T.b});var k=n(46);n.d(t,'h',function(){return k.b});var S=n(440);n.d(t,'l',function(){return S.a});var E=n(441);n.d(t,'m',function(){return E.a});var z=n(86);n.d(t,'k',function(){return z.a});var A=n(442);n.d(t,'o',function(){return A.a});var M=n(43);n.d(t,'n',function(){return M.a});var D=n(443);n.d(t,'p',function(){return D.a}),n.d(t,'q',function(){return D.b});var j=n(444);n.d(t,'r',function(){return j.a});var N=n(445);n.d(t,'s',function(){return N.a}),n.d(t,'t',function(){return N.b}),n.d(t,'u',function(){return N.c});var L=n(446);n.d(t,'E',function(){return L.a});var P=n(447);n.d(t,'G',function(){return P.a});var R=n(448);n.d(t,'F',function(){return R.a});var q=n(30);n.d(t,'H',function(){return q.a});var I=n(449);n.d(t,'I',function(){return I.a});var H=n(450);n.d(t,'J',function(){return H.a});var B=n(87);n.d(t,'K',function(){return B.a});var O=n(451);n.d(t,'L',function(){return O.a});var U=n(452);n.d(t,'M',function(){return U.a});var F=n(31);n.d(t,'N',function(){return F.a});var W=n(453);n.d(t,'O',function(){return W.a})},function(e,t,n){'use strict';function a(e){return e.innerRadius}function o(e){return e.outerRadius}function i(e){return e.startAngle}function r(e){return e.endAngle}function l(e){return e&&e.padAngle}function d(e,n,a,o,i,r,l,d){var s=a-e,c=o-n,p=l-i,u=d-r,g=(p*(n-r)-u*(e-i))/(u*s-p*c);return[e+g*s,n+g*c]}function s(e,t,n,a,o,i,l){var s=e-n,c=t-a,p=(l?i:-i)/Object(u.l)(s*s+c*c),g=p*c,h=-p*s,m=e+g,f=t+h,b=n+g,_=a+h,y=(m+b)/2,x=(f+_)/2,w=b-m,v=_-f,C=w*w+v*v,T=o-i,r=m*_-b*f,k=(0>v?-1:1)*Object(u.l)(Object(u.h)(0,T*T*C-r*r)),d=(r*v-w*k)/C,S=(-r*w-v*k)/C,E=(r*v+w*k)/C,z=(-r*w+v*k)/C,A=d-y,M=S-x,j=E-y,N=z-x;return A*A+M*M>j*j+N*N&&(d=E,S=z),{cx:d,cy:S,x01:-g,y01:-h,x11:d*(o/T-1),y11:S*(o/T-1)}}var c=n(14),p=n(16),u=n(29);t.a=function(){function e(){var e=+t.apply(this,arguments),a=+n.apply(this,arguments),o=m.apply(this,arguments)-u.g,i=f.apply(this,arguments)-u.g,l=Object(u.a)(i-o),p=i>o,_,x;if(y||(y=_=Object(c.a)()),a<e&&(x=a,a=e,e=x),!(a>u.f))y.moveTo(0,0);else if(l>u.m-u.f)y.moveTo(a*Object(u.e)(o),a*Object(u.k)(o)),y.arc(0,0,a,o,i,!p),e>u.f&&(y.moveTo(e*Object(u.e)(i),e*Object(u.k)(i)),y.arc(0,0,e,i,o,p));else{var r=o,w=i,v=o,C=i,T=l,k=l,S=b.apply(this,arguments)/2,E=S>u.f&&(h?+h.apply(this,arguments):Object(u.l)(e*e+a*a)),z=Object(u.i)(Object(u.a)(a-e)/2,+g.apply(this,arguments)),A=z,M=z,D,j;if(E>u.f){var N=Object(u.c)(E/e*Object(u.k)(S)),L=Object(u.c)(E/a*Object(u.k)(S));(T-=2*N)>u.f?(N*=p?1:-1,v+=N,C-=N):(T=0,v=C=(o+i)/2),(k-=2*L)>u.f?(L*=p?1:-1,r+=L,w-=L):(k=0,r=w=(o+i)/2)}var P=a*Object(u.e)(r),R=a*Object(u.k)(r),q=e*Object(u.e)(C),I=e*Object(u.k)(C);if(z>u.f){var H=a*Object(u.e)(w),B=a*Object(u.k)(w),O=e*Object(u.e)(v),U=e*Object(u.k)(v);if(l<u.j){var F=T>u.f?d(P,R,O,U,H,B,q,I):[q,I],W=P-F[0],Y=R-F[1],X=H-F[0],$=B-F[1],V=1/Object(u.k)(Object(u.b)((W*X+Y*$)/(Object(u.l)(W*W+Y*Y)*Object(u.l)(X*X+$*$)))/2),K=Object(u.l)(F[0]*F[0]+F[1]*F[1]);A=Object(u.i)(z,(e-K)/(V-1)),M=Object(u.i)(z,(a-K)/(V+1))}}k>u.f?M>u.f?(D=s(O,U,P,R,a,M,p),j=s(H,B,q,I,a,M,p),y.moveTo(D.cx+D.x01,D.cy+D.y01),M<z?y.arc(D.cx,D.cy,M,Object(u.d)(D.y01,D.x01),Object(u.d)(j.y01,j.x01),!p):(y.arc(D.cx,D.cy,M,Object(u.d)(D.y01,D.x01),Object(u.d)(D.y11,D.x11),!p),y.arc(0,0,a,Object(u.d)(D.cy+D.y11,D.cx+D.x11),Object(u.d)(j.cy+j.y11,j.cx+j.x11),!p),y.arc(j.cx,j.cy,M,Object(u.d)(j.y11,j.x11),Object(u.d)(j.y01,j.x01),!p))):(y.moveTo(P,R),y.arc(0,0,a,r,w,!p)):y.moveTo(P,R),e>u.f&&T>u.f?A>u.f?(D=s(q,I,H,B,e,-A,p),j=s(P,R,O,U,e,-A,p),y.lineTo(D.cx+D.x01,D.cy+D.y01),A<z?y.arc(D.cx,D.cy,A,Object(u.d)(D.y01,D.x01),Object(u.d)(j.y01,j.x01),!p):(y.arc(D.cx,D.cy,A,Object(u.d)(D.y01,D.x01),Object(u.d)(D.y11,D.x11),!p),y.arc(0,0,e,Object(u.d)(D.cy+D.y11,D.cx+D.x11),Object(u.d)(j.cy+j.y11,j.cx+j.x11),p),y.arc(j.cx,j.cy,A,Object(u.d)(j.y11,j.x11),Object(u.d)(j.y01,j.x01),!p))):y.arc(0,0,e,C,v,p):y.lineTo(q,I)}return(y.closePath(),_)?(y=null,_+''||null):void 0}var t=a,n=o,g=Object(p.a)(0),h=null,m=i,f=r,b=l,y=null;return e.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,o=(+m.apply(this,arguments)+ +f.apply(this,arguments))/2-u.j/2;return[Object(u.e)(o)*e,Object(u.k)(o)*e]},e.innerRadius=function(n){return arguments.length?(t='function'==typeof n?n:Object(p.a)(+n),e):t},e.outerRadius=function(t){return arguments.length?(n='function'==typeof t?t:Object(p.a)(+t),e):n},e.cornerRadius=function(t){return arguments.length?(g='function'==typeof t?t:Object(p.a)(+t),e):g},e.padRadius=function(t){return arguments.length?(h=null==t?null:'function'==typeof t?t:Object(p.a)(+t),e):h},e.startAngle=function(t){return arguments.length?(m='function'==typeof t?t:Object(p.a)(+t),e):m},e.endAngle=function(t){return arguments.length?(f='function'==typeof t?t:Object(p.a)(+t),e):f},e.padAngle=function(t){return arguments.length?(b='function'==typeof t?t:Object(p.a)(+t),e):b},e.context=function(t){return arguments.length?(y=null==t?null:t,e):y},e}},function(e,t,n){'use strict';var a=Math.min,o=n(16),i=n(432),r=n(433),l=n(29);t.a=function(){function e(e){var o=e.length,n=0,r=Array(o),h=Array(o),m=+c.apply(this,arguments),f=a(l.m,Math.max(-l.m,u.apply(this,arguments)-m)),b=a(Math.abs(f)/o,g.apply(this,arguments)),_=b*(0>f?-1:1),y,x,w,C,T;for(y=0;y<o;++y)0<(T=h[r[y]=y]=+t(e[y],y,e))&&(n+=T);for(null==d?null!=s&&r.sort(function(t,n){return s(e[t],e[n])}):r.sort(function(e,t){return d(h[e],h[t])}),y=0,w=n?(f-o*_)/n:0;y<o;++y,m=C)x=r[y],T=h[x],C=m+(0<T?T*w:0)+_,h[x]={data:e[x],index:y,value:T,startAngle:m,endAngle:C,padAngle:b};return h}var t=r.a,d=i.a,s=null,c=Object(o.a)(0),u=Object(o.a)(l.m),g=Object(o.a)(0);return e.value=function(n){return arguments.length?(t='function'==typeof n?n:Object(o.a)(+n),e):t},e.sortValues=function(t){return arguments.length?(d=t,s=null,e):d},e.sort=function(t){return arguments.length?(s=t,d=null,e):s},e.startAngle=function(t){return arguments.length?(c='function'==typeof t?t:Object(o.a)(+t),e):c},e.endAngle=function(t){return arguments.length?(u='function'==typeof t?t:Object(o.a)(+t),e):u},e.padAngle=function(t){return arguments.length?(g='function'==typeof t?t:Object(o.a)(+t),e):g},e}},function(e,t){'use strict';t.a=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN}},function(e,t){'use strict';t.a=function(e){return e}},function(e,t,n){'use strict';var o=n(155),i=n(154),a=n(156);t.a=function(){var e=Object(i.a)().curve(o.a),t=e.curve,n=e.lineX0,r=e.lineX1,l=e.lineY0,d=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return Object(a.b)(n())},delete e.lineX0,e.lineEndAngle=function(){return Object(a.b)(r())},delete e.lineX1,e.lineInnerRadius=function(){return Object(a.b)(l())},delete e.lineY0,e.lineOuterRadius=function(){return Object(a.b)(d())},delete e.lineY1,e.curve=function(e){return arguments.length?t(Object(o.b)(e)):t()._curve},e}},function(e,t,n){'use strict';function a(e){return e.source}function o(e){return e.target}function i(e){function t(){var a=p.a.call(arguments),o=n.apply(this,a),s=i.apply(this,a),t;if(d||(d=t=Object(c.a)()),e(d,+r.apply(this,(a[0]=o,a)),+l.apply(this,a),+r.apply(this,(a[0]=s,a)),+l.apply(this,a)),t)return d=null,t+''||null}var n=a,i=o,r=u.a,l=u.b,d=null;return t.source=function(e){return arguments.length?(n=e,t):n},t.target=function(e){return arguments.length?(i=e,t):i},t.x=function(e){return arguments.length?(r='function'==typeof e?e:Object(s.a)(+e),t):r},t.y=function(e){return arguments.length?(l='function'==typeof e?e:Object(s.a)(+e),t):l},t.context=function(e){return arguments.length?(d=null==e?null:e,t):d},t}function r(e,t,n,a,o){e.moveTo(t,n),e.bezierCurveTo(t=(t+a)/2,n,t,o,a,o)}function l(e,t,n,a,o){e.moveTo(t,n),e.bezierCurveTo(t,n=(n+o)/2,a,n,a,o)}function d(e,t,n,a,o){var i=Object(g.a)(t,n),r=Object(g.a)(t,n=(n+o)/2),l=Object(g.a)(a,n),d=Object(g.a)(a,o);e.moveTo(i[0],i[1]),e.bezierCurveTo(r[0],r[1],l[0],l[1],d[0],d[1])}t.a=function(){return i(r)},t.c=function(){return i(l)},t.b=function(){var e=i(d);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e};var c=n(14),p=n(158),s=n(16),u=n(85),g=n(157)},function(e,t,n){'use strict';n.d(t,'b',function(){return u});var a=n(14),o=n(159),i=n(160),r=n(161),l=n(162),d=n(163),s=n(164),c=n(165),p=n(16),u=[o.a,i.a,r.a,d.a,l.a,s.a,c.a];t.a=function(){function e(){var e;if(i||(i=e=Object(a.a)()),t.apply(this,arguments).draw(i,+n.apply(this,arguments)),e)return i=null,e+''||null}var t=Object(p.a)(o.a),n=Object(p.a)(64),i=null;return e.type=function(n){return arguments.length?(t='function'==typeof n?n:Object(p.a)(n),e):t},e.size=function(t){return arguments.length?(n='function'==typeof t?t:Object(p.a)(+t),e):n},e.context=function(t){return arguments.length?(i=null==t?null:t,e):i},e}},function(e,t,n){'use strict';function a(e){this._context=e}var o=n(44),i=n(45);a.prototype={areaStart:o.a,areaEnd:o.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x2,this._y2),this._context.closePath();break}case 2:{this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break}case 3:{this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4);break}}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:Object(i.c)(this,e,t);}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.a=function(e){return new a(e)}},function(e,t,n){'use strict';function a(e){this._context=e}var o=n(45);a.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,a=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,a):this._context.moveTo(n,a);break;case 3:this._point=4;default:Object(o.c)(this,e,t);}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.a=function(e){return new a(e)}},function(e,t,n){'use strict';function a(e,t){this._basis=new o.a(e),this._beta=t}var o=n(45);a.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,n=this._y,a=e.length-1;if(0<a)for(var o=e[0],r=n[0],l=e[a]-o,d=n[a]-r,s=-1,i;++s<=a;)i=s/a,this._basis.point(this._beta*e[s]+(1-this._beta)*(o+i*l),this._beta*n[s]+(1-this._beta)*(r+i*d));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}},t.a=function e(t){function n(e){return 1===t?new o.a(e):new a(e,t)}return n.beta=function(t){return e(+t)},n}(0.85)},function(e,t,n){'use strict';function a(e,t){this._context=e,this._alpha=t}var o=n(166),i=n(44),r=n(86);a.prototype={areaStart:i.a,areaEnd:i.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3),this._context.closePath();break}case 2:{this._context.lineTo(this._x3,this._y3),this._context.closePath();break}case 3:{this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5);break}}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,a=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+a*a,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Object(r.b)(this,e,t);}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.a=function e(t){function n(e){return t?new a(e,t):new o.a(e,0)}return n.alpha=function(t){return e(+t)},n}(0.5)},function(e,t,n){'use strict';function a(e,t){this._context=e,this._alpha=t}var o=n(167),i=n(86);a.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,a=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+a*a,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(i.b)(this,e,t);}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.a=function e(t){function n(e){return t?new a(e,t):new o.a(e,0)}return n.alpha=function(t){return e(+t)},n}(0.5)},function(e,t,n){'use strict';function a(e){this._context=e}var o=n(44);a.prototype={areaStart:o.a,areaEnd:o.a,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}},t.a=function(e){return new a(e)}},function(e,t){'use strict';function n(e){return 0>e?-1:1}function a(e,t,a){var o=e._x1-e._x0,i=t-e._x1,r=(e._y1-e._y0)/(o||0>i&&-0),l=(a-e._y1)/(i||0>o&&-0);return(n(r)+n(l))*Math.min(s(r),s(l),0.5*s((r*i+l*o)/(o+i)))||0}function o(e,n){var t=e._x1-e._x0;return t?(3*(e._y1-e._y0)/t-n)/2:n}function i(e,t,n){var a=e._x0,o=e._y0,i=e._x1,r=e._y1,l=(i-a)/3;e._context.bezierCurveTo(a+l,o+l*t,i-l,r-l*n,i,r)}function r(e){this._context=e}function l(e){this._context=new d(e)}function d(e){this._context=e}var s=Math.abs;t.a=function(e){return new r(e)},t.b=function(e){return new l(e)},r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:i(this,this._t0,o(this,this._t0));}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(e=+e,t=+t,e!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,i(this,o(this,n=a(this,e,t)),n);break;default:i(this,this._t0,n=a(this,e,t));}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(l.prototype=Object.create(r.prototype)).point=function(e,t){r.prototype.point.call(this,t,e)},d.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,a,o,i){this._context.bezierCurveTo(t,e,a,n,i,o)}}},function(e,t){'use strict';function n(e){this._context=e}function a(e){var t=e.length-1,n=Array(t),a=Array(t),o=Array(t),r,i;for(n[0]=0,a[0]=2,o[0]=e[0]+2*e[1],r=1;r<t-1;++r)n[r]=1,a[r]=4,o[r]=4*e[r]+2*e[r+1];for(n[t-1]=2,a[t-1]=7,o[t-1]=8*e[t-1]+e[t],r=1;r<t;++r)i=n[r]/a[r-1],a[r]-=i,o[r]-=i*o[r-1];for(n[t-1]=o[t-1]/a[t-1],r=t-2;0<=r;--r)n[r]=(o[r]-n[r+1])/a[r];for(a[t-1]=(e[t]+n[t-1])/2,r=0;r<t-1;++r)a[r]=2*e[r+1]-n[r+1];return[n,a]}n.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,o=e.length;if(o)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===o)this._context.lineTo(e[1],t[1]);else for(var n=a(e),i=a(t),r=0,l=1;l<o;++r,++l)this._context.bezierCurveTo(n[0][r],i[0][r],n[1][r],i[1][r],e[l],t[l]);(this._line||0!==this._line&&1===o)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}},t.a=function(e){return new n(e)}},function(e,t){'use strict';function n(e,n){this._context=e,this._t=n}t.c=function(e){return new n(e,0)},t.b=function(e){return new n(e,1)},n.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&1>this._t&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),0<=this._line&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:{if(0>=this._t)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}break}}this._x=e,this._y=t}},t.a=function(e){return new n(e,0.5)}},function(e,t,n){'use strict';function a(e,t){return e[t]}var o=n(158),i=n(16),r=n(30),l=n(31);t.a=function(){function e(e){var a=t.apply(this,arguments),o=e.length,r=a.length,l=Array(r),c,i;for(c=0;c<r;++c){for(var p=a[c],u=l[c]=Array(o),g=0,h;g<o;++g)u[g]=h=[0,+n(e[g],p,g,e)],h.data=e[g];u.key=p}for(c=0,i=d(l);c<r;++c)l[i[c]].index=c;return s(l,i),l}var t=Object(i.a)([]),d=l.a,s=r.a,n=a;return e.keys=function(n){return arguments.length?(t='function'==typeof n?n:Object(i.a)(o.a.call(n)),e):t},e.value=function(t){return arguments.length?(n='function'==typeof t?t:Object(i.a)(+t),e):n},e.order=function(t){return arguments.length?(d=null==t?l.a:'function'==typeof t?t:Object(i.a)(o.a.call(t)),e):d},e.offset=function(t){return arguments.length?(s=null==t?r.a:t,e):s},e}},function(e,t,n){'use strict';var a=n(30);t.a=function(e,t){if(0<(i=e.length)){for(var o=0,r=e[0].length,l,i,n;o<r;++o){for(n=l=0;l<i;++l)n+=e[l][o][1]||0;if(n)for(l=0;l<i;++l)e[l][o][1]/=n}Object(a.a)(e,t)}}},function(e,t){'use strict';t.a=function(e,t){if(1<(c=e.length))for(var a=0,o=e[t[0]].length,r,i,l,d,s,c;a<o;++a)for(d=s=0,r=0;r<c;++r)0<=(l=(i=e[t[r]][a])[1]-i[0])?(i[0]=d,i[1]=d+=l):0>l?(i[1]=s,i[0]=s+=l):i[0]=d}},function(e,t,n){'use strict';var a=n(30);t.a=function(e,t){if(0<(d=e.length)){for(var o=0,r=e[t[0]],l=r.length,d;o<l;++o){for(var n=0,i=0;n<d;++n)i+=e[n][o][1]||0;r[o][1]+=r[o][0]=-i/2}Object(a.a)(e,t)}}},function(e,t,n){'use strict';var a=n(30);t.a=function(e,t){if(0<(s=e.length)&&0<(d=(l=e[t[0]]).length)){for(var o=0,r=1,l,d,s;r<d;++r){for(var n=0,i=0,c=0;n<s;++n){for(var p=e[t[n]],u=p[r][1]||0,g=p[r-1][1]||0,h=(u-g)/2,m=0;m<n;++m){var f=e[t[m]],b=f[r][1]||0,_=f[r-1][1]||0;h+=b-_}i+=u,c+=h*u}l[r-1][1]+=l[r-1][0]=o,i&&(o-=c/i)}l[r-1][1]+=l[r-1][0]=o,Object(a.a)(e,t)}}},function(e,t,n){'use strict';var a=n(87);t.a=function(e){return Object(a.a)(e).reverse()}},function(e,t,n){'use strict';var a=n(31),o=n(87);t.a=function(e){var t=e.length,n=e.map(o.b),r=Object(a.a)(e).sort(function(e,t){return n[t]-n[e]}),l=0,d=0,s=[],c=[],p,i;for(p=0;p<t;++p)i=r[p],l<d?(l+=n[i],s.push(i)):(d+=n[i],c.push(i));return c.reverse().concat(s)}},function(e,t,n){'use strict';var a=n(31);t.a=function(e){return Object(a.a)(e).reverse()}},function(e,t,n){'use strict';var a=n(455);n.d(t,'a',function(){return a.a})},function(e,t,n){'use strict';var a=Math.round,o=n(456),i=n(457),r=n(32);t.a=function(){function e(e){return new r.d(e.map(function(o,l){var i=[a(t(o,l,e)/r.f)*r.f,a(n(o,l,e)/r.f)*r.f];return i.index=l,i.data=o,i}),l)}var t=i.a,n=i.b,l=null;return e.polygons=function(t){return e(t).polygons()},e.links=function(t){return e(t).links()},e.triangles=function(t){return e(t).triangles()},e.x=function(n){return arguments.length?(t='function'==typeof n?n:Object(o.a)(+n),e):t},e.y=function(t){return arguments.length?(n='function'==typeof t?t:Object(o.a)(+t),e):n},e.extent=function(t){return arguments.length?(l=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],e):l&&[[l[0][0],l[0][1]],[l[1][0],l[1][1]]]},e.size=function(t){return arguments.length?(l=null==t?null:[[0,0],[+t[0],+t[1]]],e):l&&[l[1][0]-l[0][0],l[1][1]-l[0][1]]},e}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';t.a=function(e){return e[0]},t.b=function(e){return e[1]}},function(e,t,n){'use strict';function a(){Object(s.a)(this),this.edge=this.site=this.circle=null}function o(e){var t=h.pop()||new a;return t.site=e,t}function i(e){Object(p.b)(e),g.a.remove(e),h.push(e),Object(s.a)(e)}function r(e,t){var n=e.site,a=n[0],o=n[1],i=o-t;if(!i)return a;var r=e.P;if(!r)return-Infinity;n=r.site;var l=n[0],d=n[1],s=d-t;if(!s)return l;var c=l-a,p=1/i-1/s,u=c/s;return p?(-u+Math.sqrt(u*u-2*p*(c*c/(-2*s)-d+s/2+o-i/2)))/p+a:(a+l)/2}function l(e,t){var n=e.N;if(n)return r(n,t);var a=e.site;return a[1]===t?a[0]:Infinity}var d=Math.abs;t.b=function(e){var t=e.circle,n=t.x,a=t.cy,o=[n,a],r=e.P,l=e.N,s=[e];i(e);for(var c=r;c.circle&&d(n-c.circle.x)<g.f&&d(a-c.circle.cy)<g.f;)r=c.P,s.unshift(c),i(c),c=r;s.unshift(c),Object(p.b)(c);for(var h=l;h.circle&&d(n-h.circle.x)<g.f&&d(a-h.circle.cy)<g.f;)l=h.N,s.push(h),i(h),h=l;s.push(h),Object(p.b)(h);var m=s.length,f;for(f=1;f<m;++f)h=s[f],c=s[f-1],Object(u.d)(h.edge,c.site,h.site,o);c=s[0],h=s[m-1],h.edge=Object(u.c)(c.site,h.site,null,o),Object(p.a)(c),Object(p.a)(h)},t.a=function(e){for(var t=e[0],n=e[1],a=g.a._,i,s,h,m;a;)if(h=r(a,n)-t,h>g.f)a=a.L;else if(m=t-l(a,n),m>g.f){if(!a.R){i=a;break}a=a.R}else{h>-g.f?(i=a.P,s=a):m>-g.f?(i=a,s=a.N):i=s=a;break}Object(c.c)(e);var f=o(e);if(g.a.insert(i,f),i||s){if(i===s)return Object(p.b)(i),s=o(i.site),g.a.insert(f,s),f.edge=s.edge=Object(u.c)(i.site,f.site),Object(p.a)(i),void Object(p.a)(s);if(!s)return void(f.edge=Object(u.c)(i.site,f.site));Object(p.b)(i),Object(p.b)(s);var b=i.site,_=b[0],y=b[1],x=e[0]-_,w=e[1]-y,v=s.site,C=v[0]-_,T=v[1]-y,k=2*(x*T-w*C),d=x*x+w*w,S=C*C+T*T,E=[(T*d-w*S)/k+_,(x*S-C*d)/k+y];Object(u.d)(s.edge,b,v,E),f.edge=Object(u.c)(b,e,null,E),s.edge=Object(u.c)(e,v,null,E),Object(p.a)(i),Object(p.a)(s)}};var s=n(88),c=n(168),p=n(169),u=n(89),g=n(32),h=[]},function(e,t,n){'use strict';var a=n(460);n.d(t,'a',function(){return a.a});var o=n(170);n.d(t,'c',function(){return o.b}),n.d(t,'b',function(){return o.c})},function(e,t,n){'use strict';function a(){return!h.event.button}function o(){var t=this,e,n;return t instanceof SVGElement?(t=t.ownerSVGElement||t,e=t.width.baseVal.value,n=t.height.baseVal.value):(e=t.clientWidth,n=t.clientHeight),[[0,0],[e,n]]}function i(){return this.__zoom||_.c}function r(){return-h.event.deltaY*(h.event.deltaMode?120:1)/500}function l(){return'ontouchstart'in this}var d=Math.min,s=Math.max,c=Math.sqrt,p=n(13),u=n(66),g=n(4),h=n(1),m=n(67),f=n(461),b=n(462),_=n(170),y=n(463);t.a=function(){function e(e){e.property('__zoom',i).on('wheel.zoom',k).on('mousedown.zoom',S).on('dblclick.zoom',E).filter(l).on('touchstart.zoom',z).on('touchmove.zoom',A).on('touchend.zoom touchcancel.zoom',M).style('touch-action','none').style('-webkit-tap-highlight-color','rgba(0,0,0,0)')}function n(e,t){return t=s(L,d(P,t)),t===e.k?e:new _.a(t,e.x,e.y)}function x(e,t,n){var a=t[0]-n[0]*e.k,o=t[1]-n[1]*e.k;return a===e.x&&o===e.y?e:new _.a(e.k,a,o)}function w(e,t){var n=e.invertX(t[0][0])-R,a=e.invertX(t[1][0])-q,o=e.invertY(t[0][1])-I,i=e.invertY(t[1][1])-H;return e.translate(a>n?(n+a)/2:d(0,n)||s(0,a),i>o?(o+i)/2:d(0,o)||s(0,i))}function v(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function t(e,t,n){e.on('start.zoom',function(){C(this,arguments).start()}).on('interrupt.zoom end.zoom',function(){C(this,arguments).end()}).tween('zoom',function(){var o=this,r=arguments,d=C(o,r),l=j.apply(o,r),e=n||v(l),c=s(l[1][0]-l[0][0],l[1][1]-l[0][1]),p=o.__zoom,a='function'==typeof t?t.apply(o,r):t,u=O(p.invert(e).concat(c/p.k),a.invert(e).concat(c/a.k));return function(n){if(1===n)n=a;else{var t=u(n),o=c/t[2];n=new _.a(o,e[0]-t[0]*o,e[1]-t[1]*o)}d.zoom(null,n)}})}function C(e,t){for(var a=0,o=U.length,n;a<o;++a)if((n=U[a]).that===e)return n;return new T(e,t)}function T(e,t){this.that=e,this.args=t,this.index=-1,this.active=0,this.extent=j.apply(e,t)}function k(){function e(){a.wheel=null,a.end()}if(D.apply(this,arguments)){var a=C(this,arguments),o=this.__zoom,t=s(L,d(P,o.k*Math.pow(2,N.apply(this,arguments)))),i=Object(h.mouse)(this);if(a.wheel)(a.mouse[0][0]!==i[0]||a.mouse[0][1]!==i[1])&&(a.mouse[1]=o.invert(a.mouse[0]=i)),clearTimeout(a.wheel);else{if(o.k===t)return;a.mouse=[i,o.invert(i)],Object(m.b)(this),a.start()}Object(y.a)(),a.wheel=setTimeout(e,Y),a.zoom('mouse',w(x(n(o,t),a.mouse[0],a.mouse[1]),a.extent))}}function S(){function e(){if(Object(y.a)(),!n.moved){var e=h.event.clientX-i,t=h.event.clientY-r;n.moved=e*e+t*t>X}n.zoom('mouse',w(x(n.that.__zoom,n.mouse[0]=Object(h.mouse)(n.that),n.mouse[1]),n.extent))}function t(){a.on('mousemove.zoom mouseup.zoom',null),Object(u.c)(h.event.view,n.moved),Object(y.a)(),n.end()}if(!V&&D.apply(this,arguments)){var n=C(this,arguments),a=Object(h.select)(h.event.view).on('mousemove.zoom',e,!0).on('mouseup.zoom',t,!0),o=Object(h.mouse)(this),i=h.event.clientX,r=h.event.clientY;Object(u.b)(h.event.view),Object(y.b)(),n.mouse=[o,this.__zoom.invert(o)],Object(m.b)(this),n.start()}}function E(){if(D.apply(this,arguments)){var a=this.__zoom,o=Object(h.mouse)(this),i=a.invert(o),r=a.k*(h.event.shiftKey?0.5:2),l=w(x(n(a,r),o,i),j.apply(this,arguments));Object(y.a)(),0<B?Object(h.select)(this).transition().duration(B).call(t,l,o):Object(h.select)(this).call(e.transform,l)}}function z(){if(D.apply(this,arguments)){var e=C(this,arguments),a=h.event.changedTouches,o=a.length,n,r,i,t;for(Object(y.b)(),r=0;r<o;++r)i=a[r],t=Object(h.touch)(this,a,i.identifier),t=[t,this.__zoom.invert(t),i.identifier],e.touch0?!e.touch1&&(e.touch1=t):(e.touch0=t,n=!0);return $&&($=clearTimeout($),!e.touch1)?(e.end(),t=Object(h.select)(this).on('dblclick.zoom'),void(t&&t.apply(this,arguments))):void(n&&($=setTimeout(function(){$=null},W),Object(m.b)(this),e.start()))}}function A(){var e=C(this,arguments),a=h.event.changedTouches,o=a.length,r,i,t,d;for(Object(y.a)(),$&&($=clearTimeout($)),r=0;r<o;++r)i=a[r],t=Object(h.touch)(this,a,i.identifier),e.touch0&&e.touch0[2]===i.identifier?e.touch0[0]=t:e.touch1&&e.touch1[2]===i.identifier&&(e.touch1[0]=t);if(i=e.that.__zoom,e.touch1){var l=e.touch0[0],s=e.touch0[1],p=e.touch1[0],u=e.touch1[1],g=(g=p[0]-l[0])*g+(g=p[1]-l[1])*g,m=(m=u[0]-s[0])*m+(m=u[1]-s[1])*m;i=n(i,c(g/m)),t=[(l[0]+p[0])/2,(l[1]+p[1])/2],d=[(s[0]+u[0])/2,(s[1]+u[1])/2]}else if(e.touch0)t=e.touch0[0],d=e.touch0[1];else return;e.zoom('touch',w(x(i,t,d),e.extent))}function M(){var e=C(this,arguments),a=h.event.changedTouches,o=a.length,n,i;for(Object(y.b)(),V&&clearTimeout(V),V=setTimeout(function(){V=null},W),n=0;n<o;++n)i=a[n],e.touch0&&e.touch0[2]===i.identifier?delete e.touch0:e.touch1&&e.touch1[2]===i.identifier&&delete e.touch1;e.touch1&&!e.touch0&&(e.touch0=e.touch1,delete e.touch1),e.touch0?e.touch0[1]=this.__zoom.invert(e.touch0[0]):e.end()}var D=a,j=o,N=r,L=0,P=Infinity,R=-P,q=P,I=R,H=q,B=250,O=g.v,U=[],F=Object(p.a)('start','zoom','end'),W=500,Y=150,X=0,$,V;return e.transform=function(e,n){var a=e.selection?e.selection():e;a.property('__zoom',i),e===a?a.interrupt().each(function(){C(this,arguments).start().zoom(null,'function'==typeof n?n.apply(this,arguments):n).end()}):t(e,n)},e.scaleBy=function(t,n){e.scaleTo(t,function(){var e=this.__zoom.k,t='function'==typeof n?n.apply(this,arguments):n;return e*t})},e.scaleTo=function(t,a){e.transform(t,function(){var t=j.apply(this,arguments),e=this.__zoom,o=v(t),i=e.invert(o),r='function'==typeof a?a.apply(this,arguments):a;return w(x(n(e,r),o,i),t)})},e.translateBy=function(t,n,a){e.transform(t,function(){return w(this.__zoom.translate('function'==typeof n?n.apply(this,arguments):n,'function'==typeof a?a.apply(this,arguments):a),j.apply(this,arguments))})},e.translateTo=function(t,n,a){e.transform(t,function(){var o=j.apply(this,arguments),e=this.__zoom,t=v(o);return w(_.c.translate(t[0],t[1]).scale(e.k).translate('function'==typeof n?-n.apply(this,arguments):-n,'function'==typeof a?-a.apply(this,arguments):-a),o)})},T.prototype={start:function(){return 1==++this.active&&(this.index=U.push(this)-1,this.emit('start')),this},zoom:function(e,t){return this.mouse&&'mouse'!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&'touch'!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&'touch'!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit('zoom'),this},end:function(){return 0==--this.active&&(U.splice(this.index,1),this.index=-1,this.emit('end')),this},emit:function(t){Object(h.customEvent)(new b.a(e,t,this.that.__zoom),F.apply,F,[t,this.that,this.args])}},e.wheelDelta=function(t){return arguments.length?(N='function'==typeof t?t:Object(f.a)(+t),e):N},e.filter=function(t){return arguments.length?(D='function'==typeof t?t:Object(f.a)(!!t),e):D},e.extent=function(t){return arguments.length?(j='function'==typeof t?t:Object(f.a)([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),e):j},e.scaleExtent=function(t){return arguments.length?(L=+t[0],P=+t[1],e):[L,P]},e.translateExtent=function(t){return arguments.length?(R=+t[0][0],q=+t[1][0],I=+t[0][1],H=+t[1][1],e):[[R,I],[q,H]]},e.duration=function(t){return arguments.length?(B=+t,e):B},e.interpolate=function(t){return arguments.length?(O=t,e):O},e.on=function(){var t=F.on.apply(F,arguments);return t===F?e:t},e.clickDistance=function(t){return arguments.length?(X=(t=+t)*t,e):c(X)},e}},function(e,t){'use strict';t.a=function(e){return function(){return e}}},function(e,t){'use strict';t.a=function(e,t,n){this.target=e,this.type=t,this.transform=n}},function(e,t,n){'use strict';t.b=function(){a.event.stopImmediatePropagation()};var a=n(1);t.a=function(){a.event.preventDefault(),a.event.stopImmediatePropagation()}},function(e,t,n){(function(a){var e,e;!function d(c,t,i){function o(r,a){if(!t[r]){if(!c[r]){if(!a&&'function'==typeof e&&e)return e(r,!0);if(n)return n(r,!0);var s=new Error('Cannot find module \''+r+'\'');throw s.code='MODULE_NOT_FOUND',s}var l=t[r]={exports:{}};c[r][0].call(l.exports,function(t){var e=c[r][1][t];return o(e||t)},l,l.exports,d,c,t,i)}return t[r].exports}for(var n='function'==typeof e&&e,r=0;r<i.length;r++)o(i[r]);return o}({1:[function(n,e,t){'use strict';t.createLookup=function(t){return{arr:t,children:{}}},t.createSection=function(t){return{type:'section',name:t,items:[]}},t.isSection=function(t){return t&&'section'===t.type},t.getSectionName=function(t){return t.name},t.getSectionItems=function(t){return t.items},t.createItem=function(a,o,l,d,c,p){return{type:'item',id:a,value:o,text:l,description:d,initialIndex:c,section:p}},t.isItem=function(t){return t&&'item'===t.type}},{}],2:[function(o,e){'use strict';function l(t){return a.extend({},{allowBatchSelection:!0,collapsible:!0,enableSelectAll:!1,selectAllText:'Select All',unselectAllText:'Unselect All',freeze:!1,hideSidePanel:!1,onChange:null,onlyBatchSelection:!1,searchable:!1,searchParams:['value','text','description','section'],sectionDelimiter:'/',showSectionOnSelected:!0,sortable:!1,startCollapsed:!1},t)}var d=o('./tree'),n=0;e.exports=function(a){var o=this,t=l(a);return this.map(function(){var a=o;a.attr('multiple','').css('display','none');var e=new d(n,a,t);return e.initialize(),++n,{reload:function(){e.reload()},remove:function(){e.remove()}}})}},{"./tree":5}],3:[function(o,e){'use strict';function t(n,e,t,a){this.options=n,this.index={},this.selectionNodeHash=e,this.selectionNodeHashKeys=Object.keys(e),this.sectionNodeHash=t,this.sectionNodeHashKeys=Object.keys(t),this.setSearchParams(a),this.buildIndex()}function l(n){if(d.assert(n),n.length<c)return[n];for(var e=[],t=0;t<n.length-c+1;++t)e.push(n.substring(t,t+c));return e}var d=o('./utility'),c=3;t.prototype.setSearchParams=function(n){d.assert(Array.isArray(n));var e={value:!0,text:!0,description:!0,section:!0};this.searchParams=[];for(var t=0;t<n.length;++t)e[n[t]]&&this.searchParams.push(n[t])},t.prototype.buildIndex=function(){var n=this;this.options.forEach(function(a){var t=[];n.searchParams.forEach(function(n){t.push(a[n])}),d.array.removeFalseyExceptZero(t),t.map(function(t){return t.toLowerCase()}).forEach(function(e){e.split(' ').forEach(function(e){n._addToIndex(e,a.id)})})})},t.prototype._addToIndex=function(a,e){for(var t=1;t<=c;++t)for(var o=0,i;o<a.length-t+1;++o){i=a.substring(o,o+t),this.index[i]||(this.index[i]=[]);var n=this.index[i].length;0!==n&&this.index[i][n-1]===e||this.index[i].push(e)}},t.prototype.search=function(n){var a=this;if(!n)return this.selectionNodeHashKeys.forEach(function(t){a.selectionNodeHash[t].style.display=''}),void this.sectionNodeHashKeys.forEach(function(t){a.sectionNodeHash[t].style.display='',a.sectionNodeHash[t].removeAttribute('searchhit')});var t=[];(n=n.toLowerCase()).split(' ').forEach(function(n){l(n).forEach(function(n){t.push(a.index[n]||[])})});var o=d.array.intersectMany(t);this._handleNodeVisbilities(o)},t.prototype._handleNodeVisbilities=function(n){var o=this,t={},i={};n.forEach(function(r){t[r]=!0;var e=o.selectionNodeHash[r];for(e.style.display='',e=e.parentNode;!e.className.match(/tree-multiselect/);){if(e.className.match(/section/)){var n=d.getKey(e);if(d.assert(n||0===n),i[n])break;i[n]=!0,e.style.display='',e.setAttribute('searchhit',!0)}e=e.parentNode}}),this.selectionNodeHashKeys.forEach(function(n){t[n]||(o.selectionNodeHash[n].style.display='none')}),this.sectionNodeHashKeys.forEach(function(t){i[t]||(o.sectionNodeHash[t].style.display='none')})},e.exports=t},{"./utility":9}],4:[function(t){'use strict';a.fn.treeMultiselect=t('./main')},{"./main":2}],5:[function(i,e){'use strict';function g(n){if(Array.isArray(n)){for(var e=0,t=Array(n.length);e<n.length;e++)t[e]=n[e];return t}return Array.from(n)}function t(n,e,t){this.id=n,this.$originalSelect=e,this.params=t,this.resetState()}var b=i('./ast'),n=i('./search'),r=i('./ui-builder'),_=i('./utility');t.prototype.initialize=function(){if(this.generateSelections(this.$selectionContainer[0]),this.popupDescriptionHover(),this.params.allowBatchSelection&&this.handleSectionCheckboxMarkings(),this.params.collapsible&&this.addCollapsibility(),this.params.searchable||this.params.enableSelectAll){var t=_.dom.createNode('div',{class:'auxiliary'});this.$selectionContainer.prepend(t,this.$selectionContainer.firstChild),this.params.searchable&&this.createSearchBar(t),this.params.enableSelectAll&&this.createSelectAllButtons(t)}this.armRemoveSelectedOnClick(),this.updateSelectedAndOnChange(),this.render(!0),this.uiBuilder.attach()},t.prototype.remove=function(){this.uiBuilder.remove(),this.resetState()},t.prototype.reload=function(){this.remove(),this.initialize()},t.prototype.resetState=function(){this.uiBuilder=new r(this.$originalSelect,this.params.hideSidePanel),this.$treeContainer=this.uiBuilder.$treeContainer,this.$selectionContainer=this.uiBuilder.$selectionContainer,this.$selectedContainer=this.uiBuilder.$selectedContainer,this.selectOptions=[],this.selectNodes={},this.sectionNodes={},this.selectedNodes={},this.selectedKeys=[],this.keysToAdd=[],this.keysToRemove=[]},t.prototype.generateSelections=function(n){var e=this.$originalSelect.children('option'),t=this.createAst(e);this.generateHtml(t,n)},t.prototype.createAst=function(r){var e=[],i=b.createLookup(e),s=this,n=0,a=[],o;return r.each(function(){var o=this;o.setAttribute('data-key',n);var e=o.getAttribute('data-section'),t=o.value,r=o.text,c=o.getAttribute('data-description'),l=parseInt(o.getAttribute('data-index')),g=b.createItem(n,t,r,c,l,e);l?s.keysToAdd[l]=n:o.hasAttribute('selected')&&a.push(n),s.selectOptions[n]=g,++n;for(var d=i,u=e&&0<e.length?e.split(s.params.sectionDelimiter):[],p=0,h;p<u.length;++p)if(h=u[p],d.children[h])d=d.children[h];else{var f=b.createSection(h);d.arr.push(f);var _=b.createLookup(f.items);d.children[h]=_,d=_}d.arr.push(g)}),_.array.removeFalseyExceptZero(this.keysToAdd),(o=this.keysToAdd).push.apply(o,a),_.array.uniq(this.keysToAdd),e},t.prototype.generateHtml=function(r,e,t){t=t||0;for(var i=0,s=0,n;s<r.length;++s)if(n=r[s],b.isSection(n)){var a=b.getSectionName(n),o=i+t,l=_.dom.createSection(a,o,this.params.onlyBatchSelection||this.params.allowBatchSelection,this.params.freeze);this.sectionNodes[o]=l,++i,e.appendChild(l),i+=this.generateHtml(b.getSectionItems(n),l,t+i)}else if(b.isItem(n)){var c=_.dom.createSelection(n,this.id,!this.params.onlyBatchSelection,this.params.freeze);this.selectNodes[n.id]=c,e.appendChild(c)}return i},t.prototype.popupDescriptionHover=function(){this.$selectionContainer.on('mouseenter','div.item > span.description',function(){var n=a(this).parent(),e=n.attr('data-description'),t=document.createElement('div');t.className='temp-description-popup',t.innerHTML=e,t.style.position='absolute',n.append(t)}),this.$selectionContainer.on('mouseleave','div.item > span.description',function(){a(this).parent().find('div.temp-description-popup').remove()})},t.prototype.handleSectionCheckboxMarkings=function(){var n=this;this.$selectionContainer.on('click','input.section[type=checkbox]',function(){var o=[];if(a(this).closest('div.section').find('div.item').each(function(t,e){o.push(_.getKey(e))}),this.checked){var e;(e=n.keysToAdd).push.apply(e,o),_.array.uniq(n.keysToAdd)}else{var t;(t=n.keysToRemove).push.apply(t,o),_.array.uniq(n.keysToRemove)}n.render()})},t.prototype.redrawSectionCheckboxes=function(o){var l=3,t=this;if((o=o||this.$selectionContainer).find('> div.section').each(function(){var n=t.redrawSectionCheckboxes(a(this));l&=n}),l)for(var e=o.find('> div.item > input[type=checkbox]'),i=0;i<e.length&&(l&=e[i].checked?-3:-2,0!=l);++i);var n=o.find('> div.title > input[type=checkbox]');return n.length&&(n=n[0],1&l?(n.checked=!0,n.indeterminate=!1):2&l?(n.checked=!1,n.indeterminate=!1):(n.checked=!1,n.indeterminate=!0)),l},t.prototype.addCollapsibility=function(){var n=this.$selectionContainer.find('div.title'),e=_.dom.createNode('span',{class:'collapse-section'});n.prepend(e);var t=this.$selectionContainer.find('div.section');this.params.startCollapsed&&t.addClass('collapsed'),this.$selectionContainer.on('click','div.title',function(t){'INPUT'!==t.target.nodeName&&(a(this).parent().toggleClass('collapsed'),t.stopPropagation())})},t.prototype.createSearchBar=function(a){var o=new n(this.selectOptions,this.selectNodes,this.sectionNodes,this.params.searchParams),e=_.dom.createNode('input',{class:'search',placeholder:'Search...'});a.appendChild(e),this.$selectionContainer.on('input','input.search',function(){var t=this.value;o.search(t)})},t.prototype.createSelectAllButtons=function(a){var e=_.dom.createNode('span',{class:'select-all',text:this.params.selectAllText}),t=_.dom.createNode('span',{class:'unselect-all',text:this.params.unselectAllText}),o=_.dom.createNode('div',{class:'select-all-container'});o.appendChild(e),o.appendChild(t),a.appendChild(o);var n=this;this.$selectionContainer.on('click','span.select-all',function(){for(var t=0;t<n.selectOptions.length;++t)n.keysToAdd.push(t);_.array.uniq(n.keysToAdd),n.render()}),this.$selectionContainer.on('click','span.unselect-all',function(){var t;(t=n.keysToRemove).push.apply(t,g(n.selectedKeys)),_.array.uniq(n.keysToRemove),n.render()})},t.prototype.armRemoveSelectedOnClick=function(){var n=this;this.$selectedContainer.on('click','span.remove-selected',function(){var e=this.parentNode,t=_.getKey(e);n.keysToRemove.push(t),n.render()})},t.prototype.updateSelectedAndOnChange=function(){var a=this;if(this.$selectionContainer.on('click','input.option[type=checkbox]',function(){var e=this,t=e.parentNode,n=_.getKey(t);_.assert(n||0===n),e.checked?a.keysToAdd.push(n):a.keysToRemove.push(n),a.render()}),this.params.sortable&&!this.params.freeze){var o=null,e=null;this.$selectedContainer.sortable({start:function(t,e){o=e.item.index()},stop:function(t,i){e=i.item.index(),o!==e&&(_.array.moveEl(a.selectedKeys,o,e),a.render())}})}},t.prototype.render=function(s){var c=this,i;_.array.subtract(this.keysToAdd,this.selectedKeys),_.array.intersect(this.keysToRemove,this.selectedKeys);for(var t=0,n;t<this.keysToRemove.length;++t)n=this.selectedNodes[this.keysToRemove[t]],n&&(n.parentNode.removeChild(n),this.selectedNodes[this.keysToRemove[t]]=null),this.selectNodes[this.keysToRemove[t]].getElementsByTagName('INPUT')[0].checked=!1;_.array.subtract(this.selectedKeys,this.keysToRemove);for(var r=0;r<this.keysToAdd.length;++r){var a=this.keysToAdd[r],o=this.selectOptions[a];this.selectedKeys.push(a);var l=_.dom.createSelected(o,this.params.freeze,this.params.showSectionOnSelected);this.selectedNodes[o.id]=l,this.$selectedContainer.append(l),this.selectNodes[this.keysToAdd[r]].getElementsByTagName('INPUT')[0].checked=!0}(i=this.selectedKeys).push.apply(i,g(this.keysToAdd)),_.array.uniq(this.selectedKeys),this.redrawSectionCheckboxes();for(var h={},d={},u=0,p;u<this.selectedKeys.length;++u)p=this.selectOptions[this.selectedKeys[u]].value,h[this.selectedKeys[u]]=!0,d[p]=u;var f=this.$originalSelect.find('option').toArray();if(f.sort(function(n,e){return(d[n.value]||0)-(d[e.value]||0)}),this.$originalSelect.html(f),this.$originalSelect.find('option').each(function(n,e){this.selected=!!h[_.getKey(e)]}),this.$originalSelect.change(),!s&&this.params.onChange){var b=this.selectedKeys.map(function(t){return c.selectOptions[t]}),y=this.keysToAdd.map(function(t){return c.selectOptions[t]}),m=this.keysToRemove.map(function(t){return c.selectOptions[t]});this.params.onChange(b,y,m)}this.keysToRemove=[],this.keysToAdd=[]},e.exports=t},{"./ast":1,"./search":3,"./ui-builder":6,"./utility":9}],6:[function(n,e){'use strict';function t(o,e){var t=a('<div class="tree-multiselect"></div>'),i=a('<div class="selections"></div>');e&&i.addClass('no-border'),t.append(i);var r=a('<div class="selected"></div>');e||t.append(r),this.$el=o,this.$treeContainer=t,this.$selectionContainer=i,this.$selectedContainer=r}t.prototype.attach=function(){this.$el.after(this.$treeContainer)},t.prototype.remove=function(){this.$treeContainer.remove()},e.exports=t},{}],7:[function(n,e,t){'use strict';function a(n,e){for(var t=0,a=0;a<n.length;++a)e(n[a])&&(n[t]=n[a],++t);n.length=t}t.uniq=function(n){var o={};a(n,function(t){var e=!o[t];return o[t]=!0,e})},t.removeFalseyExceptZero=function(t){a(t,function(t){return t||0===t})},t.moveEl=function(n,e,t){var a=n[e];n.splice(e,1),n.splice(t,0,a)},t.subtract=function(o,e){for(var t={},i=0;i<e.length;++i)t[e[i]]=!0;a(o,function(n){return!t[n]})},t.intersect=function(o,e){for(var t={},i=0;i<e.length;++i)t[e[i]]=!0;a(o,function(n){return t[n]})},t.intersectMany=function(l){var d=[],t=[];l.forEach(function(n){d.push(0),t.push(n.length-1)});for(var e=[];0<d.length&&d[0]<=t[0];++d[0]){for(var i=!1,n=1;n<l.length;++n){for(;l[n][d[n]]<l[0][d[0]]&&d[n]<=t[n];)++d[n];if(d[n]>t[n]){i=!0;break}}if(i)break;for(var r=!0,a=1;a<l.length;++a)if(l[0][d[0]]!==l[a][d[a]]){r=!1;break}r&&e.push(l[0][d[0]])}return e}},{}],8:[function(n,e,g){'use strict';g.createNode=function(n,e){var t=document.createElement(n);if(e){for(var a in e)e.hasOwnProperty(a)&&'text'!==a&&t.setAttribute(a,e[a]);e.text&&(t.textContent=e.text)}return t},g.createSelection=function(i,e,t,s){var n={class:'item',"data-key":i.id,"data-value":i.value},r=!!i.description;r&&(n['data-description']=i.description),i.initialIndex&&(n['data-index']=i.initialIndex);var a=g.createNode('div',n);if(r){var o=g.createNode('span',{class:'description',text:'?'});a.appendChild(o)}if(t){var c='treemultiselect-'+e+'-'+i.id,m={class:'option',type:'checkbox',id:c};s&&(m.disabled=!0);var h=g.createNode('input',m);a.insertBefore(h,a.firstChild);var d={for:c,text:i.text||i.value},u=g.createNode('label',d);a.appendChild(u)}else a.innerText=i.text||i.value;return a},g.createSelected=function(o,e,i){var l=g.createNode('div',{class:'item',"data-key":o.id,"data-value":o.value,text:o.text});if(!e){var n=g.createNode('span',{class:'remove-selected',text:'\xD7'});l.insertBefore(n,l.firstChild)}if(i){var r=g.createNode('span',{class:'section-name',text:o.section});l.appendChild(r)}return l},g.createSection=function(i,l,d,s){var n=g.createNode('div',{class:'section',"data-key":l}),r=g.createNode('div',{class:'title',text:i});if(d){var a={class:'section',type:'checkbox'};s&&(a.disabled=!0);var o=g.createNode('input',a);r.insertBefore(o,r.firstChild)}return n.appendChild(r),n}},{}],9:[function(n,e,t){'use strict';t.array=n('./array'),t.assert=function(n,a){if(!n)throw new Error(a||'Assertion failed')},t.dom=n('./dom'),t.getKey=function(n){return t.assert(n),parseInt(n.getAttribute('data-key'))}},{"./array":7,"./dom":8}]},{},[4])}).call(t,n(171))},function(e,t,n){var a=n(466);'string'==typeof a&&(a=[[e.i,a,'']]);var o={},i;o.transform=i;n(173)(a,o);a.locals&&(e.exports=a.locals),!1},function(e,t,n){t=e.exports=n(172)(void 0),t.push([e.i,'/* jQuery Tree Multiselect v2.3.1 | (c) Patrick Tsai | MIT Licensed */\ndiv.tree-multiselect {\n  border: 2px solid #D8D8D8;\n  border-radius: 5px;\n  display: table;\n  height: inherit;\n  width: 100%; }\n  div.tree-multiselect > div.selected,\n  div.tree-multiselect > div.selections {\n    display: inline-block;\n    vertical-align: top;\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    display: table-cell;\n    padding: 1%;\n    width: 50%; }\n  div.tree-multiselect > div.selections {\n    border-right: solid 2px #D8D8D8; }\n    div.tree-multiselect > div.selections div.item {\n      margin-left: 16px; }\n      div.tree-multiselect > div.selections div.item label {\n        cursor: pointer;\n        display: inline; }\n    div.tree-multiselect > div.selections.no-border {\n      border-right: none; }\n  div.tree-multiselect > div.selected > div.item {\n    padding: 2px 5px;\n    border-radius: 2px;\n    background: #EAEAEA; }\n  div.tree-multiselect > div.selected.ui-sortable > div.item:hover {\n    cursor: move; }\n  div.tree-multiselect div.section > div.section,\n  div.tree-multiselect div.section > div.item {\n    padding-left: 20px; }\n  div.tree-multiselect div.section.collapsed > div.title span.collapse-section:after {\n    content: "+"; }\n  div.tree-multiselect div.section.collapsed:not([searchhit]) > .item,\n  div.tree-multiselect div.section.collapsed:not([searchhit]) > .section {\n    display: none; }\n  div.tree-multiselect div.title,\n  div.tree-multiselect div.item {\n    margin-bottom: 2px; }\n  div.tree-multiselect div.title {\n    background: #777;\n    color: white;\n    padding: 2px; }\n    div.tree-multiselect div.title > * {\n      display: inline-block; }\n    div.tree-multiselect div.title > span.collapse-section {\n      margin: 0 3px;\n      width: 8px; }\n      div.tree-multiselect div.title > span.collapse-section:after {\n        content: "-"; }\n    div.tree-multiselect div.title:hover {\n      cursor: pointer; }\n  div.tree-multiselect input[type=checkbox] {\n    display: inline;\n    margin-right: 5px; }\n    div.tree-multiselect input[type=checkbox]:hover {\n      cursor: pointer; }\n  div.tree-multiselect span.remove-selected,\n  div.tree-multiselect span.description {\n    padding: 0 3px;\n    margin-right: 5px;\n    background: #777;\n    color: white;\n    border-radius: 2px; }\n  div.tree-multiselect span.remove-selected:hover {\n    cursor: pointer; }\n  div.tree-multiselect span.description:hover {\n    cursor: help; }\n  div.tree-multiselect div.temp-description-popup {\n    background: #EAEAEA;\n    padding: 5px;\n    border: 2px solid #676767;\n    border-radius: 3px; }\n  div.tree-multiselect span.section-name {\n    float: right;\n    font-style: italic; }\n  div.tree-multiselect .auxiliary {\n    display: table;\n    width: 100%; }\n    div.tree-multiselect .auxiliary input.search {\n      padding: 5px;\n      margin: 0;\n      border: 2px solid #D8D8D8;\n      display: table-cell;\n      width: 100%; }\n    div.tree-multiselect .auxiliary .select-all-container {\n      display: table-cell;\n      text-align: right; }\n      div.tree-multiselect .auxiliary .select-all-container span.select-all,\n      div.tree-multiselect .auxiliary .select-all-container span.unselect-all {\n        padding-right: 5px;\n        margin-right: 5px; }\n        div.tree-multiselect .auxiliary .select-all-container span.select-all:hover,\n        div.tree-multiselect .auxiliary .select-all-container span.unselect-all:hover {\n          cursor: pointer; }\n      div.tree-multiselect .auxiliary .select-all-container span.select-all {\n        border-right: 2px solid #D8D8D8; }\n',''])},function(e){e.exports=function(e){var t='undefined'!=typeof window&&window.location;if(!t)throw new Error('fixUrls requires window.location');if(!e||'string'!=typeof e)return e;var n=t.protocol+'//'+t.host,a=n+t.pathname.replace(/\/[^\/]*$/,'/'),o=e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return e;var i;return i=0===o.indexOf('//')?o:0===o.indexOf('/')?n+o:a+o.replace(/^\.\//,''),'url('+JSON.stringify(i)+')'});return o}},function(e){e.exports=[{id:'b3x',brand:'Black Diamond',model:'Camalot C3',size:'000',color:'gray',lobes:'3',weight:'55',strength:'4',lower:'7.8',upper:'12.9',range:'5.1',man_usable_lower:'',man_usable_upper:''},{id:'b3z',brand:'Black Diamond',model:'Camalot C3',size:'00',color:'purple',lobes:'3',weight:'57',strength:'6',lower:'9',upper:'13.7',range:'4.7',man_usable_lower:'',man_usable_upper:''},{id:'b30',brand:'Black Diamond',model:'Camalot C3',size:'0',color:'green',lobes:'3',weight:'59',strength:'7',lower:'10.7',upper:'15.8',range:'5.1',man_usable_lower:'',man_usable_upper:''},{id:'b31',brand:'Black Diamond',model:'Camalot C3',size:'1',color:'red',lobes:'3',weight:'62',strength:'10',lower:'12',upper:'18.8',range:'6.8',man_usable_lower:'',man_usable_upper:''},{id:'b32',brand:'Black Diamond',model:'Camalot C3',size:'2',color:'yellow',lobes:'3',weight:'66',strength:'10',lower:'14.2',upper:'22.6',range:'8.4',man_usable_lower:'',man_usable_upper:''},{id:'b4c',brand:'Black Diamond',model:'Camalot C4',size:'0.3',color:'blue',lobes:'4',weight:'75',strength:'8',lower:'13.8',upper:'23.4',range:'9.6',man_usable_lower:'',man_usable_upper:''},{id:'b4d',brand:'Black Diamond',model:'Camalot C4',size:'0.4',color:'gray',lobes:'4',weight:'83',strength:'10',lower:'15.5',upper:'26.7',range:'11.2',man_usable_lower:'',man_usable_upper:''},{id:'b4e',brand:'Black Diamond',model:'Camalot C4',size:'0.5',color:'purple',lobes:'4',weight:'99',strength:'12',lower:'19.6',upper:'33.5',range:'13.9',man_usable_lower:'',man_usable_upper:''},{id:'b4g',brand:'Black Diamond',model:'Camalot C4',size:'0.75',color:'green',lobes:'4',weight:'119',strength:'14',lower:'23.9',upper:'41.2',range:'17.3',man_usable_lower:'',man_usable_upper:''},{id:'b41',brand:'Black Diamond',model:'Camalot C4',size:'1',color:'red',lobes:'4',weight:'136',strength:'14',lower:'30.2',upper:'52.1',range:'21.9',man_usable_lower:'',man_usable_upper:''},{id:'b42',brand:'Black Diamond',model:'Camalot C4',size:'2',color:'yellow',lobes:'4',weight:'155',strength:'14',lower:'37.2',upper:'64.9',range:'27.7',man_usable_lower:'',man_usable_upper:''},{id:'b43',brand:'Black Diamond',model:'Camalot C4',size:'3',color:'blue',lobes:'4',weight:'201',strength:'14',lower:'50.7',upper:'87.9',range:'37.2',man_usable_lower:'',man_usable_upper:''},{id:'b44',brand:'Black Diamond',model:'Camalot C4',size:'4',color:'gray',lobes:'4',weight:'289',strength:'14',lower:'66',upper:'114.7',range:'48.7',man_usable_lower:'',man_usable_upper:''},{id:'b45',brand:'Black Diamond',model:'Camalot C4',size:'5',color:'purple',lobes:'4',weight:'380',strength:'14',lower:'85.4',upper:'148.5',range:'63.1',man_usable_lower:'',man_usable_upper:''},{id:'b46',brand:'Black Diamond',model:'Camalot C4',size:'6',color:'green',lobes:'4',weight:'557',strength:'14',lower:'114.1',upper:'195',range:'80.9',man_usable_lower:'',man_usable_upper:''},{id:'bud',brand:'Black Diamond',model:'Camalot Ultralight',size:'0.4',color:'gray',lobes:'4',weight:'61',strength:'8',lower:'15.5',upper:'26.7',range:'11.2',man_usable_lower:'',man_usable_upper:''},{id:'bue',brand:'Black Diamond',model:'Camalot Ultralight',size:'0.5',color:'purple',lobes:'4',weight:'74',strength:'10',lower:'19.6',upper:'33.5',range:'13.9',man_usable_lower:'',man_usable_upper:''},{id:'bug',brand:'Black Diamond',model:'Camalot Ultralight',size:'0.75',color:'green',lobes:'4',weight:'89',strength:'12',lower:'23.9',upper:'41.2',range:'17.3',man_usable_lower:'',man_usable_upper:''},{id:'bu1',brand:'Black Diamond',model:'Camalot Ultralight',size:'1',color:'red',lobes:'4',weight:'101',strength:'12',lower:'30.2',upper:'52.1',range:'21.9',man_usable_lower:'',man_usable_upper:''},{id:'bu2',brand:'Black Diamond',model:'Camalot Ultralight',size:'2',color:'yellow',lobes:'4',weight:'126',strength:'12',lower:'37.2',upper:'64.9',range:'27.7',man_usable_lower:'',man_usable_upper:''},{id:'bu3',brand:'Black Diamond',model:'Camalot Ultralight',size:'3',color:'blue',lobes:'4',weight:'167',strength:'12',lower:'50.7',upper:'87.9',range:'37.2',man_usable_lower:'',man_usable_upper:''},{id:'bu4',brand:'Black Diamond',model:'Camalot Ultralight',size:'4',color:'gray',lobes:'4',weight:'225',strength:'12',lower:'66',upper:'114.7',range:'48.7',man_usable_lower:'',man_usable_upper:''},{id:'bxa',brand:'Black Diamond',model:'X4',size:'0.1',color:'red',lobes:'4',weight:'51',strength:'5',lower:'8.4',upper:'13.8',range:'5.4',man_usable_lower:'',man_usable_upper:''},{id:'bxb',brand:'Black Diamond',model:'X4',size:'0.2',color:'yellow',lobes:'4',weight:'54',strength:'6',lower:'9.9',upper:'16.5',range:'6.6',man_usable_lower:'',man_usable_upper:''},{id:'bxc',brand:'Black Diamond',model:'X4',size:'0.3',color:'blue',lobes:'4',weight:'75',strength:'8',lower:'12.4',upper:'21.2',range:'8.8',man_usable_lower:'',man_usable_upper:''},{id:'bxd',brand:'Black Diamond',model:'X4',size:'0.4',color:'gray',lobes:'4',weight:'82',strength:'10',lower:'15.5',upper:'26.6',range:'11.1',man_usable_lower:'',man_usable_upper:''},{id:'bxe',brand:'Black Diamond',model:'X4',size:'0.5',color:'purple',lobes:'4',weight:'91',strength:'10',lower:'19.8',upper:'33.7',range:'13.9',man_usable_lower:'',man_usable_upper:''},{id:'bxg',brand:'Black Diamond',model:'X4',size:'0.75',color:'green',lobes:'4',weight:'112',strength:'10',lower:'24',upper:'41.2',range:'17.2',man_usable_lower:'',man_usable_upper:''},{id:'d30',brand:'DMM',model:'3CU',size:'0',color:'blue',lobes:'3',weight:'74',strength:'12/14',lower:'13',upper:'19',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'d3e',brand:'DMM',model:'3CU',size:'0.5',color:'red',lobes:'3',weight:'80',strength:'12/14',lower:'17',upper:'24',range:'7',man_usable_lower:'',man_usable_upper:''},{id:'d31',brand:'DMM',model:'3CU',size:'1',color:'gold',lobes:'3',weight:'84',strength:'12/14',lower:'19',upper:'29',range:'10',man_usable_lower:'',man_usable_upper:''},{id:'d3j',brand:'DMM',model:'3CU',size:'1.25',color:'purple',lobes:'3',weight:'87',strength:'12/14',lower:'21',upper:'33',range:'12',man_usable_lower:'',man_usable_upper:''},{id:'d3k',brand:'DMM',model:'3CU',size:'1.5',color:'silver',lobes:'3',weight:'88',strength:'12/14',lower:'23',upper:'35',range:'12',man_usable_lower:'',man_usable_upper:''},{id:'d3n',brand:'DMM',model:'3CU',size:'1.75',color:'green',lobes:'3',weight:'90',strength:'12/14',lower:'25',upper:'41',range:'16',man_usable_lower:'',man_usable_upper:''},{id:'d40',brand:'DMM',model:'4CU',size:'0',color:'blue',lobes:'4',weight:'75',strength:'12/14',lower:'13',upper:'19',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'d4e',brand:'DMM',model:'4CU',size:'0.5',color:'red',lobes:'4',weight:'80',strength:'12/14',lower:'17',upper:'24',range:'7',man_usable_lower:'',man_usable_upper:''},{id:'d41',brand:'DMM',model:'4CU',size:'1',color:'gold',lobes:'4',weight:'93',strength:'12/14',lower:'19',upper:'29',range:'10',man_usable_lower:'',man_usable_upper:''},{id:'d4j',brand:'DMM',model:'4CU',size:'1.25',color:'purple',lobes:'4',weight:'96',strength:'12/14',lower:'21',upper:'33',range:'12',man_usable_lower:'',man_usable_upper:''},{id:'d4k',brand:'DMM',model:'4CU',size:'1.5',color:'silver',lobes:'4',weight:'97',strength:'12/14',lower:'23',upper:'35',range:'12',man_usable_lower:'',man_usable_upper:''},{id:'d4n',brand:'DMM',model:'4CU',size:'1.75',color:'green',lobes:'4',weight:'99',strength:'12/14',lower:'25',upper:'41',range:'16',man_usable_lower:'',man_usable_upper:''},{id:'d42',brand:'DMM',model:'4CU',size:'2',color:'red',lobes:'4',weight:'110',strength:'12/14',lower:'29',upper:'44',range:'15',man_usable_lower:'',man_usable_upper:''},{id:'d4o',brand:'DMM',model:'4CU',size:'2.5',color:'gold',lobes:'4',weight:'123',strength:'12/14',lower:'33',upper:'55',range:'22',man_usable_lower:'',man_usable_upper:''},{id:'d43',brand:'DMM',model:'4CU',size:'3',color:'purple',lobes:'4',weight:'151',strength:'12/14',lower:'43',upper:'66',range:'23',man_usable_lower:'',man_usable_upper:''},{id:'d4p',brand:'DMM',model:'4CU',size:'3.5',color:'blue',lobes:'4',weight:'185',strength:'12/14',lower:'51',upper:'82',range:'31',man_usable_lower:'',man_usable_upper:''},{id:'d44',brand:'DMM',model:'4CU',size:'4',color:'silver',lobes:'4',weight:'224',strength:'12/14',lower:'64',upper:'100',range:'36',man_usable_lower:'',man_usable_upper:''},{id:'dd0',brand:'DMM',model:'Demon',size:'0',color:'blue',lobes:'4',weight:'84',strength:'14',lower:'13',upper:'19',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'dde',brand:'DMM',model:'Demon',size:'0.5',color:'red',lobes:'4',weight:'90',strength:'14',lower:'17',upper:'24',range:'7',man_usable_lower:'',man_usable_upper:''},{id:'dd1',brand:'DMM',model:'Demon',size:'1',color:'gold',lobes:'4',weight:'97',strength:'14',lower:'19',upper:'29',range:'10',man_usable_lower:'',man_usable_upper:''},{id:'ddk',brand:'DMM',model:'Demon',size:'1.5',color:'silver',lobes:'4',weight:'101',strength:'14',lower:'23',upper:'35',range:'12',man_usable_lower:'',man_usable_upper:''},{id:'dd2',brand:'DMM',model:'Demon',size:'2',color:'red',lobes:'4',weight:'113',strength:'14',lower:'29',upper:'44',range:'15',man_usable_lower:'',man_usable_upper:''},{id:'ddo',brand:'DMM',model:'Demon',size:'2.5',color:'gold',lobes:'4',weight:'127',strength:'14',lower:'33',upper:'55',range:'22',man_usable_lower:'',man_usable_upper:''},{id:'dd3',brand:'DMM',model:'Demon',size:'3',color:'purple',lobes:'4',weight:'154',strength:'14',lower:'43',upper:'66',range:'23',man_usable_lower:'',man_usable_upper:''},{id:'ddp',brand:'DMM',model:'Demon',size:'3.5',color:'blue',lobes:'4',weight:'181',strength:'14',lower:'51',upper:'82',range:'31',man_usable_lower:'',man_usable_upper:''},{id:'dd4',brand:'DMM',model:'Demon',size:'4',color:'silver',lobes:'4',weight:'221',strength:'14',lower:'64',upper:'100',range:'36',man_usable_lower:'',man_usable_upper:''},{id:'dgz',brand:'DMM',model:'Dragon',size:'00',color:'blue',lobes:'4',weight:'75',strength:'9',lower:'13.6',upper:'22.5',range:'8.9',man_usable_lower:'',man_usable_upper:''},{id:'dg0',brand:'DMM',model:'Dragon',size:'0',color:'silver',lobes:'4',weight:'85',strength:'12',lower:'16',upper:'26.7',range:'10.7',man_usable_lower:'',man_usable_upper:''},{id:'dg1',brand:'DMM',model:'Dragon',size:'1',color:'purple',lobes:'4',weight:'97',strength:'14',lower:'20',upper:'33',range:'13',man_usable_lower:'',man_usable_upper:''},{id:'dg2',brand:'DMM',model:'Dragon',size:'2',color:'green',lobes:'4',weight:'106',strength:'14',lower:'24',upper:'41',range:'17',man_usable_lower:'',man_usable_upper:''},{id:'dg3',brand:'DMM',model:'Dragon',size:'3',color:'red',lobes:'4',weight:'119',strength:'14',lower:'29',upper:'50',range:'21',man_usable_lower:'',man_usable_upper:''},{id:'dg4',brand:'DMM',model:'Dragon',size:'4',color:'gold',lobes:'4',weight:'148',strength:'14',lower:'38',upper:'64',range:'26',man_usable_lower:'',man_usable_upper:''},{id:'dg5',brand:'DMM',model:'Dragon',size:'5',color:'blue',lobes:'4',weight:'195',strength:'14',lower:'50',upper:'85',range:'35',man_usable_lower:'',man_usable_upper:''},{id:'dg6',brand:'DMM',model:'Dragon',size:'6',color:'silver',lobes:'4',weight:'276',strength:'14',lower:'68',upper:'114',range:'46',man_usable_lower:'',man_usable_upper:''},{id:'df1',brand:'DMM',model:'Dragonfly',size:'1',color:'green',lobes:'4',weight:'51',strength:'5',lower:'7.4',upper:'11',range:'3.6',man_usable_lower:'',man_usable_upper:''},{id:'df2',brand:'DMM',model:'Dragonfly',size:'2',color:'red',lobes:'4',weight:'52',strength:'6',lower:'8.7',upper:'12.9',range:'4.2',man_usable_lower:'',man_usable_upper:''},{id:'df3',brand:'DMM',model:'Dragonfly',size:'3',color:'yellow',lobes:'4',weight:'53',strength:'6',lower:'10.2',upper:'15.2',range:'5',man_usable_lower:'',man_usable_upper:''},{id:'df4',brand:'DMM',model:'Dragonfly',size:'4',color:'blue',lobes:'4',weight:'63',strength:'8',lower:'12.1',upper:'17.9',range:'5.8',man_usable_lower:'',man_usable_upper:''},{id:'df5',brand:'DMM',model:'Dragonfly',size:'5',color:'silver',lobes:'4',weight:'66',strength:'10',lower:'15.1',upper:'22.5',range:'7.4',man_usable_lower:'',man_usable_upper:''},{id:'df6',brand:'DMM',model:'Dragonfly',size:'6',color:'purple',lobes:'4',weight:'69',strength:'10',lower:'19',upper:'28.3',range:'9.3',man_usable_lower:'',man_usable_upper:''},{id:'flc',brand:'Fixe Hardware',model:'Alien LITE',size:'1/3',color:'black',lobes:'4',weight:'46',strength:'5',lower:'8',upper:'14',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'fld',brand:'Fixe Hardware',model:'Alien LITE',size:'3/8',color:'blue',lobes:'4',weight:'48',strength:'6',lower:'10',upper:'17',range:'7',man_usable_lower:'',man_usable_upper:''},{id:'fle',brand:'Fixe Hardware',model:'Alien LITE',size:'1/2',color:'green',lobes:'4',weight:'52',strength:'7',lower:'13',upper:'22',range:'9',man_usable_lower:'',man_usable_upper:''},{id:'flg',brand:'Fixe Hardware',model:'Alien LITE',size:'3/4',color:'yellow',lobes:'4',weight:'58',strength:'10',lower:'15',upper:'25',range:'10',man_usable_lower:'',man_usable_upper:''},{id:'flh',brand:'Fixe Hardware',model:'Alien LITE',size:'7/8',color:'grey',lobes:'4',weight:'59',strength:'10',lower:'17',upper:'30',range:'13',man_usable_lower:'',man_usable_upper:''},{id:'fl1',brand:'Fixe Hardware',model:'Alien LITE',size:'1',color:'red',lobes:'4',weight:'61',strength:'10',lower:'20',upper:'33',range:'13',man_usable_lower:'',man_usable_upper:''},{id:'frc',brand:'Fixe Hardware',model:'Alien Revolution',size:'1/3',color:'black',lobes:'4',weight:'46',strength:'5',lower:'8',upper:'14',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'frd',brand:'Fixe Hardware',model:'Alien Revolution',size:'3/8',color:'blue',lobes:'4',weight:'48',strength:'6',lower:'10',upper:'17',range:'7',man_usable_lower:'',man_usable_upper:''},{id:'fre',brand:'Fixe Hardware',model:'Alien Revolution',size:'1/2',color:'green',lobes:'4',weight:'52',strength:'7',lower:'13',upper:'22',range:'9',man_usable_lower:'',man_usable_upper:''},{id:'frg',brand:'Fixe Hardware',model:'Alien Revolution',size:'3/4',color:'yellow',lobes:'4',weight:'58',strength:'10',lower:'15',upper:'25',range:'10',man_usable_lower:'',man_usable_upper:''},{id:'frh',brand:'Fixe Hardware',model:'Alien Revolution',size:'7/8',color:'grey',lobes:'4',weight:'59',strength:'10',lower:'17',upper:'30',range:'13',man_usable_lower:'',man_usable_upper:''},{id:'fr1',brand:'Fixe Hardware',model:'Alien Revolution',size:'1',color:'red',lobes:'4',weight:'61',strength:'10',lower:'20',upper:'33',range:'13',man_usable_lower:'',man_usable_upper:''},{id:'mmz',brand:'Metolius',model:'Master',size:'00',color:'gray',lobes:'4',weight:'62.37',strength:'5',lower:'8.3',upper:'13.9',range:'5.6',man_usable_lower:'8.5',man_usable_upper:'12'},{id:'mm0',brand:'Metolius',model:'Master',size:'0',color:'purple',lobes:'4',weight:'65.2',strength:'5',lower:'9.6',upper:'15.4',range:'5.8',man_usable_lower:'10',man_usable_upper:'15'},{id:'mm1',brand:'Metolius',model:'Master',size:'1',color:'blue',lobes:'4',weight:'68.04',strength:'8',lower:'12.1',upper:'19.3',range:'7.2',man_usable_lower:'12.5',man_usable_upper:'18'},{id:'mm2',brand:'Metolius',model:'Master',size:'2',color:'yellow',lobes:'4',weight:'70.87',strength:'10',lower:'15.4',upper:'24.1',range:'8.7',man_usable_lower:'15.5',man_usable_upper:'22.5'},{id:'mm3',brand:'Metolius',model:'Master',size:'3',color:'orange',lobes:'4',weight:'82.21',strength:'10',lower:'18.5',upper:'28.7',range:'10.2',man_usable_lower:'18.5',man_usable_upper:'26.5'},{id:'mm4',brand:'Metolius',model:'Master',size:'4',color:'red',lobes:'4',weight:'90.72',strength:'10',lower:'23.3',upper:'35.5',range:'12.2',man_usable_lower:'23.5',man_usable_upper:'33.5'},{id:'mm5',brand:'Metolius',model:'Master',size:'5',color:'black',lobes:'4',weight:'99.22',strength:'10',lower:'27.9',upper:'43.1',range:'15.2',man_usable_lower:'28.1',man_usable_upper:'39.1'},{id:'mm6',brand:'Metolius',model:'Master',size:'6',color:'green',lobes:'4',weight:'110.56',strength:'10',lower:'33',upper:'52',range:'19',man_usable_lower:'33.2',man_usable_upper:'46.9'},{id:'mss',brand:'Metolius',model:'Supercam',size:'small',color:'grey',lobes:'4',weight:'184.27',strength:'12',lower:'41.1',upper:'69.8',range:'28.7',man_usable_lower:'41.9',man_usable_upper:'63.5'},{id:'msm',brand:'Metolius',model:'Supercam',size:'medium',color:'maroon',lobes:'4',weight:'255.15',strength:'12',lower:'53.5',upper:'92.7',range:'39.2',man_usable_lower:'54.3',man_usable_upper:'85'},{id:'msl',brand:'Metolius',model:'Supercam',size:'large',color:'dark blue',lobes:'4',weight:'311.84',strength:'12',lower:'67.3',upper:'118.1',range:'50.8',man_usable_lower:'68',man_usable_upper:'105.4'},{id:'muz',brand:'Metolius',model:'Ultralight Master',size:'00',color:'gray',lobes:'4',weight:'45',strength:'5',lower:'8.3',upper:'13.9',range:'5.6',man_usable_lower:'8.5',man_usable_upper:'12'},{id:'mu0',brand:'Metolius',model:'Ultralight Master',size:'0',color:'purple',lobes:'4',weight:'45',strength:'5',lower:'9.6',upper:'15.4',range:'5.8',man_usable_lower:'10',man_usable_upper:'15'},{id:'mu1',brand:'Metolius',model:'Ultralight Master',size:'1',color:'blue',lobes:'4',weight:'52',strength:'8',lower:'12.1',upper:'19.3',range:'7.2',man_usable_lower:'12.5',man_usable_upper:'18'},{id:'mu2',brand:'Metolius',model:'Ultralight Master',size:'2',color:'yellow',lobes:'4',weight:'55',strength:'10',lower:'15.4',upper:'24.1',range:'8.7',man_usable_lower:'15.5',man_usable_upper:'22.5'},{id:'mu3',brand:'Metolius',model:'Ultralight Master',size:'3',color:'orange',lobes:'4',weight:'65',strength:'10',lower:'18.5',upper:'28.7',range:'10.2',man_usable_lower:'18.5',man_usable_upper:'26.5'},{id:'mu4',brand:'Metolius',model:'Ultralight Master',size:'4',color:'red',lobes:'4',weight:'75',strength:'10',lower:'23.3',upper:'35.5',range:'12.2',man_usable_lower:'23.5',man_usable_upper:'33.5'},{id:'mu5',brand:'Metolius',model:'Ultralight Master',size:'5',color:'black',lobes:'4',weight:'85',strength:'10',lower:'27.9',upper:'43.1',range:'15.2',man_usable_lower:'28.1',man_usable_upper:'39.1'},{id:'mu6',brand:'Metolius',model:'Ultralight Master',size:'6',color:'green',lobes:'4',weight:'96',strength:'10',lower:'33',upper:'52',range:'19',man_usable_lower:'33.2',man_usable_upper:'46.9'},{id:'mu7',brand:'Metolius',model:'Ultralight Master',size:'7',color:'light blue',lobes:'4',weight:'112',strength:'10',lower:'40.1',upper:'63.5',range:'23.4',man_usable_lower:'40.3',man_usable_upper:'57.4'},{id:'mu8',brand:'Metolius',model:'Ultralight Master',size:'8',color:'purple',lobes:'4',weight:'129',strength:'10',lower:'48.7',upper:'77.4',range:'28.7',man_usable_lower:'49',man_usable_upper:'71.1'},{id:'mpz',brand:'Metolius',model:'Ultralight Power',size:'00',color:'gray',lobes:'4',weight:'45.36',strength:'5',lower:'8.3',upper:'13.9',range:'5.6',man_usable_lower:'8.5',man_usable_upper:'12'},{id:'mp0',brand:'Metolius',model:'Ultralight Power',size:'0',color:'purple',lobes:'4',weight:'48.19',strength:'5',lower:'9.6',upper:'15.4',range:'5.8',man_usable_lower:'10',man_usable_upper:'15'},{id:'mp1',brand:'Metolius',model:'Ultralight Power',size:'1',color:'blue',lobes:'4',weight:'53.86',strength:'8',lower:'12.1',upper:'19.3',range:'7.2',man_usable_lower:'12.5',man_usable_upper:'18'},{id:'mp2',brand:'Metolius',model:'Ultralight Power',size:'2',color:'yellow',lobes:'4',weight:'65.2',strength:'10',lower:'15.4',upper:'24.1',range:'8.7',man_usable_lower:'15.5',man_usable_upper:'22.5'},{id:'mp3',brand:'Metolius',model:'Ultralight Power',size:'3',color:'orange',lobes:'4',weight:'68.04',strength:'10',lower:'18.5',upper:'28.7',range:'10.2',man_usable_lower:'18.5',man_usable_upper:'26.5'},{id:'mp4',brand:'Metolius',model:'Ultralight Power',size:'4',color:'red',lobes:'4',weight:'76.54',strength:'10',lower:'23.3',upper:'35.5',range:'12.2',man_usable_lower:'23.5',man_usable_upper:'33.5'},{id:'mp5',brand:'Metolius',model:'Ultralight Power',size:'5',color:'black',lobes:'4',weight:'85.05',strength:'10',lower:'27.9',upper:'43.1',range:'15.2',man_usable_lower:'28.1',man_usable_upper:'39.1'},{id:'mp6',brand:'Metolius',model:'Ultralight Power',size:'6',color:'green',lobes:'4',weight:'99.22',strength:'10',lower:'33',upper:'52',range:'19',man_usable_lower:'33.2',man_usable_upper:'46.9'},{id:'mp7',brand:'Metolius',model:'Ultralight Power',size:'7',color:'light blue',lobes:'4',weight:'127.57',strength:'10',lower:'40.1',upper:'63.5',range:'23.4',man_usable_lower:'40.3',man_usable_upper:'57.4'},{id:'mp8',brand:'Metolius',model:'Ultralight Power',size:'8',color:'light purple',lobes:'4',weight:'150.25',strength:'10',lower:'48.7',upper:'77.4',range:'28.7',man_usable_lower:'49',man_usable_upper:'71.1'},{id:'mtz',brand:'Metolius',model:'Ultralight TCU',size:'00',color:'gray',lobes:'3',weight:'39.69',strength:'5',lower:'8.3',upper:'13.9',range:'5.6',man_usable_lower:'8.5',man_usable_upper:'12'},{id:'mt0',brand:'Metolius',model:'Ultralight TCU',size:'0',color:'purple',lobes:'3',weight:'42.52',strength:'5',lower:'9.6',upper:'15.4',range:'5.8',man_usable_lower:'10',man_usable_upper:'15'},{id:'mt1',brand:'Metolius',model:'Ultralight TCU',size:'1',color:'blue',lobes:'3',weight:'51.03',strength:'8',lower:'12.1',upper:'19.3',range:'7.2',man_usable_lower:'12.5',man_usable_upper:'18'},{id:'mt2',brand:'Metolius',model:'Ultralight TCU',size:'2',color:'yellow',lobes:'3',weight:'56.7',strength:'10',lower:'15.4',upper:'24.1',range:'8.7',man_usable_lower:'15.5',man_usable_upper:'22.5'},{id:'mt3',brand:'Metolius',model:'Ultralight TCU',size:'3',color:'orange',lobes:'3',weight:'59.53',strength:'10',lower:'18.5',upper:'28.7',range:'10.2',man_usable_lower:'18.5',man_usable_upper:'26.5'},{id:'mt4',brand:'Metolius',model:'Ultralight TCU',size:'4',color:'red',lobes:'3',weight:'68.04',strength:'10',lower:'23.3',upper:'35.5',range:'12.2',man_usable_lower:'23.5',man_usable_upper:'33.5'},{id:'ole',brand:'Omega Pacific',model:'Link',size:'0.5',color:'purple',lobes:'4',weight:'95',strength:'8',lower:'13.5',upper:'35',range:'21.5',man_usable_lower:'',man_usable_upper:''},{id:'olg',brand:'Omega Pacific',model:'Link',size:'0.75',color:'green',lobes:'4',weight:'113',strength:'10',lower:'17.8',upper:'44.5',range:'26.7',man_usable_lower:'',man_usable_upper:''},{id:'ol1',brand:'Omega Pacific',model:'Link',size:'1',color:'red',lobes:'4',weight:'176',strength:'14',lower:'21.1',upper:'53.3',range:'32.2',man_usable_lower:'',man_usable_upper:''},{id:'ol2',brand:'Omega Pacific',model:'Link',size:'2',color:'yellow',lobes:'4',weight:'207',strength:'14',lower:'25.4',upper:'64',range:'38.6',man_usable_lower:'',man_usable_upper:''},{id:'eab',brand:'Rock Empire',model:'Axel',size:'.25',color:'blue',lobes:'4',weight:'98',strength:'6',lower:'14',upper:'22',range:'8',man_usable_lower:'',man_usable_upper:''},{id:'eae',brand:'Rock Empire',model:'Axel',size:'.5',color:'green',lobes:'4',weight:'100',strength:'7',lower:'16',upper:'27',range:'11',man_usable_lower:'',man_usable_upper:''},{id:'ea1',brand:'Rock Empire',model:'Axel',size:'1',color:'gray',lobes:'4',weight:'110',strength:'8',lower:'18',upper:'31',range:'13',man_usable_lower:'',man_usable_upper:''},{id:'ea2',brand:'Rock Empire',model:'Axel',size:'2',color:'purple',lobes:'4',weight:'116',strength:'8',lower:'22',upper:'38',range:'16',man_usable_lower:'',man_usable_upper:''},{id:'ea3',brand:'Rock Empire',model:'Axel',size:'3',color:'black',lobes:'4',weight:'134',strength:'9',lower:'27',upper:'47',range:'20',man_usable_lower:'',man_usable_upper:''},{id:'ea4',brand:'Rock Empire',model:'Axel',size:'4',color:'red',lobes:'4',weight:'164',strength:'9',lower:'35',upper:'60',range:'25',man_usable_lower:'',man_usable_upper:''},{id:'ea5',brand:'Rock Empire',model:'Axel',size:'5',color:'yellow',lobes:'4',weight:'212',strength:'14',lower:'46',upper:'80',range:'34',man_usable_lower:'',man_usable_upper:''},{id:'ea6',brand:'Rock Empire',model:'Axel',size:'6',color:'light blue',lobes:'4',weight:'254',strength:'14',lower:'64',upper:'108',range:'44',man_usable_lower:'',man_usable_upper:''},{id:'ecb',brand:'Rock Empire',model:'Comet',size:'.25',color:'green',lobes:'4',weight:'68',strength:'7',lower:'12',upper:'16.5',range:'4.5',man_usable_lower:'',man_usable_upper:''},{id:'ece',brand:'Rock Empire',model:'Comet',size:'.5',color:'blue',lobes:'4',weight:'72',strength:'9',lower:'14',upper:'20',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'ecg',brand:'Rock Empire',model:'Comet',size:'.75',color:'red',lobes:'4',weight:'76',strength:'10',lower:'17',upper:'24',range:'7',man_usable_lower:'',man_usable_upper:''},{id:'ec1',brand:'Rock Empire',model:'Comet',size:'1',color:'gray',lobes:'4',weight:'82',strength:'11',lower:'18.5',upper:'30.5',range:'12',man_usable_lower:'',man_usable_upper:''},{id:'ec2',brand:'Rock Empire',model:'Comet',size:'2',color:'yellow',lobes:'4',weight:'96',strength:'11',lower:'21',upper:'35',range:'14',man_usable_lower:'',man_usable_upper:''},{id:'ec3',brand:'Rock Empire',model:'Comet',size:'3',color:'light blue',lobes:'4',weight:'102',strength:'12',lower:'26',upper:'44.5',range:'18.5',man_usable_lower:'',man_usable_upper:''},{id:'ec4',brand:'Rock Empire',model:'Comet',size:'4',color:'red',lobes:'4',weight:'138',strength:'12',lower:'33',upper:'55',range:'22',man_usable_lower:'',man_usable_upper:''},{id:'ec5',brand:'Rock Empire',model:'Comet',size:'5',color:'black',lobes:'4',weight:'162',strength:'12',lower:'43',upper:'70',range:'27',man_usable_lower:'',man_usable_upper:''},{id:'ec6',brand:'Rock Empire',model:'Comet',size:'6',color:'yellow',lobes:'4',weight:'214',strength:'12',lower:'55',upper:'89',range:'34',man_usable_lower:'',man_usable_upper:''},{id:'ec7',brand:'Rock Empire',model:'Comet',size:'7',color:'brown',lobes:'4',weight:'258',strength:'12',lower:'72',upper:'113',range:'41',man_usable_lower:'',man_usable_upper:''},{id:'ec8',brand:'Rock Empire',model:'Comet',size:'8',color:'blue',lobes:'4',weight:'316',strength:'12',lower:'90',upper:'140',range:'50',man_usable_lower:'',man_usable_upper:''},{id:'efb',brand:'Rock Empire',model:'Flexor',size:'.25',color:'green',lobes:'4',weight:'78',strength:'7',lower:'12',upper:'16',range:'4',man_usable_lower:'',man_usable_upper:''},{id:'efe',brand:'Rock Empire',model:'Flexor',size:'.5',color:'blue',lobes:'4',weight:'84',strength:'9',lower:'14',upper:'20',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'efg',brand:'Rock Empire',model:'Flexor',size:'.75',color:'red',lobes:'4',weight:'86',strength:'10',lower:'16',upper:'23',range:'7',man_usable_lower:'',man_usable_upper:''},{id:'ef1',brand:'Rock Empire',model:'Flexor',size:'1',color:'gray',lobes:'4',weight:'100',strength:'11',lower:'19',upper:'28',range:'9',man_usable_lower:'',man_usable_upper:''},{id:'ef2',brand:'Rock Empire',model:'Flexor',size:'2',color:'yellow',lobes:'4',weight:'108',strength:'11',lower:'22',upper:'34',range:'12',man_usable_lower:'',man_usable_upper:''},{id:'ef3',brand:'Rock Empire',model:'Flexor',size:'3',color:'light blue',lobes:'4',weight:'118',strength:'11',lower:'27',upper:'44',range:'17',man_usable_lower:'',man_usable_upper:''},{id:'ef4',brand:'Rock Empire',model:'Flexor',size:'4',color:'blue',lobes:'4',weight:'154',strength:'12',lower:'33',upper:'53',range:'20',man_usable_lower:'',man_usable_upper:''},{id:'ef5',brand:'Rock Empire',model:'Flexor',size:'5',color:'black',lobes:'4',weight:'176',strength:'12',lower:'43',upper:'68',range:'25',man_usable_lower:'',man_usable_upper:''},{id:'ef6',brand:'Rock Empire',model:'Flexor',size:'6',color:'yellow',lobes:'4',weight:'224',strength:'12',lower:'55',upper:'88',range:'33',man_usable_lower:'',man_usable_upper:''},{id:'ef7',brand:'Rock Empire',model:'Flexor',size:'7',color:'brown',lobes:'4',weight:'280',strength:'12',lower:'70',upper:'110',range:'40',man_usable_lower:'',man_usable_upper:''},{id:'tbe',brand:'Totem',model:'Basic',size:'0.5',color:'blue',lobes:'4',weight:'56',strength:'5',lower:'11.2',upper:'17.4',range:'6.2',man_usable_lower:'',man_usable_upper:''},{id:'tbf',brand:'Totem',model:'Basic',size:'0.65',color:'green',lobes:'4',weight:'60',strength:'7',lower:'13.6',upper:'21.4',range:'7.8',man_usable_lower:'',man_usable_upper:''},{id:'tbg',brand:'Totem',model:'Basic',size:'0.75',color:'yellow',lobes:'4',weight:'68',strength:'9',lower:'16.6',upper:'26.1',range:'9.5',man_usable_lower:'',man_usable_upper:''},{id:'tbi',brand:'Totem',model:'Basic',size:'0.95',color:'red',lobes:'4',weight:'72',strength:'11',lower:'19.9',upper:'31.6',range:'11.7',man_usable_lower:'',man_usable_upper:''},{id:'tte',brand:'Totem',model:'Totem',size:'0.5',color:'black',lobes:'4',weight:'69',strength:'6',lower:'11.7',upper:'18.9',range:'7.2',man_usable_lower:'',man_usable_upper:''},{id:'ttf',brand:'Totem',model:'Totem',size:'0.65',color:'blue',lobes:'4',weight:'75',strength:'8',lower:'13.8',upper:'22.5',range:'8.7',man_usable_lower:'',man_usable_upper:''},{id:'tth',brand:'Totem',model:'Totem',size:'0.8',color:'yellow',lobes:'4',weight:'83',strength:'9',lower:'17',upper:'27.7',range:'10.7',man_usable_lower:'',man_usable_upper:''},{id:'tt1',brand:'Totem',model:'Totem',size:'1',color:'purple',lobes:'4',weight:'95',strength:'10',lower:'20.9',upper:'34.2',range:'13.3',man_usable_lower:'',man_usable_upper:''},{id:'ttj',brand:'Totem',model:'Totem',size:'1.25',color:'green',lobes:'4',weight:'109',strength:'13',lower:'25.7',upper:'42.3',range:'16.6',man_usable_lower:'',man_usable_upper:''},{id:'ttk',brand:'Totem',model:'Totem',size:'1.5',color:'red',lobes:'4',weight:'132.5',strength:'13',lower:'31.6',upper:'52.2',range:'20.6',man_usable_lower:'',man_usable_upper:''},{id:'ttn',brand:'Totem',model:'Totem',size:'1.8',color:'orange',lobes:'4',weight:'144',strength:'13',lower:'39.7',upper:'64.2',range:'24.5',man_usable_lower:'',man_usable_upper:''},{id:'rn1',brand:'Trango',model:'BallNutz',size:'1',color:'blue',lobes:'1',weight:'31',strength:'7',lower:'3.7',upper:'6.4',range:'2.7',man_usable_lower:'',man_usable_upper:''},{id:'rn2',brand:'Trango',model:'BallNutz',size:'2',color:'red',lobes:'1',weight:'39',strength:'8',lower:'4.8',upper:'9',range:'4.2',man_usable_lower:'',man_usable_upper:''},{id:'rn3',brand:'Trango',model:'BallNutz',size:'3',color:'yellow',lobes:'1',weight:'49',strength:'8',lower:'6.1',upper:'11.6',range:'5.5',man_usable_lower:'',man_usable_upper:''},{id:'rn4',brand:'Trango',model:'BallNutz',size:'4',color:'green',lobes:'1',weight:'58',strength:'8',lower:'7.8',upper:'13.8',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'rn5',brand:'Trango',model:'BallNutz',size:'5',color:'purple',lobes:'1',weight:'73',strength:'8',lower:'10.3',upper:'17.5',range:'7.2',man_usable_lower:'',man_usable_upper:''},{id:'wfe',brand:'Wild Country',model:'Friend',size:'0.5',color:'purple',lobes:'4',weight:'88',strength:'12',lower:'20.6',upper:'34.5',range:'13.9',man_usable_lower:'',man_usable_upper:''},{id:'wfg',brand:'Wild Country',model:'Friend',size:'0.75',color:'green',lobes:'4',weight:'102',strength:'12',lower:'25.8',upper:'43',range:'17.2',man_usable_lower:'',man_usable_upper:''},{id:'wf1',brand:'Wild Country',model:'Friend',size:'1',color:'red',lobes:'4',weight:'123',strength:'12',lower:'31.7',upper:'53.6',range:'21.9',man_usable_lower:'',man_usable_upper:''},{id:'wf2',brand:'Wild Country',model:'Friend',size:'2',color:'yellow',lobes:'4',weight:'142',strength:'12',lower:'41.5',upper:'69.3',range:'27.8',man_usable_lower:'',man_usable_upper:''},{id:'wf3',brand:'Wild Country',model:'Friend',size:'3',color:'blue',lobes:'4',weight:'192',strength:'12',lower:'52.7',upper:'88',range:'35.3',man_usable_lower:'',man_usable_upper:''},{id:'wf4',brand:'Wild Country',model:'Friend',size:'4',color:'silver',lobes:'4',weight:'260',strength:'12',lower:'66.8',upper:'112.1',range:'45.3',man_usable_lower:'',man_usable_upper:''},{id:'wh0',brand:'Wild Country',model:'Helium',size:'0',color:'blue',lobes:'4',weight:'87',strength:'12',lower:'14',upper:'22.54',range:'8.54',man_usable_lower:'',man_usable_upper:''},{id:'whe',brand:'Wild Country',model:'Helium',size:'0.5',color:'red',lobes:'4',weight:'91',strength:'12',lower:'16.56',upper:'26.66',range:'10.1',man_usable_lower:'',man_usable_upper:''},{id:'wh1',brand:'Wild Country',model:'Helium',size:'1',color:'gold',lobes:'4',weight:'95',strength:'12',lower:'19.71',upper:'31.73',range:'12.02',man_usable_lower:'',man_usable_upper:''},{id:'whk',brand:'Wild Country',model:'Helium',size:'1.5',color:'silver',lobes:'4',weight:'104',strength:'12',lower:'23.59',upper:'37.98',range:'14.39',man_usable_lower:'',man_usable_upper:''},{id:'wh2',brand:'Wild Country',model:'Helium',size:'2',color:'red',lobes:'4',weight:'109',strength:'12',lower:'28.41',upper:'45.73',range:'17.32',man_usable_lower:'',man_usable_upper:''},{id:'who',brand:'Wild Country',model:'Helium',size:'2.5',color:'gold',lobes:'4',weight:'117',strength:'12',lower:'34.4',upper:'55.39',range:'20.99',man_usable_lower:'',man_usable_upper:''},{id:'wh3',brand:'Wild Country',model:'Helium',size:'3',color:'purple',lobes:'4',weight:'145',strength:'12',lower:'41.9',upper:'67.47',range:'25.57',man_usable_lower:'',man_usable_upper:''},{id:'whp',brand:'Wild Country',model:'Helium',size:'3.5',color:'blue',lobes:'4',weight:'171',strength:'12',lower:'51.34',upper:'82.65',range:'31.31',man_usable_lower:'',man_usable_upper:''},{id:'wh4',brand:'Wild Country',model:'Helium',size:'4',color:'silver',lobes:'4',weight:'208',strength:'12',lower:'63.25',upper:'101.83',range:'38.58',man_usable_lower:'',man_usable_upper:''},{id:'wt5',brand:'Wild Country',model:'Tech Friend',size:'5',color:'red',lobes:'4',weight:'339',strength:'14',lower:'84',upper:'138',range:'54',man_usable_lower:'',man_usable_upper:''},{id:'wt6',brand:'Wild Country',model:'Tech Friend',size:'6',color:'green',lobes:'4',weight:'533',strength:'14',lower:'118',upper:'194',range:'76',man_usable_lower:'',man_usable_upper:''},{id:'wz1',brand:'Wild Country',model:'Zero',size:'1',color:'purple',lobes:'4',weight:'25',strength:'3',lower:'5.5',upper:'7.8',range:'2.3',man_usable_lower:'',man_usable_upper:''},{id:'wz2',brand:'Wild Country',model:'Zero',size:'2',color:'green',lobes:'4',weight:'32',strength:'4',lower:'7',upper:'9.8',range:'2.8',man_usable_lower:'',man_usable_upper:''},{id:'wz3',brand:'Wild Country',model:'Zero',size:'3',color:'silver',lobes:'4',weight:'44',strength:'6',lower:'8.5',upper:'12.2',range:'3.7',man_usable_lower:'',man_usable_upper:''},{id:'wz4',brand:'Wild Country',model:'Zero',size:'4',color:'gold',lobes:'4',weight:'50',strength:'6',lower:'10.3',upper:'16',range:'5.7',man_usable_lower:'',man_usable_upper:''},{id:'wz5',brand:'Wild Country',model:'Zero',size:'5',color:'blue',lobes:'4',weight:'66',strength:'9',lower:'13',upper:'19',range:'6',man_usable_lower:'',man_usable_upper:''},{id:'wz6',brand:'Wild Country',model:'Zero',size:'6',color:'red',lobes:'4',weight:'70',strength:'9',lower:'17',upper:'24',range:'7',man_usable_lower:'',man_usable_upper:''}]},function(e,t,n){var a=n(470);'string'==typeof a&&(a=[[e.i,a,'']]);var o={},i;o.transform=i;n(173)(a,o);a.locals&&(e.exports=a.locals),!1},function(e,t,n){t=e.exports=n(172)(void 0),t.push([e.i,'.hidden {\n  display: none;\n}\n.bar {\n  fill: steelblue;\n}\n\n.bar:hover {\n  fill: brown;\n}\n\nbody {\n  margin: 0;\n  font-family: RobotoDraft, \'Helvetica Neue\', Helvetica, Arial;\n}\n\nheader {\n  min-width: 980px;\n  width: 100%;\n  height: 64px;\n  background-color: #4285f4;\n  color: white;\n  font-size: 18px;\n}\n\nheader > .title {\n  float: left;\n  line-height: 64px;\n  margin-left: 16px;\n  border-right: 1px solid #5b92ec;\n  padding-right: 16px;\n  margin-right: 16px;\n  font-weight: bold;\n}\n\nheader:after {\n  content: "";\n  width: 100%;\n  height: 1px;\n  margin-top: 63px;\n  display: block;\n  position: absolute;\n  top: 0;\n  z-index: -1;\n  box-shadow: 0px 0px 8px 2px #555;\n}\n\nheader .row2 {\n  display: none;\n}\n\nheader.expanded .row2 {\n  display: flex;\n}\n\nheader.expanded {\n  height: 128px;\n}\n\nheader.expanded > .title {\n  line-height: 128px;\n}\n\nheader.expanded:after {\n  margin-top: 127px;\n}\n\nheader > .controls {\n  display: flex;\n  flex-wrap: wrap;\n}\n\nheader .control {\n  color: #c2d4f1;\n  font-size: 16px;\n  display: inline-block;\n  height: 64px;\n  line-height: 64px;\n  flex: none;\n}\n\nheader .control a {\n  color: #c2d4f1;\n  text-decoration: none;\n}\n\nheader .control button {\n  padding: 0;\n  border: none;\n  background: none;\n  color: inherit;\n  font-size: inherit;\n  cursor: pointer;\n}\n\nheader .control button.dropdown:after {\n  content: " \\25BE";\n}\n\nsvg {\n  margin: 0 16px;\n}\n\n#control-filter-container {\n  z-index: 20;\n  position: absolute;\n  background-color: white;\n  border-radius: 2px;\n  box-shadow: 0px 2px 10px 0 grey;\n  top: 8px;\n  padding: 8px 16px;\n  color: black;\n  font-size: 14px;\n  line-height: 14px;\n  width: 400px;\n}\n\n#control-filter-container > button {\n  line-height: 32px;\n  margin: 12px 0;\n  border-radius: 2px;\n  padding: 0 12px;\n  background-color: #4285f4;\n  color: white;\n}\n\n.control {\n  margin-right: 24px;\n  position: relative;\n}\n\n.control .helper-text {\n  display: none;\n}\n\n.control:hover .helper-text {\n  display: block;\n  position: absolute;\n  background-color: #4285f4;\n  border-radius: 2px;\n  width: 300px;\n  padding: 10px;\n  line-height: normal;\n  box-shadow: 5px 5px 5px #555;\n\n  z-index: 5;\n  left: -10px;\n  top: 50px;\n}\n\n/**\n.control:hover .helper-text:after {\n  content: "";\n  width: 100%;\n  height: 1px;\n  display: block;\n  position: absolute;\n  bottom: 0;\n  z-index: 4;\n  box-shadow: 0px 0px 8px 2px #555;\n}\n*/\n\n.control > select {\n  background-color: transparent;\n  padding: 4px 14px 4px 0;\n  font-size: inherit;\n  border: none;\n  border-bottom: 1px solid #c2d4f1;\n  border-radius: 0;\n  appearance: none;\n  color: inherit;\n  -webkit-appearance: none;\n  cursor: pointer;\n}\n\n.control.select-container:after {\n  content: "\\25BE";\n  position: relative;\n  right: 16px;\n  pointer-events: none;\n}\n\n.control .tree-multiselect {\n  border: 0;\n}\n\n.control .tree-multiselect > .selections {\n  padding: 0;\n}\n\n.control .tree-multiselect > .selections input[class="search"] {\n  height: 38px;\n  font-size: inherit;\n  border: 0;\n  background-color: #eee;\n  width: auto;\n}\n\n.control .tree-multiselect > .selections .auxiliary {\n  border-radius: 2px;\n  border: 0;\n  background-color: #eee;\n  height: 38px;\n  margin-bottom: 10px;\n}\n\n.control .tree-multiselect > .selections .auxiliary:before {\n  content: "\\26B2";\n  transform: rotate(-45deg);\n  display: inline-block;\n  font-weight: bold;\n  padding: 0 10px;\n}\n\n.control .tree-multiselect .section {\n  font-size: inherit;\n  color: black;\n}\n\n.control .tree-multiselect .title {\n  padding-left: 0;\n  background-color: inherit;\n  color: inherit;\n}\n\n.control .tree-multiselect .section .item {\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 14px;\n}\n\n.control .tree-multiselect .title .collapse-section {\n  margin-left: 0;\n}\n\n.control .tree-multiselect .title,\n.control .tree-multiselect .item {\n  margin-bottom: 6px;\n}\n\n.control .tree-multiselect .section.collapsed > div.title span.collapse-section:after {\n  content: "\\25B8";\n}\n\n.control .tree-multiselect div.title > span.collapse-section:after {\n  content: "\\25BE";\n}\n\n.controls {\n  list-style: none;\n  padding-left: 0;\n}\n\nli.control {\n  display: inline-block;\n  margin-right: 20px;\n  padding: 6px 12px;\n  border: 1px solid gainsboro;\n  border-radius: 4px;\n  background-color: #eee;\n}\n\n.d3-tip {\n  background-color: rgba(255, 255, 255, 0.9);\n  border: 1px solid #ccc;\n  border-radius: 2px;\n  padding: 5px;\n  margin: 5px;\n}\n.d3-tip p {\n  margin: 0;\n  padding: 0;\n}\n.d3-tip p:nth-child(1) {\n  padding-right: 28px;\n}\n.hide-popover {\n  position: absolute;\n  top: 5px;\n  right: 5px;\n}\n\n.axis > .label {\n  fill: black;\n}\n\n.grid.x path, .grid.x text {\n  display: none;\n}\n.grid.x line {\n  stroke: #ebebeb;\n}\n\n#share-info {\n  position: fixed;\n  background-color: #4285f4;\n  border-radius: 2px;\n  width: 400px;\n  padding: 10px;\n  line-height: normal;\n  box-shadow: 5px 5px 5px #555;\n  margin-left: -200px;\n\n  z-index: 99;\n  left: 50vw;\n  top: 40vh;\n}\n\n#share-info-url {\n  width: 100%;\n  font-size: 16px;\n}\n',''])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,